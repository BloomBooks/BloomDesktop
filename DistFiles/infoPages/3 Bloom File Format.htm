<html><head><title>Bloom Book File Format</title><style type="text/css">ol{margin:0;padding:0}p{margin:0}.c4{list-style-type:circle;margin:0;padding:0}.c20{width:468pt;background-color:#ffffff;padding:72pt 72pt 72pt 72pt}.c12{list-style-type:lower-latin;margin:0;padding:0}.c6{list-style-type:disc;margin:0;padding:0}.c5{color:inherit;text-decoration:inherit}.c9{color:#000099;text-decoration:underline}.c21{margin-left:30pt}.c15{color:#9900ff}.c16{color:#980000}.c2{margin-left:36pt}.c19{text-decoration:underline}.c13{color:#0000ff}.c10{color:#ff0000}.c14{font-size:14pt}.c3{font-style:italic}.c0{direction:ltr}.c1{height:11pt}.c17{font-size:24pt}.c18{text-indent:36pt}.c8{font-weight:bold}.c7{padding-left:0pt}.c11{margin-left:72pt}body{color:#000000;font-size:11pt;font-family:Arial}h1{padding-top:24pt;color:#000000;font-size:24pt;font-family:Arial;font-weight:bold;padding-bottom:6pt}h2{padding-top:18pt;color:#000000;font-size:18pt;font-family:Arial;font-weight:bold;padding-bottom:4pt}h3{padding-top:14pt;color:#000000;font-size:14pt;font-family:Arial;font-weight:bold;padding-bottom:4pt}h4{padding-top:12pt;color:#000000;font-size:12pt;font-family:Arial;font-weight:bold;padding-bottom:2pt}h5{padding-top:11pt;color:#000000;font-size:11pt;font-family:Arial;font-weight:bold;padding-bottom:2pt}h6{padding-top:10pt;color:#000000;font-size:10pt;font-family:Arial;font-weight:bold;padding-bottom:2pt}</style></head><body class="c20"><h1 class="c0"><a name="h.jrq3j7ke9xen"></a><span>Bloom File Format</span></h1><h3 class="c0"><a name="h.ndan2plucky5"></a><span class="c15">Comments or Corrections?</span></h3><p class="c0"><span class="c15">This official, &ldquo;source&rdquo; version of this document can be found online using Google Docs, at </span><span class="c15 c19"><a class="c5" href="https://docs.google.com/document/d/16M8Fvt1SLYgUX5UbWy3q9s2_ab0Ni39mVumtIYzxKm4/edit">https://docs.google.com/document/d/16M8Fvt1SLYgUX5UbWy3q9s2_ab0Ni39mVumtIYzxKm4/edit</a></span><span class="c15">. Your comments are welcome, directly on that version using the &ldquo;Comments&rdquo; feature.</span></p><h1 class="c0"><a name="h.m81su4z3bunf"></a><span>Introduction</span></h1><p class="c0"><span>Bloom documents are html, the language of the World Wide Web. &nbsp;This gives many advantages over proprietary formats:</span></p><ol class="c6" start="1"><li class="c2 c0 c7"><span>Future-proof. Long after Bloom is gone, these documents will be readable and convertible.</span></li><li class="c2 c0 c7"><span>Those few people needing to become experts in the Bloom format can learn about html, css (Cascading Stylesheets), and javascript from the a vast amount of information available about these technologies, in all major languages. &nbsp;</span></li></ol><p class="c0 c1"><span></span></p><p class="c0"><span>Bloom&rsquo;s use of Html even has advantages over other open-source book formats (e.g. Scribus, Open Office):</span></p><ol class="c6" start="3"><li class="c2 c0 c7"><span>Bloom can leverage the ever-growing mass of html-related tooling, stylesheets, javascript widgets, etc.</span></li><li class="c2 c0 c7"><span>A future Bloom could easily run in web-browser, without need for installation. Documents could be stored safely in the cloud.</span></li></ol><p class="c0 c1"><span></span></p><p class="c0"><span class="c13 c8">The following information is for advanced front-matter, primer, or shell developers. </span><span>If you&#39;re just making shells for other people to use, you probably don&#39;t need to know any of the following.</span></p><p class="c0 c1"><span></span></p><p class="c0"><span class="c8 c13">Bloom is in experimental mode, </span><span>and the Bloom format is still evolving in response to needs we discover. Take that into account before converting hundreds of books. The wise thing at this point it to convert one book of each type, so that we can find any missing file-format elements that you will need. The plan is to cease any breaking changes by early 2012.</span></p><h2 class="c0"><a name="h.3waig4mu8553"></a><span>Html 5</span></h2><p class="c0"><span>Bloom documents are strictly-conformant HTML 5. &nbsp;The minimum</span><span><a class="c5" href="http://validator.w3c.org/">&nbsp;</a></span><span class="c9"><a class="c5" href="http://validator.w3c.org/">validator.w3c.org</a></span><span>&nbsp;warning-and-error-free HTML 5 document looks like this:</span></p><p class="c0"><span>&lt;!DOCTYPE html&gt;</span></p><p class="c0"><span>&lt;html&gt;</span></p><p class="c0"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;head&gt;</span></p><p class="c0"><span>&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta charset=&quot;UTF-8&quot;&gt;</span></p><p class="c0"><span>&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;&lt;/title&gt;</span></p><p class="c0"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/head&gt;</span></p><p class="c0"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;body&gt;&lt;/body&gt;</span></p><p class="c0"><span>&lt;/html&gt;</span></p><p class="c0"><span>Things to notice about the above:</span></p><ol class="c6" start="1"><li class="c2 c0 c7"><span>The DOCTYPE</span></li><li class="c2 c0 c7"><span>There is no namespace attribute on the html</span></li></ol><p class="c0"><span>Now, because Bloom is using HTML5 in a special way --paged, editable, multilinguall books-- it doesn&#39;t operate on just any HTML5 document. &nbsp;HTML5 allows for proprietary &quot;data-*&quot; attribute, and Bloom uses them extensively. Bloom also uses some pre-defined class names. Of course, you&#39;ll want to open up a bloom html file and see for yourself how it is structured. &nbsp;Two simple examples are the A5Portrait/templatePages.htm, and the Vaccinations.htm, which comes in the Sample Shells project. You can look at the originals or create a book using them, and look at what Bloom does.</span></p><p class="c0 c1"><span></span></p><h1 class="c0"><a name="h.72rzpaug8bur"></a><span>What&rsquo;s Special</span></h1><p class="c0"><span>Bloom documents have goals that are unusual in the world of &ldquo;web pages&rdquo;:</span></p><ol class="c6" start="1"><li class="c2 c0 c7"><span>Page orientation. &nbsp;HTML was not designed for fitting things on a series of rectangles of a certain size (though a future CSS may support that).</span></li><li class="c2 c0 c7"><span>Highly multi-lingual. Bloom books need to support both vernacular and multiple national languages.</span></li><li class="c2 c0 c7"><span>Designed for translation. This means that Bloom must know which fields are supposed to be translatable, and be able to make new spaces for the vernacular translation while retaining and displaying the other languages to assist in translation.</span></li><li class="c2 c0 c7"><span>Modes. The same page will be viewed in three different scenarios:</span></li></ol><ol class="c12" start="1"><li class="c0 c7 c11"><span>The original author, of &nbsp;a book or shell.</span></li><li class="c0 c7 c11"><span>Someone adapting a shell for a new locale.</span></li><li class="c0 c7 c11"><span>Someone translating that shell in the vernacular.</span></li></ol><p class="c0 c2"><span>In each of these situations, the &ldquo;edit-ability&rdquo; of various fields needs to change. For example, users in (b) and (c) &nbsp;should not be able to change the copyright or license of the book.</span></p><p class="c0"><span>Because of these special needs, there is more to making a Bloom book than &ldquo;just make it html&rdquo;. &nbsp;There are attributes, classes, and conventions that you will need to follow.</span></p><h1 class="c0"><a name="h.2scx0yt5tnr7"></a><span>The Basics</span></h1><h2 class="c0"><span>Page Structure</span></h2><p class="c0"><span>Under the &lt;body&gt; element, Bloom expects to find a series of DIVs. </span></p><p class="c0 c1"><span></span></p><p class="c0"><span class="c8 c14">Marking pages with the &lt;div class=&rsquo;-bloom-page&rsquo;&gt;</span></p><p class="c0"><span>Each printable page is represented by &lt;div class=&quot;-bloom-page&quot;&gt;.</span></p><h3 class="c0"><a name="h.53a21fmdbxju"></a><span>Carrying variables with &lt;div class=&rsquo;-bloom-dataDiv&rsquo;&gt;</span></h3><p class="c0"><span>Shells have a single div marked class=&rsquo;dataDiv&rsquo;. This div is normally invisible. &nbsp;It holds information needed to populate the user&rsquo;s selected frontmatter pages. &nbsp;</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>Here&rsquo;s an example from the SIL PNG Vaccinations book:</span></p><p class="c0 c1"><span></span></p><p class="c0"><img height="499" src="images/image02.png" width="793"></p><p class="c0 c1"><span></span></p><p class="c0"><span class="c10">[TODO: how does the div get there from a new, original book? in Dec 2011, by hand.]</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>The data-book attribute is described below in </span><span class="c9"><a class="c5" href="#id.7kgmyvi9a01m">the XMatter section</a></span><span>.</span></p><h2 class="c0"><a name="h.8bf44sdfp5ae"></a><span>Images</span></h2><p class="c0"><span>Currently, there is nothing special needed to make images that the user can change. &nbsp;When the user clicks on an image, a dialog comes up which lets them inspect the metadata of the image, and change it (from scanner, camera, clip-art collection, or file system). &nbsp;Currently, in a verncular-book library, Bloom prevents the user from changing the images from shell books.</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>Formatting note: For proper sizing of images, wrap them in a &lt;p&gt; with the &ldquo;imageHolder&rdquo; class:</span></p><p class="c0"><span>&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p class=&quot;imageHolder&quot; &gt;</span></p><p class="c0"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;img alt=&quot;missing&quot; class=&quot;picture&quot; src=&quot;HL0014-3.png&quot; /&gt;</span></p><p class="c0"><span>&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/p&gt;</span></p><h2 class="c0"><a name="h.xnunmds8c27k"></a><span>Translatable Text Groups</span></h2><p class="c0"><span>The key task of filling out shells is that of translating, or paraphrasing, from one or more source texts. &nbsp;How does Bloom know a given &lt;textarea&gt; should be translated? &nbsp;After all, books in minority languags almost always contain some text in a national language, so that the wider community knows what the book is about, what language it is in, etc. Also, Bloom needs a way to collect up the various source texts available, and display them to the user in a convenient way.</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>Bloom does this with the following two rules:</span></p><p class="c0"><span>1) each editable field must be enclosed by a parent element, normally a &lt;p&gt;.</span></p><p class="c0"><span>2) Some ancestor must have the &ldquo;</span><span class="c8">-bloom-translationGroup</span><span>&rdquo; class. &nbsp;This is often on the enclosing &lt;p&gt; itself, but could also be on the page div itself, so long as all material on the page is translatable (not national language texts will be possible on that page).</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>Here&rsquo;s a simple translatable page illustrating text groups:</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>&lt;div class=&quot;-bloom-page&quot;&gt;</span></p><p class="c0"><span>&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p class=&quot;-bloom-translationGroup&quot;&gt;</span></p><p class="c0 c11"><span>&lt;textarea lang=&quot;</span><span class="c8">en</span><span>&quot;&gt;If you don&#39;t build a fence, sometimes there&#39;s no problem, but if a pigs come, you&#39;ll be sorry!&lt;/textarea&gt;</span></p><p class="c0 c11"><span>&lt;textarea lang=&quot;</span><span class="c8">tpi</span><span>&quot;&gt;Sapos yu no wokim banis, sampela taim nogat trabel tasol sapos pik i kam, bai yu sori tru.&lt;/textarea&gt;</span></p><p class="c0"><span>&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/p&gt;</span></p><p class="c0"><span>&lt;/div&gt;</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>When Bloom creates a book, it finds all the translation groups and introduces new &lt;textarea&gt; as needed. For example, if the library had &ldquo;abc&rdquo; as the Ethnologue (ISO639) code of the target language, Bloom would change the above to:</span></p><p class="c0"><span>&lt;div class=&quot;-bloom-page&quot;&gt;</span></p><p class="c0"><span>&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p class=&quot;-bloom-translationGroup&quot;&gt;</span></p><p class="c0 c11"><span class="c16">&lt;textarea lang=&quot;</span><span class="c8 c16">abc</span><span class="c16">&quot;&gt;&lt;/textarea&gt;</span></p><p class="c0 c11"><span>&lt;textarea lang=&quot;</span><span class="c8">en</span><span>&quot;&gt;If you don&#39;t build a fence, sometimes there&#39;s no problem, but if a pigs come, you&#39;ll be sorry!&lt;/textarea&gt;</span></p><p class="c0 c11"><span>&lt;textarea lang=&quot;</span><span class="c8">tpi</span><span>&quot;&gt;Sapos yu no wokim banis, sampela taim nogat trabel tasol sapos pik i kam, bai yu sori tru.&lt;/textarea&gt;</span></p><p class="c0"><span>&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/p&gt;</span></p><p class="c0"><span>&lt;/div&gt;</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>Bloom avoids showing this long list of &lt;textareas&gt; by generating a stylesheet (languageDisplay.css) which hides all but the vernacular inside translationGroups.</span></p><p class="c0 c1"><span></span></p><a href="#" name="id.7kgmyvi9a01m"></a><h1 class="c0"><a name="h.npzzdwb21cjx"></a><span>XMatter (Front and Back Matter)</span></h1><p class="c0"><span>Our research showed us that around the world, organizations need specialized </span><span class="c3">front matter</span><span>. That is, cover page, title page, verso page, etc. &nbsp;They have different formating, logos, care different information, and place the information on different pages (e.g. some use the inside of the front cover, or the back cover). Some countries include a page with a letter from the education department, some even have a signature page where officials can sign-off of the publication.</span></p><p class="c0"><span>To make as many shells as possible available in each country, Bloom separates the core of the books from its front matter. Actually, we anticipate needing back matter as well. &nbsp;The front (and eventually back) matter is supplied by an &ldquo;xmatter pack&rdquo;, which the user can select. &nbsp;When he makes a new book, Bloom uses the selected xmatter pack to populate the front (and eventually back) pages as needed.</span></p><p class="c0"><span>In practice, Front Matter is far more complex than the inner book pages:</span></p><ol class="c6" start="1"><li class="c2 c0 c7"><span>Has between two and four languages per page (vernacular, national language, second national language, and credits in the original language of the shell).</span></li><li class="c2 c0 c7"><span>Has some fields which the user can edit (vernacular title), and some which he might not be able to (copyright notice on a shell book).</span></li><li class="c2 c0 c7"><span>Has some fields which are best filled in with a specialized user interface (e.g. a Creative Commons License chooser).</span></li></ol><p class="c0"><span>Creating xmatter packs will require cooperation between someone representing the organization and a technical person who can manage HTML &amp; CSS, and who has carefully studied the following information.</span></p><p class="c0 c1"><span></span></p><h3 class="c0"><a name="h.pgiplk8jg5p2"></a><span>XMatter Folder</span></h3><p class="c0"><span>While there</span><span class="c10">&nbsp;[will eventually be] </span><span>a way to select an xmatter pack from different location, currently, all xmatter packs are found in the &ldquo;xmatter&rdquo; folder in the Bloom installation folder. Inside there are various folders representing xmatter packs. For example, Bloom ships with a &ldquo;factory-xmatter&rdquo; folder which contains a single html file and </span><span class="c10">[eventually] </span><span>multiple stylesheets, one per paper size. While the factory pack does not include any images, Bloom will copy any images it finds there into the target book folder, so you can include organization or other graphics as needed.</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>Each Xmatter pack must have a unique &ldquo;key&rdquo;. Some examples:</span></p><ol class="c6" start="1"><li class="c2 c0 c7"><span>factory</span></li><li class="c2 c0 c7"><span>sil</span></li><li class="c2 c0 c7"><span>OurNGOPhillipines</span></li></ol><p class="c0 c1"><span></span></p><p class="c0"><span>The Xmatter folder must be named using this key, following this pattern:</span></p><p class="c0 c1 c18"><span></span></p><p class="c0 c18"><span>&lt;key&gt;-xmatter</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>For example, &ldquo;factory-xmatter&rdquo;, &ldquo;silpng-xmatter&rdquo;, and &ldquo;OurNGOPhillipines-xmatter&rdquo;.</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>In the following sections, you&rsquo;ll see how these are used in naming the files inside the folder.</span></p><h3 class="c0"><a name="h.nk493eqyn9x3"></a><span>Stylesheets</span></h3><p class="c0"><span>As always, each paper size and orientation requires its own stylesheet to place things in the right place on the page. Bloom will look in the selected xmatter folder the appropriate css file using this pattern:</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>&lt;paper size&gt;-&lt;orientation&gt;-&lt;key&gt;-xmatter.css</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>Where &lt;paper-size&gt; is one of (a3, a4, a5, a6, letter) and &lt;orientation&gt; is either &ldquo;portrait&rdquo; or &ldquo;landscape&rdquo;.</span></p><p class="c0 c1"><span></span></p><h3 class="c0"><a name="h.cybi2wan1t1q"></a><span>Html</span></h3><p class="c0"><span>Bloom will look in the selected xmatter folder for the html file using this pattern:</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>&lt;key&gt;-xmatter.htm</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>Let&rsquo;s look now at the factory-xmatter html. &nbsp;It has three pages: cover, title, and verso page. Here&rsquo;s the opening &lt;div&gt; tag of the cover page:</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>&lt;div class=&quot;-bloom-page cover coverColor -bloom-frontMatter&quot; data-page=&quot;required singleton&quot; id=&quot;74731b2d-18b0-420f-ac96-6de20f659810&quot;&gt;</span></p><p class="c0 c1"><span></span></p><h5 class="c0"><a name="h.yy5ze3p929wy"></a><span>Div Classes</span></h5><p class="c0"><span>This example contains the following classes:</span></p><p class="c0 c1"><span></span></p><ol class="c6" start="1"><li class="c2 c0 c7"><span>-bloom-page: This is just the normal class used for all pages in Bloom.</span></li><li class="c2 c0 c7"><span>cover and coverColor: these are used by the stylesheets.</span></li><li class="c2 c0 c7"><span>-bloom-frontMatter: self-explanator. </span><span class="c10">[Currently doesn&rsquo;t do anything. May be used in future if we provide a way to replace one pack from other after the book has already been created. What about back matter?] &nbsp;[Should this instead be something in data-page?]</span><span>&nbsp;</span></li></ol><h5 class="c0"><a name="h.a6v716r2iypt"></a><span>Div data-page Attribute</span></h5><p class="c0"><span>This example contains the following values in data-page:</span></p><p class="c0 c1"><span></span></p><ol class="c6" start="1"><li class="c2 c0 c7"><span>required. The user will not be allowed to delete this page</span></li><li class="c2 c0 c7"><span>singleton. There can be only one copy of this page </span><span class="c10">[The current app doesn&rsquo;t give you a way to add more xmatter pages anyways.. but some back-matter pages might be repeatable (e.g. translation pages).]</span></li></ol><p class="c0 c1"><span></span></p><h5 class="c0"><a name="h.py7sq5yx295i"></a><span>Variables: Data-book and Data-library</span></h5><p class="c0 c1"><span></span></p><p class="c0"><span>The next line in factory-xmatter.htm is a box for entering the vernacular title:</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;textarea </span><span class="c8">data-book=&quot;bookTitle&quot; </span><span>data-hint=&quot;Book title in your language&quot; class=&quot;vernacularBookTitle coverColor&quot; lang=&quot;V&quot;&gt;{Title in Vernacular}&lt;/textarea&gt;</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>If an html element has a </span><span class="c3">data-book </span><span>attribute, Bloom will copy the text in that textarea into other elements which have the same </span><span class="c3">data-book</span><span>&nbsp;property. This allows the user to enter a piece of information once, and have it show up all over. For example, the following textarea is used in a study book, where many of the pages have a heading which, in English, just says &quot;Questions&quot;:</span></p><p class="c0"><span>&nbsp; &nbsp; &nbsp; &nbsp;&lt;textarea lang=&quot;en&quot; data-book=&quot;questionsHeading&quot;&gt;Questions&lt;/textarea&gt;</span></p><p class="c0"><span>Now, what if you want a value to repeat throught </span><span class="c3">all </span><span>the books in the library? Do that by instead using a </span><span class="c3">data-library</span><span>&nbsp;attribute. Bloom saves such variables in the &quot;.bloomLibrary&quot; file that is at the root level of each library folder on disk. The values are then used in all future books in that library. For example,</span></p><p class="c0"><span>&nbsp; &nbsp;&lt;p&gt;This language is spoken in the Sub District of &lt;span data-library=&quot;subDistrict&quot;&gt;&lt;/span&gt; &lt;/p&gt;</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>Some variables are used throughout the user&rsquo;s library, notably the language code, language name, province, etc. For example, when you create a new library, Bloom makes you identify the ISO-639 (Ethnologue) code for the language. It stores that value under the &quot;Iso639Code&quot; library variable. So if you wanted that code to show up on a title page, you could do it this way:</span></p><p class="c21 c0"><span>&lt;p&gt;ISo Code=&lt;span data-library=&quot;Iso639Code&quot;&gt;&lt;/span&gt;&lt;/p&gt;</span></p><p class="c0 c1 c21"><span></span></p><p class="c21 c0"><span class="c10">[TODO: currently, you cannot introduce new library variables in front matter. They are only supported in the configuration boxes of dynamic templates (e.g. the Wall Calendar days of the week)]</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>Variables are actually collections of values, keyed off of languages (or writing systems). Those familiar with FieldWorks or WeSay will be familiar with this approach, where, for example a single &ldquo;gloss&rdquo; field can have a number of </span><span class="c3">language alternatives</span><span>. For example, an important variable is the </span><span class="c3">bookTitle</span><span>. This is shown on the cover and title page in one or more languages. Bloom uses vernacular element of the </span><span class="c3">bookTitle</span><span>&nbsp;to:</span></p><ol class="c4" start="1"><li class="c0 c7 c11"><span>set the &lt;title&gt; element of the html document</span></li><li class="c0 c7 c11"><span>sets the name of the book&#39;s folder</span></li><li class="c0 c7 c11"><span>set the name of the book&#39;s html file</span></li></ol><p class="c0"><span>Returning to our example from the factory-xmatter.htm, notice the lang attribute:</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>&lt;textarea </span><span class="c8">data-book=&quot;bookTitle&quot; </span><span>data-hint=&quot;Book title in your language&quot; class=&quot;vernacularBookTitle coverColor&quot; </span><span class="c8">lang=&quot;V&quot;</span><span>&gt;{Title in Vernacular}&lt;/textarea&gt;</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>This is saying that we want to display the bookTitle in the vernacular. &nbsp;At runtime, Bloom will make the following replacements:</span></p><ol class="c6" start="1"><li class="c2 c0 c7"><span>V &rarr; the ISO 639 code of the library&rsquo;s vernacular</span></li><li class="c2 c0 c7"><span>N1 &rarr; the ISO 639 code of the library&rsquo;s first national language</span></li><li class="c2 c0 c7"><span>N1 &rarr; the ISO 639 code of the library&rsquo;s second national language</span></li></ol><p class="c0 c1"><span></span></p><p class="c0"><span>While we&rsquo;re here, notice that the text here is &ldquo;{Title in Vernacular}&rdquo;. That is just there for the aid of those of us actually working with the raw html. &nbsp;At runtime, Bloom removes any text that starts with &lsquo;{&lsquo;, leaving a blank field for the user to fill in.</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>If any other value appears in the lang attribute, it will be used as-is. So your front-matter can contain fixed-language fields, e.g.</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>&lt;div lang=&rsquo;en&rsquo;&gt;This &nbsp;will always be in English&lt;/div&gt;</span></p><p class="c0 c1"><span></span></p><h5 class="c0"><a name="h.5bowdsbye6n5"></a><span>Controlling edit-ability with the </span><span class="c3">readOnlyInTranslationMode class</span></h5><p class="c0 c1"><span></span></p><p class="c0"><span>As we mentioned at the beginning of this section, front matter has to be smart enough to make some fields editable in some scenarios, but locked in others. &nbsp;Do that by adding the </span><span class="c3">readOnlyInTranslationMode </span><span>class:</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>&lt;textarea data-book=&quot;topic&quot; lang=&quot;N2&quot; &nbsp;</span><span class="c8">class=&quot;readOnlyInTranslationMode &quot;</span><span>&gt;{Topic in N2}&lt;/textarea&gt;</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>Here, we want people making original books to set the topic, but then not allow others to modify it.</span><span class="c10">&nbsp;[TODO: the internationalization system will automatically translate common topics into the user&rsquo;s national language]</span></p><p class="c0 c1"><span></span></p><h5 class="c0"><a name="h.k1ekpyxz2aki"></a><span>Adding Bubbles with the data-hint attribute</span></h5><p class="c0 c1"><span></span></p><p class="c0"><span>You can label fields (in XMatter or anywhere else) using the &ldquo;data-hint&rdquo; attribute:</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>&lt;textarea </span><span>data-book=&quot;bookTitle&quot; </span><span class="c8">data-hint=&quot;Book title in your language&quot; </span><span>class=&quot;vernacularBookTitle coverColor&quot; </span><span>lang=&quot;V&quot;</span><span>&gt;{Title in Vernacular}&lt;/textarea&gt;</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>This shows a bubble like this:</span></p><p class="c0 c1"><span></span></p><p class="c0"><img height="150" src="images/image01.png" width="673"></p><p class="c0 c1"><span></span></p><h5 class="c0"><a name="h.v23mpqmu3x96"></a><span>Adding a label to the page using a DIV.pageLabel</span></h5><p class="c0 c1"><span></span></p><p class="c0"><span>It can help the user know &ldquo;where am I?&rdquo; to add a page label like the blue &ldquo;Verso Page&rdquo; shown here:</span></p><p class="c0 c1"><span></span></p><p class="c0"><img height="153" src="images/image00.png" width="526"></p><p class="c0 c1"><span></span></p><p class="c0"><span>Do this by adding a div like this:</span></p><p class="c0"><span>&lt;div class=&quot;pageLabel&quot; lang=&quot;en&quot;&gt;Title Page&lt;/div&gt;</span></p><p class="c0 c1"><span></span></p><p class="c0 c1"><span></span></p><h1 class="c0"><a name="h.ca9lzl5bgiu6"></a><span>Appendix: The Stylesheet System</span></h1><p class="c0"><span class="c10">[TODO]</span></p><p class="c0"><span>base.css</span></p><p class="c0"><span>previewMode.css</span></p><p class="c0"><span>editMode.css</span></p><p class="c0"><span>editTranslationMode.css</span></p><p class="c0"><span>editOriginal.css</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>FrontMatter stylesheets (</span><span class="c9"><a class="c5" href="#id.7kgmyvi9a01m">see the xmatter section</a></span><span>&nbsp;above).</span></p><h4 class="c0"><span>Paper &amp; orientation stylesheets</span></h4><p class="c0"><span>These should be named according to this pattern: &nbsp;&lt;papersize&gt;&lt;orientation&gt;&lt;customName&gt;.css. E.g. a5portrait.css, a4LandscapeIndonesia.css. Bloom actually looks at the name to figure some things out when making a PDF.</span></p><p class="c0"><span>Note: when a new book is created, each of these pages is copied in to the folder with the book, so that if it is moved to a computer which doesn&#39;t have bloom, it will be still viewable. &nbsp;However, each time the book is opened, Bloom will replace the stylesheets in that folder with the versions in the Bloom program directory. &nbsp;So if you&#39;re working on one of the standard stylesheets, be careful to not let Bloom over-write your work.</span></p><p class="c0 c1"><span></span></p><h4 class="c0"><a name="h.ilchg6khyf9y"></a><span>Template-specific Stylesheets</span></h4><p class="c0"><span>Some documents will need their own stylesheets. Examples include primers, calendars, and study guides.</span></p><p class="c0"><span>Simply create a new CSS stylesheet and link the shell to it (this is something you&#39;d do outside of bloom).</span></p><p class="c0 c1"><span></span></p><h1 class="c0"><a name="h.b9a6hvjygla2"></a><span>A</span><span>ppendix: Practical Suggestions</span></h1><h3 class="c0"><a name="h.5nsr0b49b0eu"></a><span>Making Custom StyleSheets</span></h3><p class="c0 c1"><span class="c10"></span></p><p class="c0"><span>I (John) do most of my style-sheet writing using Stylizer. Download and install Stylizer from </span><span class="c9"><a class="c5" href="http://www.skybound.ca">http://www.skybound.ca</a></span><span>&nbsp;. &nbsp;Make sure you watch the introductory video. &nbsp;Once a stylesheet is called for by your page, you can open the page in Stylizer and mess with it.</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>In order to make sure you&rsquo;re editing </span><span class="c3">the correct copy of the stylesheet</span><span>, don&rsquo;t open the document from file system. This will cause you to be editing the local copies of the stylesheets which Bloom saves with the document. &nbsp;And your work will get lost and you will get frustrated.</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>Instead, go into Bloom, go to the page in question, and right-click on it. &nbsp;Choose &ldquo;file properties&rdquo; to get at the path to the temp file. Copy that, and paste it into Stylizer. That way, you&rsquo;ll be editing the actual, source version of the stylesheets.</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>Now, a few things to not miss in Stylizer:</span></p><h4 class="c0"><a name="h.265vk8yv7gxd"></a><span>Bullseye</span></h4><p class="c0"><span>Find the &ldquo;Bullseye&rdquo; feature, and learn to use it to identify which rules target the element in question. Learn to add a new rule by selecting tags at the bottom of the screen and clicking &ldquo;Make Rule&rdquo;.</span></p><h4 class="c0"><a name="h.i6h248papett"></a><span>Placement-offset</span></h4><p class="c0"><span>Learn to use the &ldquo;+placement-offset&rdquo; feature to simply drag the selected item around the screen, WYSYWYG-style.</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>Warning: Stylizer makes it easy to accidentally modify one of the </span><span class="c3">other</span><span>&nbsp;stylesheets referenced by the document. &nbsp;Take care to only edit the one you think you&rsquo;re editing. If you look up and notice a * next to one of the others, it means you accidentally modified them, and should do a &ldquo;reload&rdquo; on it.</span></p><h2 class="c0"><a name="h.ahqm6eiic2pt"></a><span>Investigating with firebug</span></h2><p class="c0"><span>Firfox+Firebug is a terrific way to see exactly </span><span class="c3">why </span><span>bloom is showing what its showing.</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>1) First, install the firebug extension into firefox. &nbsp;It might make sense to have the same version of firefox as Bloom is using. &nbsp;Make Firefox your default browser.</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>2) Go to the page where something isn&rsquo;t looking like you expect. Right click and choose &ldquo;Open in System Browser...&rdquo;.</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>3) Enable firebug.</span></p><p class="c0 c1"><span></span></p><p class="c0"><span>4) Using firebug, you can now look at the html, the css, even the javascript. &nbsp;You can select an element on screen and see what styles were applied, from what files, and which ones (to your surprise and dismay) were overridden.</span></p><h1 class="c0"><a name="h.g33ywd1gu2lx"></a><span>Appendix: &lt;meta&gt; elements</span></h1><h2 class="c0"><a name="h.3drltme5p0ok"></a><span>PDF Booklet Style</span></h2><h5 class="c0"><a name="h.6uvz28n98ont"></a><span>&lt;meta id=&quot;defaultBookletLayout&quot; &nbsp;content=&rdquo;Calendar&rdquo;&gt;</span></h5><p class="c0"><span>Bloom&#39;s &quot;Publish&quot; tab has PdfDroplet built-in. It can (theoretically) make any booklet format that PdfDroplet can. While future versions of Bloom will let users chose the format, in at least one case we know already what the format needs to be. That case is Wall Calendar, which knows that it must be printed as a Calendar Booklet.</span></p><p class="c0"><span class="c10">REVIEW: it&#39;s not clear if we want to say:</span></p><ol class="c6" start="1"><li class="c2 c0 c7"><span class="c10">this is the default, but whatever</span></li><li class="c2 c0 c7"><span class="c10">this is the only layout which makes sense (one, or multiple)</span></li></ol><p class="c0"><span>&nbsp; &nbsp; &nbsp; &nbsp;&lt;meta id=&quot;defaultBookletLayout&quot; content=&quot;Calendar&quot;/&gt;</span></p><h2 class="c0"><a name="h.2j6i8ccehk16"></a><span>Editability</span></h2><h5 class="c0"><a name="h.8d2e5utjjjhp"></a><span>&lt;meta id=&quot;editability&quot; content=&quot;open|translationOnly&quot; /&gt;</span></h5><p class="c0"><span>When the user create a copy of a shell for translating, Bloom doesn&#39;t let them change certain things (e.g. the images). The value of &quot;translationOnly&quot; in the content of the &quot;editabilitity&quot; meta tag is used to track that this book was created from a shell.</span></p><p class="c0"><span>&lt;meta id=&quot;editability&quot; content=&quot;open|translationOnly&quot; /&gt;</span></p><p class="c0"><span>If the current project is marked for making shellbooks, this is ignored and everything is editable.</span></p><h2 class="c0"><a name="h.h2r62rb8esoz"></a><span>Template List Visibility</span></h2><p class="c0"><span>In some documents (e.g. calendar), you may want to keep things simple by hiding the list of template pages during editing. &nbsp;To do that, add the following to the header of the shell:</span></p><p class="c0"><span>&nbsp; &nbsp; &lt;meta id=&quot;normallyShowTemplatePages&quot; content=&quot;false&quot; /&gt; &nbsp; &nbsp;</span></p><h1 class="c0"><a name="h.uqvun257a526"></a><span class="c17">Appendix: </span><span>Built-in Classes</span></h1><ol class="c6" start="1"><li class="c2 c0 c7"><span>-bloom-page: Each page is indicated by a &lt;div&gt; which has this class.</span></li><li class="c2 c0 c7"><span>-bloom-frontMatter: indicates this page came from an xmatter pack, and will be replaced if a different xmatter pack is chosen</span></li><li class="c2 c0 c7"><span>-bloom-translationGroup</span></li><li class="c2 c0 c7"><span>-bloom-dataDiv: non-displayable place to store variables which are later used to populate front matter pages.</span></li></ol><h1 class="c0"><a name="h.zifipnd0fhln"></a><span>Appendix: data-* Attributes</span></h1><ol class="c6" start="5"><li class="c2 c0 c7"><span>data-hint: used for speech-bubbles</span></li><li class="c2 c0 c7"><span>data-book: values which are consistent throughout the book (e.g. bookTitle)</span></li><li class="c2 c0 c7"><span>data-library: variables which are the same throughout all books in the entire library (e.g. province, district).</span></li><li class="c2 c0 c7"><span>data-page: hints for limiting what the user can do with the page.</span></li></ol><ol class="c4" start="1"><li class="c0 c7 c11"><span>singleton: Only a single copy of this page may be added to a book.</span></li><li class="c0 c7 c11"><span>required: Page with this tag are always added to a new book, and the user is not allowed to remove them.</span></li><li class="c0 c7 c11"><span class="c10">[TODO: add immovable]</span></li><li class="c0 c7 c11"><span>extra: When a book is created, any pages marked with this class will not be initially added to the new book. If the user wants one of these pages, he has to add it explicitly (by clicking on its icon in the list of template pages).</span></li></ol><p class="c0 c11"><span>For example, the cover of a book would have a div like this:</span></p><p class="c0 c11"><span>&lt;div class=&quot;-bloom-page cover coverColor&quot; </span><span class="c8">data-page=&quot;required singleton&quot;</span><span>&gt;</span></p><p class="c0 c1"><span></span></p><h1 class="c0"><a name="h.7uz7gskgx3dr"></a><span>Appendix: Important Styles</span></h1><ol class="c6" start="9"><li class="c2 c0 c7"><span>numberedPage: (not actually know to the code, therefore not a &quot;-bloom&quot; one). Pages that should be part of the page numbering; i.e. all pages except front matter</span></li></ol><p class="c0 c1"><span></span></p><h1 class="c0"><a name="h.dv2yeb1a58i6"></a><span>Appendix: Lineage</span></h1><p class="c0"><span class="c10">[This area is especially immature]</span></p><p class="c0"><span>While Bloom doesn&#39;t yet provide it, we may someday need the ability to update all the pages stemming from a certain template page. For example, an entity might change their standard title page format, and they might like to have a way of updating the existing books that were using the old format. To make that possible in the future, we need to store the lineage now. We&#39;re doing this by using HTML 5&#39;s new &quot;data-*&quot; attributes. Here&#39;s how it works at the moment:</span></p><p class="c0"><span>&nbsp; &nbsp;&lt;div class=&quot;-bloom-page numberedPage imageOnTop&quot; <br> &nbsp; &nbsp;id=&quot;c320c12c-f81d-4071-86b1-70396d48048d&quot; <br> &nbsp; &nbsp;data-pageLineage=&quot;5dcd48df-e9ab-4a07-afd4-6a24d0398382;a3ddc7f4-eef5-453b-babf-76ec86d0eacb&quot;&gt;<br></span></p><p class="c0"><span>Notice that the value has 2 guids (Globally Unique Identifiers), separated by a semicolon. This tells us that this page came from a page with the id a3ddc7f4-eef5-453b-babf-76ec86d0eacb, which in turn came from a page with the id 5dcd48df-e9ab-4a07-afd4-6a24d0398382.</span></p><p class="c0 c1"><span></span></p><h1 class="c0"><a name="h.2l351xljrigj"></a><span>Appendix: The JavaScript System</span></h1><p class="c0"><span>Currently, all jscript resides in root/bloomEditing.js. It makes heavy use of jquery. &nbsp;The Wall Calendar project also has its own javascript, in the folder with the other files.</span></p><h2 class="c0"><a name="h.95ftgfzegmtk"></a><span>Mailing List</span></h2><p class="c0"><span>Have more questions? We have a special</span><span><a class="c5" href="https://groups.google.com/group/bloom-file">&nbsp;</a></span><span class="c9"><a class="c5" href="https://groups.google.com/group/bloom-file">mailing list</a></span><span>&nbsp;for discussing the Bloom format.</span></p><p class="c0 c1"><span></span></p><p class="c0 c1"><span></span></p><p class="c0 c1"><span></span></p><p class="c0 c1"><span></span></p></body></html>