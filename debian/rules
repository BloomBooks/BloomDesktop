#!/usr/bin/make -f
# -*- makefile -*-

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

export MONO_PREFIX = /opt/mono5-sil
export BUILD = Release

PACKAGE = bloom-desktop-beta
DESTDIR = debian/$(PACKAGE)
LIB     = usr/lib/$(PACKAGE)
SHARE   = usr/share/$(PACKAGE)

# NOTE: make the third (and fourth?) number match changelog if you are
# building the package manually.
FULL_BUILD_NUMBER ?= 0.0.0.0

%:
	dh $@ --with=cli --parallel

override_dh_auto_configure:

override_dh_auto_build:
	build/getDependencies-Linux.sh
	# This seems to be the only reliable way to get the version of nodejs/npm that we need.
	# Note that Node dropped 32-bit support in version 10, so downloads would fail, killing the build.
	if [ "`uname -m`" != "x_86_64" ]; then exit 0; fi
	wget https://nodejs.org/dist/v12.14.0/node-v12.14.0-linux-x64.tar.xz && \
	tar xf node-v12.14.0-linux-x64.tar.xz && \
	export PATH="`pwd`/node-v12.14.0-linux-x64/bin:$$PATH" && \
	export NODE_OPTIONS=--max-old-space-size=1024 && \
	export HOME=/tmp && \
	npm install --no-save yarn && \
	export PATH="`pwd`/node_modules/.bin:$$PATH" && \
	. ./environ && \
	if [ -f ./build_number.env ]; then . ./build_number.env; else FULL_BUILD_NUMBER=0.0.0.0; fi && \
	xbuild /t:RestoreBuildTasks /p:BUILD_NUMBER=$$FULL_BUILD_NUMBER build/Bloom.proj && \
	xbuild /t:SetAssemblyVersion /p:RootDir=$(shell pwd) /p:BUILD_NUMBER=$$FULL_BUILD_NUMBER build/Bloom.proj && \
	xbuild /p:Configuration=$(BUILD) /p:BUILD_NUMBER=$$FULL_BUILD_NUMBER "Bloom.sln" && \
	xbuild /p:Configuration=$(BUILD) /p:BUILD_NUMBER=$$FULL_BUILD_NUMBER src/LinuxBloomLauncher/LinuxBloomLauncher.cproj

override_dh_auto_test:

override_dh_auto_clean:
	. ./environ && xbuild /p:Configuration=$(BUILD) "Bloom.sln" /t:Clean
	dh_clean

override_dh_auto_install:
	# Install library files
	install -d $(DESTDIR)/$(LIB)
	cp -rv output/$(BUILD)/* $(DESTDIR)/$(LIB)
	find $(DESTDIR)/$(LIB) -type f -print0 | xargs -0 chmod 644
	chmod +x $(DESTDIR)/$(LIB)/BloomLauncher
	find $(DESTDIR)/$(LIB) -type d -print0 | xargs -0 chmod 755
	install -d $(DESTDIR)/$(SHARE)
	install -m 644 environ* $(DESTDIR)/$(SHARE)
	# Install data files
	cp -r DistFiles/* $(DESTDIR)/$(LIB)
	chmod -R a+rX,og-w $(DESTDIR)/$(LIB)
	# Install browser support files
	cp -r output/browser $(DESTDIR)/$(LIB)
	chmod -R a+rX,og-w $(DESTDIR)/$(LIB)/browser
	# Remove unwanted files
	cd $(DESTDIR)/$(LIB) && rm -rf AxInterop* BloomTests* Interop* Moq* nunit* AndikaNewBasic ffmpeg ghostscript
	find $(DESTDIR)/$(LIB) -name '*.map' -print0 | xargs -0 rm -f
	find $(DESTDIR)/$(LIB) -name '*Spec.js' -print0 | xargs -0 rm -f
	find $(DESTDIR)/$(LIB) -name 'CheckOrFixXliff.*' -print0 | xargs -0 rm -f
	find $(DESTDIR)/$(LIB) -name 'GeckofxHtmlToPdf.*' -print0 | xargs -0 rm -f
	# Install wrapper script
	install -d $(DESTDIR)/usr/bin
	install debian/bloom-beta $(DESTDIR)/usr/bin
	# Add to Applications menu
	install -d $(DESTDIR)/usr/share/pixmaps
	install -m 644 debian/bloom.png $(DESTDIR)/usr/share/pixmaps/bloom-beta.png
	install -m 644 debian/bloom.svg $(DESTDIR)/usr/share/pixmaps/bloom-beta.svg
	install -d $(DESTDIR)/usr/share/applications
	desktop-file-install --dir $(DESTDIR)/usr/share/applications debian/bloom-beta.desktop
	# Install icon for our mime type so that it shows up as icon for a bloompack
	# NOTE: mime type installation is handled by dh_installmime
	install -d $(DESTDIR)/usr/share/icons/hicolor/48x48/mimetypes/
	install -m 644 debian/BloomPack.png $(DESTDIR)/usr/share/icons/hicolor/48x48/mimetypes/application-bloom.png
	install -d $(DESTDIR)/usr/share/icons/hicolor/scalable/mimetypes/
	install -m 644 debian/BloomPack.svg $(DESTDIR)/usr/share/icons/hicolor/scalable/mimetypes/application-bloom.svg
	# Add bloom-collection mime type
	install -m 644 debian/bloom-collection.png $(DESTDIR)/usr/share/icons/hicolor/48x48/mimetypes/application-bloom-collection.png
	install -m 644 debian/bloom-collection.svg $(DESTDIR)/usr/share/icons/hicolor/scalable/mimetypes/application-bloom-collection.svg
	# Add AppStream metadata file
	install -d $(DESTDIR)/usr/share/metainfo
	install -m 644 debian/bloom-beta.appdata.xml $(DESTDIR)/usr/share/metainfo

# Don't export any assemblies to other packages
override_dh_makeclilibs:

# Include mono5-sil in shlib dirs searched
override_dh_shlibdeps:
	dh_shlibdeps -l$(MONO_PREFIX)/lib --exclude=Firefox

# Include mono5-sil in cli dirs searched
# Trying to process connections.dll now crashes on jenkins instead of merely complaining.
# The -X (--exclude) option doesn't seem to work for dh_clideps to skip connections.dll.
override_dh_clideps:
	mv DistFiles/connections.dll DistFiles/connections.delel && \
	mv $(DESTDIR)/$(LIB)/connections.dll $(DESTDIR)/$(LIB)/connections.delel && \
	mkdir -p debian/tmp/usr && ln -s $(MONO_PREFIX)/* debian/tmp/usr/ && \
	PATH=$(MONO_PREFIX)/bin:$(PATH) \
	dh_clideps internal-mono -l$(MONO_PREFIX)/lib \
		--exclude-moduleref=Crypt32.dll --exclude-moduleref=libdconf.dll \
		--exclude-moduleref=xul --exclude-moduleref=mozglue --exclude-moduleref=libgeckofix.so \
		--exclude-moduleref=icuuc55.dll --exclude-moduleref=icuin55.dll \
		--exclude-moduleref=icuuc52.dll --exclude-moduleref=icuin52.dll \
		--exclude-moduleref=icuuc48.dll --exclude-moduleref=icuin48.dll \
		--exclude-moduleref=libtidy.dll --exclude-moduleref=msdelta.dll \
		--exclude-moduleref=mspatcha.dll --exclude-moduleref=mspatchc.dll \
		--exclude-moduleref=libdl.so --exclude-moduleref=ntdll \
		--exclude-moduleref=MAPI32.DLL --exclude-moduleref=__Internal \
		--exclude-moduleref=ole32.dll --exclude-moduleref=version.dll && \
	rm -rf debian/tmp/usr && \
	mv DistFiles/connections.delel DistFiles/connections.dll && \
	mv $(DESTDIR)/$(LIB)/connections.delel $(DESTDIR)/$(LIB)/connections.dll

# Don't strip debug symbols -- we want them for informative crash stack traces
override_dh_strip:

override_dh_clistrip:
