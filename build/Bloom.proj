<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<PropertyGroup>
		<RootDir>$(teamcity_build_checkoutDir)</RootDir>
		<Solution>Bloom VS2010.sln</Solution>
		<ApplicationName>Bloom</ApplicationName>
		<Configuration>Release</Configuration>
	</PropertyGroup>

	<UsingTask TaskName="StampAssemblies" AssemblyFile="$(RootDir)/build/Palaso.BuildTasks.dll" />
	<UsingTask TaskName="MakeWixForDirTree" AssemblyFile="$(RootDir)/build/Palaso.BuildTasks.dll" />
	<UsingTask TaskName="Split" AssemblyFile="$(RootDir)/build/Palaso.BuildTasks.dll" />
	<UsingTask TaskName="FileUpdate" AssemblyFile="$(RootDir)/build/Palaso.BuildTasks.dll" />
	<UsingTask TaskName="NUnitTeamCity" AssemblyFile="$(teamcity_dotnet_nunitlauncher_msbuild_task)" Condition="'$(OS)'=='Windows_NT'"/>
	<Import Project="$(MSBuildExtensionsPath)\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets" Condition="'$(OS)'=='Windows_NT'"/>
	<Import Project=".\Snowcode.S3BuildPublisher.Tasks.Targets"  Condition="'$(OS)'=='Windows_NT'"/>
	<UsingTask AssemblyFile="C:\Program Files (x86)\MSBuild\MSBuildCommunityTasks\MSBuild.Community.Tasks.dll"
		TaskName="MsBuild.Community.Tasks.WebDownload" Condition="'$(OS)'=='Windows_NT'"/>

  <PropertyGroup>
	<AccessKey>AKIAJ24BTPKNQCTQ3WQQ</AccessKey> <!-- This is for JohnThomson, a user who can upload to our libraries; override with /p:AccessKey=; used by ConfigureS3 target-->
	<Secret></Secret> <!-- Secret access key for use in $(AccessKey) Must override with /p:Secret=; used by ConfigureS3 target-->
	<Key>Dev</Key>  <!-- Which set of keys to use; May override with /p:Key=; used by all S3 upload targets. Must configure with this key before using other targets.-->
	<Bucket>bloomlibrary.org</Bucket> <!-- Which bucket to target; May override with /p:Bucket=; used by all targets. User identified by access key must have write permission.-->
  </PropertyGroup>

  <Target Name="VersionNumbers">
	<Message Text="BUILD_NUMBER: $(BUILD_NUMBER)" Importance="high"/>

	<Split Input="$(BUILD_NUMBER)" Delimiter="." OutputSubString="2">
	  <Output TaskParameter="ReturnValue" PropertyName="BuildCounter" />
	</Split>
	<Split Input="$(BUILD_NUMBER)" Delimiter="." OutputSubString="3">
	  <Output TaskParameter="ReturnValue" PropertyName="BuildHash" />
	</Split>

	<Message Text="BuildCounter: $(BuildCounter)" Importance="high"/>
	<Message Text="BuildHash: $(BuildHash)" Importance="high"/>

	<!-- Note, after some thought, we've decided this is the best place to keep the version number (not on TeamCity, not in the assemblies).     -->
	<CreateProperty Value="3.0.$(BuildCounter)">
	  <Output PropertyName="Version" TaskParameter="Value"/>
	</CreateProperty>
	<CreateProperty Value="$(Version).$(BuildHash)">
	  <Output PropertyName="FullVersion" TaskParameter="Value"/>
	</CreateProperty>
	<CreateProperty Value="BloomInstaller.$(Version).$(Label).msi">
	  <Output PropertyName="InstallerFileName" TaskParameter="Value"/>
	</CreateProperty>
	<Message Text="Version: $(Version)" Importance="high"/>
	<Message Text="FullVersion: $(FullVersion)" Importance="high"/>
  </Target>

  <Target Name="SetAssemblyVersion" DependsOnTargets="VersionNumbers">
	<ItemGroup>
	  <AssemblyInfoFiles Include="$(RootDir)/src/**/AssemblyInfo.cs"/>
	</ItemGroup>
	<StampAssemblies Version="$(Version)" InputAssemblyPaths="@(AssemblyInfoFiles)" />
  </Target>

  <Target Name="Build" DependsOnTargets="SetAssemblyVersion">

	<MSBuild Projects="$(RootDir)/$(Solution)"
			 Targets="Rebuild"
			 Properties="Configuration=$(Configuration)" />
  </Target>


	<Target Name="Test" DependsOnTargets="Build; DownloadDistFilesNeedForTests;">
		<CreateItem Include="$(RootDir)/output/$(Configuration)/*Tests.dll">
			<Output ItemName="TestAssemblies" TaskParameter="Include" />
		</CreateItem>
		<NUnitTeamCity
			Assemblies="@(TestAssemblies)"
			ExcludeCategory="SkipOnTeamCity"
			NUnitVersion="NUnit-2.5.5" />
	</Target>

  <Target Name="MakeDownloadPointers" DependsOnTargets="VersionNumbers" >
	<!-- USES THESE PROPERTIES: Label, Version, BuildConfigurationID -->


	<!-- 1) we customize and upload a version of DownloadPointers, named after our Label (RELEASE or BETA), and upload it.
			That file is then iframe'd in to a download page somewhere.

		 2) we customize and just save a version of appcast.xml, which is used by our crude in-app downloader/updater
	-->

	<!-- copy it so we aren't modifying the original, which then is a pain on dev machines -->
	<Copy SourceFiles ="$(RootDir)\src\Installer\DownloadPointers.htm"
		   DestinationFolder ="$(RootDir)\output\installer"/>

	<!-- replace some parts of the file with the version number & date -->

	  <FileUpdate File="$(RootDir)\output\installer\DownloadPointers.htm"
				 DatePlaceholder='RELEASE_DATE'
				Regex='CHANNEL_LABEL'
				 ReplacementText ="$(Label)" />

	 <FileUpdate File="$(RootDir)\output\installer\DownloadPointers.htm"
				 DatePlaceholder='RELEASE_DATE'
				Regex='VERSION_NUMBER'
				 ReplacementText ="$(Version)" />


	<!--- also copy this appcast.xml file, which is used by the in-app update downloader -->
	<Copy SourceFiles ="$(RootDir)\src\Installer\appcast.xml"
		   DestinationFolder ="$(RootDir)\output\installer"/>

	<!-- In TeamCity, this appcast.xml file needs to be listed in the General Settings:Artifact paths, so that it can be retrieved using http://build.palaso.org/guestAuth/repository/download/bt___/.lastSuccessful/appcast.xml   (note the bt___ part is fragile, it's dependent on the actual project in TeamCity,
		but I haven't seen how to get at that value programmatically. TC docs just tell you to look at the URL in the browser :-/  Our new VersionUpgradeTable approach (see below) lets us get arround this if we need to change to a new configuration id).
	-->

	<!-- Note: The issue of channels is worked out yet. For one thing, this current approach doesn't have some common appcast.xml that multiple TeamCity configurations can be updating.
			Instead, each configuration is maintaining its own appcast.xml, and the installers that came from a config only know to check that one config. So RELEASE versions only
			find out about new RELEASE versions from the same configuration, not about betas, not about new Releases from some new configuration.

		For another, a strict "Channel" approach is overly simplistic; you don't actually want to be stuck with a beta if a release just came out. What we'd want is more of a "tolerance"
		approach where you take the latest beta unless there's a newer release on the same version track, (but not on some previous version).

		Update: Bloom now has a way of us controlling the "channel": At runtime, Bloom tries to retrieves "VersionUpgradeTable.txt"
		from a fixed URL. It looks up its current version and the table tells it which appcast to download.

		In this way, we can control the upgrade path for users of old versions. We can, for example, move beta users to
		a release version. For more information, see the class UpdateVersionTable. If you don't find it in Bloom, it may
		have been moved to github.com/hatton/NetSparkle so that other apps can use it.

		-->

	<FileUpdate File="$(RootDir)\output\installer\appcast.xml"
				 DatePlaceholder='VERSION_NUMBER'
				Regex='VERSION_NUMBER'
				 ReplacementText ="$(Version)" />
		<FileUpdate File="$(RootDir)\output\installer\appcast.xml"
				 DatePlaceholder='VERSION_NUMBER'
				Regex='TEAMCITY_CONFIGURATION'
				 ReplacementText ="$(BuildConfigurationID)" />
	<!--<FileUpdate File="$(RootDir)\output\installer\appcast.xml"
				   DatePlaceholder='DEV_RELEASE_DATE'
				  Regex='DEV_VERSION_NUMBER'
				   ReplacementText ="$(Version)" />-->

	<!-- push up to the web so that on our downloads page, we can give a link to the latest version -->

	<Message Text="Attempting rsync of DownloadPointers_$(Label).htm" Importance="high"/>

	<!-- Note, this copy appends the "Label" build property to the name of downloadpointers, so we have, for example, downloadpointers_release.htm & downloadpointers_beta.htm.
		It is up to the target web site to include or not include the beta. E.g., after you release, there is normally a period of time before the next beta.
	We have to make this copy because the S3BuildPublisher task does not support renaming.
	-->
	<Copy SourceFiles="../output/installer/DownloadPointers.htm"  DestinationFiles="../output/installer/DownloadPointers_$(Label).htm"/>
	<S3BuildPublisher
	  EncryptionContainerName ="$(Key)"
	  SourceFiles="../output/installer/DownloadPointers_$(Label).htm"
	  DestinationBucket="$(Bucket)"
	  DestinationFolder="channels"
	  PublicRead="true" />
  </Target>



  <Target Name="Upload" DependsOnTargets="VersionNumbers; Installer" >
	<Message Text="Attempting rsync of $(InstallerFileName)" Importance="high"/>

	<!--Kludge, but S3BuildPublisher needs this file in the build folder-->
	<Copy SourceFiles="../output/$(Configuration)/AWSSDK.dll"  DestinationFiles="./AWSSDK.dll"/>

	<S3BuildPublisher
	EncryptionContainerName ="$(Key)"
	SourceFiles="../output/installer/$(InstallerFileName)"
	DestinationBucket="$(Bucket)"
	DestinationFolder="installers"
	PublicRead="true" />

	<CallTarget Targets ='MakeDownloadPointers'/>
  </Target>


  <Target Name="Installer" DependsOnTargets="VersionNumbers; MakeWixForDistFiles; MakeWixForXulRunner; Build ">


	<!-- set the version number in the installer configuration program.  Perhaps there's a way to just send in the variables rather than this brute-force
		changing of the script, but I haven't figured that out. -->

	<FileUpdate File="$(RootDir)\src\Installer\Installer.wxs" Regex='Property_ProductVersion = ".*"'
				ReplacementText ="Property_ProductVersion = &quot;$(Version)&quot;" />


	<Message Text="Making Installer Version: $(Version)" Importance="high"  />

	<MSBuild Projects="$(RootDir)\src\Installer\Installer.wixproj"/>

	<!-- remove an existing one with the same name, if necessary -->
	<Delete Files="$(RootDir)\output\installer\$(InstallerFileName)" TreatErrorsAsWarnings="false" />
	<Exec Command='sign "$(RootDir)\output\installer\BloomInstaller.msi"'></Exec>

	<Copy SourceFiles="$(RootDir)\output\installer\BloomInstaller.msi"
		  DestinationFiles="$(RootDir)\output\installer\$(InstallerFileName)"
		  />

	<!-- remove the installer which has no version number (wouldn't need this if the copy above was a move, instead) -->
	<Delete Files="$(RootDir)\output\installer\BloomInstaller.msi" TreatErrorsAsWarnings="false" />

  </Target>


  <Target Name="MakeWixForDistFiles" DependsOnTargets="DownloadDistFiles">
	<MakeDir Directories ="$(RootDir)\output\installer" ContinueOnError ="true"/>

	<MakeWixForDirTree
				DirectoryReferenceId="ProgramDir"
					ComponentGroupId="DistFiles"
						RootDirectory="$(RootDir)\DistFiles"
				OutputFilePath="$(RootDir)\output\installer\GeneratedDistFiles.wxs"
				MatchRegExPattern=".*"
				>
	  <!--what does this do?-->
	  <Output TaskParameter="OutputFilePath" ItemName="Compile" />
	</MakeWixForDirTree>

	<!--Gather up all the javascript, css, png, etc. files under src/BrowserUI -->
	<MakeWixForDirTree
			   DirectoryReferenceId="BrowserUIDir"
			   ComponentGroupId="BrowserUIFiles"
			   RootDirectory="$(RootDir)\src\BloomBrowserUI"
			   OutputFilePath="$(RootDir)\output\installer\GeneratedBrowserUIFiles.wxs"
			   IgnoreRegExPattern=".*csproj.*|obj|Properties|.*test.*|_Chutzpah.*"
			   MatchRegExPattern=".*"
				>
	</MakeWixForDirTree>

  </Target>

	<Target Name="DownloadDistFilesNeedForTests">
	</Target>

	<Target Name="DownloadDistFiles">
		<Message Text="Downloading Bloom.chm help file" Importance="high"  />
		<!-- NB: some configurations on TeamCity may also get a version of this from
		the static dependencies configuration, for use with getDependencies.sh.
		These are not necessarily redundant, since the static dependencies configuration
		does not know when a new version of the help file is available, so it can get stale,
		which is fine for developers, but not for our official builds.

		Note, the original name for this on Dropbox may differ (e.g. "Bloom2.1.chm") but we
		are renaming it here to just Bloom.chm.
		-->
		<WebDownload FileUri="https://www.dropbox.com/s/4mgbc5xhmhndia2/Bloom3.chm?dl=1" FileName="$(RootDir)\DistFiles\Bloom.chm"></WebDownload>
	</Target>

  <Target Name="MakeWixForXulRunner" >
	<MakeWixForDirTree
				DirectoryReferenceId="XulRunnerDir"
					ComponentGroupId="XulRunner"
						RootDirectory="..\lib\xulrunner"
				OutputFilePath="..\output\installer\GeneratedXulRunner.wxs"
				MatchRegExPattern=".*"
				>
	  <!--what does this do?-->
	  <Output TaskParameter="OutputFilePath" ItemName="Compile" />
	</MakeWixForDirTree>
  </Target>
</Project>
