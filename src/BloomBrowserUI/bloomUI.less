/* Common Bloom UI styling */
// This import needs to NOT be by "(reference)", since the UIFontStack variable we need is not a constant.
// That also means that if you want this bloomUI file to govern the font-family of your Less that
// imports this file, it should do a normal full import of bloomUI.less.
@import "./bloomWebFonts.less";

// Working towards making this the source of truth for the font size we use in our UI.
// Currently all the toolbox panes have default font 11px based on a rule in jqueryui that applies
// to everything in accordion panels.
// there are probably other sources of ui font size.
@ui-font-size: 10pt;

@dragHandleVisibleZIndex: @bubbleCanvasZIndex - 1;

// This name is almost obsolete, we do NOT want bloom-imageContainer to have a z-index,
// since that makes it a stacking context, and then we can't get child buttons to
// be above the comicaljs canvas. However, I'm keeping it because it is a basis for
// several things we want to be above image containers, and also used for videos and
// widgets.
@baseZIndexForContainers: 1000;

// needs to be above overlay images so tails can cross into them
@bubbleCanvasZIndex: @baseZIndexForContainers + 1;

// Above the canvas so they can be clicked
@imageEditingButtonZIndex: @bubbleCanvasZIndex + 5;
// And these are on top of those main buttons
@miniImageEditingButtonZIndex: @imageEditingButtonZIndex + 1;

// Text in bubbles needs to be above the bubble so we can see and edit it.
@textOverPictureZIndex: @bubbleCanvasZIndex + 1;
@formatButtonZIndex: @textOverPictureZIndex + 1;
@dragHandleEventZIndex: @textOverPictureZIndex + 1;
@resizeHandleEventZIndex: @textOverPictureZIndex + 1; // Not directly referenced via .less, but conceptually used in bubbleManager.ts

// Bloom's web palette
@bloom-blue: #1d94a4; // used in decodable reader and various text backgrounds and Paste Image button
@bloom-lightblue: #b0dee4; // used in a few highlight and hover situations
@bloom-bluetransparent: #8ecad280; // BloomBlue50Transparent from Bloom MuiTheme
@bloom-yellow: #febf00;

@bloom-lightgray: lightgray;
@bloom-red: #d65649;
@bloom-gray: #575757; // used for disabled controls and EPub preview controls
@bloom-unselectedTabBackground: #404040;
@bloom-panelBackground: #2e2e2e; // #404040; // side panels; toolbox and page thumbs
@bloom-darkestBackground: #1a1a1a; // #363333; // used for borders and backgrounds... this is the darker main panel background
@bloom-buff: #d2d2d2; // used for various unrelated things like hovered/disabled controls, text on dark background, borders, etc.
@bloom-toolboxWhite: @bloom-buff;
@bloom-purple: #96668f;
@bloom-warning: #f3aa18;
@SliderRailMark: #a9a9a9;
@DisabledButtonColor: @bloom-gray;
@ControlColor: @bloom-purple;
@DialogTopBottomBar: #f1f3f4;
@WarningColor: #d65649;
@OrigamiActiveColor: #e48c84;
@PreviewCoverColor: #d8adad;
@LeveledReaderViolationColor: orange;
@DecodableReaderViolationColor: @bloom-lightblue;
// This is the color which jquery-ui-1.8.16.custom.css applies for ui-state-active, that is,
// the color of the background of the selected item in the toolbox accordion.
// Naming it here allows us to make various things match it.
@accordion-active-element: #59b4d4;
@form-background: #f0f0f0;
@bloom-solid-circle-badge-character: "\25cf";

@toolboxWidth: 200px;

body {
    font-family: @UIFontStack;
}
.react-tabs {
    margin: 20px;
}
.react-tabs__tab-list {
    margin-bottom: 0;
}
.react-tabs__tab {
    background-color: @bloom-lightgray;
    margin-right: 5px; // separate the tabs
}
.react-tabs__tab--selected {
    background-color: white;
    font-weight: bold;
}

.invisible {
    display: none !important;
}

// The following is enabled for development builds and alpha builds.
// Red on yellow background means the string has not been translated.
body.developer .untranslated,
body.alpha .untranslated {
    color: darkred;
    background-color: yellow;
}

// In l10n.tsx, the developer can flip a const (highlightTranslatedStrings) to true to highlight all translated strings
// (for the purpose of seeing if anything was missed)
body.highlightTranslatedStrings.developer .translated {
    color: green;
}
body.highlightTranslatedStrings.developer .assumedTranslated {
    color: lightgreen;
}

/* all of this worked in the latest firefox, but not Bloom.
    We may want it someday, as it sure seems clearer to put
    in a ? than the black box that FF normally uses, to mean
    indeterminate.

input[type="checkbox"]:indeterminate {
    background: white;
    -moz-appearance: none;
    appearance: none;
    outline: 0;
    height: 14px;
    width: 14px;
    border: 1px solid black;
}
input[type="checkbox"]:indeterminate::after {
    content: "?";
    position: absolute;
    top: -2px;
    left: 2px;
    font-family: sans;
    font-weight: bold;
    //color: gray;
}
*/

// Don't let uneditable text be selected (BL-6788/6897).
// See https://stackoverflow.com/questions/826782/how-to-disable-text-selection-highlighting.
// Note that this rule applies to basically everything EXCEPT the root
// HTML element and contenteditable elements (overridden below).
// We don't particularly want to excude the root HTML element, except that
// when the root html element is user-select: none in FF (45-70, at least) clicking
// directly on it selects all the contenteditable text on the page.
// https://issues.bloomlibrary.org/youtrack/issue/BL-7850.
// This is a bug in FF (https://bugzilla.mozilla.org/show_bug.cgi?id=1599871)
// and not making user-select:none is a workaround.
// This technically means that text directly in the root html element
// could be selected, because (if I read the rules right) the default equates
// to text for the <html> element. But we never put text directly in that
// element so any actual text will be in something else governed by one
// of the other rules.
// (I tried leaving this rule * and overriding with a rule for html,
// but it didn't prevent the bug in FF45, though it did in FF70.)
:not(html) {
    -moz-user-select: none; // Firefox
    -ms-user-select: none; // Edge/Internet Explorer
    user-select: none; // Chrome
}

input,
textarea,
[contenteditable="true"] *,
*[contenteditable="true"] {
    -moz-user-select: text; // Firefox
    -ms-user-select: text; // Edge/Internet Explorer
    user-select: text; // Chrome
}

// Moved from toolbox.less to here so it can be used by templatePagePreview
.enterprise-only-flag::after {
    content: @bloom-solid-circle-badge-character;
    cursor: default;
    color: @bloom-purple;
    font-size: 14px;
    position: absolute;
    top: -8px;
}

// The following two rules are for use by the react_components/UseDrawAttention hook.
// They make a UI element shake when the drawAttention class is added to a React element.
.drawAttention {
    animation: shakeMe 75ms 5 ease-in alternate;
}

@keyframes shakeMe {
    0% {
        margin-left: 10px;
    }

    100% {
        margin-left: 0;
    }
}
