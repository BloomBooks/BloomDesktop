/* A common stylesheet for Publish-Tab screens that have common elements of
having various sections, including settings and help on the right */

@import "../../bloomUI.less";
@screen-padding: 0;
@header-height: 40px;
@between-column-margin: 25px;

html.publishTabScreen {
    height: 100%;
    padding: 0;
    margin: 0; // Do NOT put margin; will cause scroll bar

    body {
        margin: 0; // Otherwise we get a scroll bar
        background-color: @form-background;
        font-family: @ui-fonts;
        font-size: @ui-font-size;
        height: 100%;

        header {
            img {
                vertical-align: middle;
            }

            .intro {
                margin-top: 0;
                font-size: 12pt;
                font-weight: bold;
                display: inline-block;
                vertical-align: unset;
            }
        }

        .screen-root {
            height: 100%;
            display: flex;
            flex: 1;
            flex-direction: column;
            align-items: flex-start; // stops buttons (and anything else) stretching to fill width.
            justify-content: start; // to keep predictable spacing vertically
            box-sizing: border-box;

            // BL-6899: This shim keeps a little space at the bottom of the screen
            .bottom-scroll-shim {
                flex: 0 0 auto;
                min-height: @screen-padding;
                width: 100%;
            }

            // Marks a container with contents laid out in a row
            .in-row {
                display: flex;
                flex-direction: row;
                justify-content: space-between;
                width: 100%;
                flex-grow: 1;
            }

            // Marks a container with contents laid out in a column
            .in-column {
                display: flex;
                flex-direction: column;
                justify-content: flex-start;
            }

            .right-column {
                width: 180px;
            }
        }
        // Quoting from the react-modal documentation, "By default, the modal portal will be appended to
        // the document's body."  The automatically inserted div.ReactModalPortal is normally empty and
        // thus invisible.  We have to be careful not to make its height 100%!  This would have two
        // unfortunate consequences: adding a lot of empty space at the bottom of the tool, and (worse)
        // disabling any active elements unfortunate enough to be covered by the div.ReactModalPortal.
        // See https://issues.bloomlibrary.org/youtrack/issue/BL-6729.
        // So, we need to mark the actual tool root div with this class.
        & > div.react-tool-root {
            // the react root
            height: 100%;
        }
        .sections {
            padding-top: @screen-padding;
            display: flex;
            flex-direction: row;
            &.left-column {
                flex: 1 1 auto;
            }
            section {
                h1 {
                    margin: @screen-padding 0;
                }
                // section labels
                & > h1 {
                    background-color: @bloom-lightgray;
                    text-align: center;
                    margin-bottom: @screen-padding;
                    margin-top: 0;
                }
            }
            .publish-section {
                .publish-contents {
                    padding: 0 @screen-padding;
                    flex: 1 0 auto; // helps ePUB, does nothing to Android
                }
                h2 {
                    margin-top: 0;
                }
            }
            .right-column-subsection {
                padding-left: @screen-padding;

                & + .right-column-subsection {
                    padding-top: @screen-padding;
                }
            }
            .settings-section {
                flex: 2; // should take a larger space than the help-section
            }
            .settings-subheading {
                font-weight: bold;
            }
        }
    }

    .preview-section {
        margin-right: @between-column-margin;
    }

    .publish-section {
        display: flex;

        flex-direction: column;
        flex: 1 1 auto; // take up remaining size
        margin-right: @between-column-margin;
        .publish-controls-column {
            flex: 1;
            .method-select-wrapper {
                margin-right: @screen-padding; // helps prevents Send/Save button wrapping
            }
        }
    }

    .help-section {
        flex: 1; // we want the help-section smaller than the settings section to leave room for extra features
        display: block; // each link on a new line
    }

    .progress-column {
        width: 100%;
        padding-left: @screen-padding;
        flex: 1 1 auto;
    }

    button {
        &:disabled {
            color: @DisabledButtonColor;
        }
        padding: 0.5em;
    }

    button + button {
        margin-left: @screen-padding;
    }

    .hidden {
        display: none;
    }

    a {
        display: block;
        color: @bloom-blue;
        &:hover {
            color: @bloom-blue;
        }
    }

    h1 {
        font-size: 12pt;
        font-weight: bold;
    }

    h2 {
        &.label {
            margin-bottom: 0;
        }
        font-size: 12pt;
    }
}

// This id is inside of the ProgressBox React component (should these rules be inside of that component)?
#progress-box {
    min-height: 100px;
    max-height: 750px; // keeps the box from running off the screen in ePUB view
    width: 100%;
    border: solid thin @bloom-gray;
    overflow-x: auto;
    overflow-y: scroll;
    // see note on #progress-section about growing to take up whatever is left.
    // It is the parent of this and it does that, then this must itself must do it, too.
    flex: 1;
    box-sizing: border-box;
    padding: @screen-padding;
}
