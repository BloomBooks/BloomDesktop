//- ---------------------------------------------------------------------------------------
//- Notes on Mixin use
//- 	If you get the error : "You should not have pug tags with multiple attributes."
//-		make sure the mixin name is spelled correctly and capitalized correctly.
//-		Use ctrl+/ in good editors to comment out a large section so you can narrow it down
//- ---------------------------------------------------------------------------------------

- const kLanguageForPrototypeOnly = 'z';

//- All Bloom templates should use this mixin, so that when the format version
//- changes we can change the version number in one place
mixin metadata-standard
	meta(charset='UTF-8')
	meta(name='Generator', content='Bloom')
	meta(name='BloomFormatVersion', content='2.0')
mixin core-stylesheets
	+stylesheet('basePage.css')
	//- +stylesheet('langVisibility.css')
	+stylesheet('editMode.css')
	+stylesheet('editPaneGlobal.css')
	+stylesheet('origami.css')

mixin stylesheets(nameOfTemplateSpecificCSS)
	+core-stylesheets
	+stylesheet(nameOfTemplateSpecificCSS)

mixin bookVariable(element, langCode, value)
	div(data-book=element, lang=langCode)=value

mixin bookVariable-title(langCode, title)
	div(data-book='bookTitle', lang=langCode)=title

//- Copy this into your own template if you need a different
//- default page size
mixin pageWithJustPageSize
	.A5Portrait&attributes(attributes)
		block

mixin page(englishLabel, englishDescription)
	+pageWithJustPageSize.bloom-page&attributes(attributes)
		+page-label-english(englishLabel, englishDescription)
		.marginBox
			block

//- The most common kind of page template; it is numbered and not required.
mixin page-choice(englishLabel, englishDescription)
	+page(englishLabel, englishDescription).numberedPage(data-page='extra')&attributes(attributes)
		block

mixin page-layout(englishLabel, englishDescription)
	+pageWithJustPageSize.bloom-page&attributes(attributes)
		+page-label-english(englishLabel, englishDescription)
		.marginBox.origami-layout-mode
			block

//- The most common kind of page template; it is numbered and not required.
mixin page-choice-layout(englishLabel, englishDescription)
	+page-layout(englishLabel, englishDescription).numberedPage(data-page='extra')&attributes(attributes)
		block

//- This is a page that is always in the book and can't be removed, like a cover page.
mixin page-required(englishLabel, englishDescription)
	+page(englishLabel, englishDescription)(data-page='required')&attributes(attributes)
		block

mixin page-label-english(englishLabel, englishDescription)
	.pageLabel(lang='en', data-i18n='TemplateBooks.PageLabel.'+englishLabel)=englishLabel
	.pageDescription(lang='en')=englishDescription

//- Example Usage with placeholder and bubble:
//-	+field.question
//-		label.bubble Don't forget to fill this in using {lang}
//-		label.placeholder question
mixin field(languages)
	-requireOneArgument('field', arguments);
	.bloom-translationGroup(data-default-languages=languages)&attributes(attributes)
		//- this is where <label>s go
		block
		+editable(kLanguageForPrototypeOnly)

mixin field-withSampleText
	-requireZeroArguments('field-withSampleText');
	.bloom-translationGroup&attributes(attributes)
		+editable(kLanguageForPrototypeOnly)
			block

//- Sometimes, especially when we're just pug-ifying some existing html with existing css,
//- we need to put attributes directly on the prototype div inside of a translation group.
//- This one lets us do that
mixin field-prototypeDeclaredExplicity(languages)
	- requireOneArgument('field-prototypeDeclaredExplicity', arguments);
	.bloom-translationGroup(data-default-languages=languages)&attributes(attributes)
		block

//- deprecated. Starting with version 2.0, we've changed how placeholders are handled
mixin field-version1(placeholder)
	+field-withSampleText(data-placeholder=placeholder)&attributes(attributes)
		block

//- Example usage: This would give us a user-changeable image inside a rounded border, with 2 movable labels
//-	.roundedBorder
//-		+image.storyPicture
//-			+field.bloom-draggableLabel
//-			+field.bloom-draggableLabel
mixin image
	- requireZeroArguments('image', arguments);
	.bloom-imageContainer&attributes(attributes)
		img(src="placeHolder.png", width=attributes.initialImageWidth, alt='This picture, placeHolder.png, is missing or was loading too slowly.')
		block

mixin video
	- requireZeroArguments('video', arguments);
	.box-header-off.bloom-translationGroup
		.bloom-editable.bloom-content1.bloom-contentNational1.bloom-visibility-code-on(aria-label='false' role='textbox' spellcheck='true' tabindex='0' contenteditable='true' lang='en')
			p
	.bloom-videoContainer.bloom-noVideoSelected&attributes(attributes)

//- Will show a table. Bloom's basePage.css should style it with a border around each cell
mixin grid(rows, columns)
	- requireTwoArguments("grid", arguments);
	table.bloomGrid&attributes(attributes)
		- for (var r = 0; r < rows; r++)
			tr
				- for(var c = 0; c < columns; c++)
					td
						+field("auto")

mixin gridxy(columns, rows)
	- requireTwoArguments("grid", arguments);
	table.bloomGrid&attributes(attributes)
		- for (var r = 0; r < rows; r++)
			tr
				- for(var c = 0; c < columns; c++)
					td
						+field("auto")
//- ------------------------------------------------
//- Mixins for Repetition
//- ------------------------------------------------

mixin repeat(count)
	- if(!count) throw "Usage Error: +repeat requires a count parameter.";
	- for (var i=0;i<count;i++)
		block

mixin list-numbered(count)
	- if(!count) throw "Usage Error: +list-numbered requires a count parameter.";
	ol(class=attributes.class)
		- for (var i=0;i<count;i++)
			li
				block


//- ------------------------------------------------
//- Lesser-used Mixins
//- ------------------------------------------------

//- REVIEW: How are we going to allow placeholders/bubbles on these mono fields in the new <label> style, unless there is a wrapping element to hold  both?
//- use this for fields that are always in the specified language, no translation possible
mixin field-mono-version1(language, bubbleText)
	- requireTwoArguments('field-mono-version1', arguments);
	+editable(language)(data-hint=bubbleText)&attributes(attributes)


//- These are useful for front-back matter that will never be translated.
//- When used in frontMatter, the dataBookName is mandatory.
//- Language is always mandatory, but you can use '*' to mean "Don't worry what language it is"
mixin field-mono-meta(language, dataBookName)
	- requireTwoArguments('field-mono-meta', arguments);
	+field-prototypeDeclaredExplicity(language)
		+editable(language)(data-book=dataBookName)&attributes(attributes)
			block

mixin  page-splittable-choice-custom(englishLabel, englishDescription)
	+page-choice(englishLabel, englishDescription).customPage.bloom-combinedPage&attributes(attributes)
			block

//- A splittable page is one that has each element tagged with either 'bloom-leadingElement' or 'bloom-trailingElement'.
//- The css for the page should then respond to the page having either bloom-combined (when not split) and
//- either bloom-leadingPage or bloom-trailingPage (when split). See "Split Page Support" in the Bloom Format Documentation.
mixin  page-splittable-choice(englishLabel, englishDescription)
	+page-choice(englishLabel, englishDescription)(class='bloom-combinedPage')&attributes(attributes)
		block

mixin script(javascriptfileName)
	script(type='text/javascript', src=javascriptfileName)

mixin stylesheet(fullName)
	- requireOneArgument('stylesheet', arguments);
	link(rel='stylesheet', href=fullName, type='text/css')

mixin dataDiv
	div#bloomDataDiv
		block

//- +editable should rarely if ever be used directly in a template; it is for other mixins
//- REVIEW: should attributes be on translation Group?
mixin editable(language)
	- requireOneArgument('editable', arguments)
	.bloom-editable(lang=language, contenteditable="true")&attributes(attributes)
		block
	//- .bloom-content1.bloom-editable(lang=language, contenteditable="true")&attributes(attributes)
		block

mixin space
	- requireZeroArguments('space', arguments);
	= ' '

//- Coding "+link-followed-by-space('href') here" should result in a hyperlink with correct spacing.
//- Putting "+link-followed-by-space('href')#someId here" gives "<a id=someId ..."
//- Use instead "+link('href')" if the link will be followed immediately by punctuation.
mixin link-followed-by-space(href)
	- requireOneArgument('link', arguments)
	+space
	if(attributes.id)
		a(id!=attributes.id href=href)
			block
	else
		a(href=href)
			block
	+space

//- Coding "+link('href') here" will allow following punctuation to butt up against a hyperlink.
//- Use instead "+link-followed-by-space('href')" if a space after the link is desired.
//- NB: I (gjm) tried to factor out the common code in these two mixins, but pug didn't like the nesting somehow.
mixin link(href)
	- requireOneArgument('link', arguments)
	+space
	if(attributes.id)
		a(id!=attributes.id href=href)
			block
	else
		a(href=href)
			block


//----- utility functions------------------------------

- function requireZeroArguments(functionName, args) {
-    if(args && args.length) throw "Usage Error: "+functionName+"() takes no parameters."+args.length;
- }

- function requireOneArgument(functionName, args) {
-    if(args.length != 1) throw "Usage Error: "+functionName+"() requires 1 parameter, not "+args.length;
- }

- function requireTwoArguments(functionName, args) {
-    if(args.length != 2) throw "Usage Error: "+functionName+"() requires 2 parameters.";
- }

- function requireThreeArguments(functionName, args) {
-    if(args.length != 3) throw "Usage Error: "+functionName+"() requires 3 parameters.";
- }

