@import "../../../bloomUI.less";
@quizContentPadding: 10px;

.enterprise-off .bloom-page.questions {
    .bloom-translationGroup:before {
        color: red;
        background-color: @bloom-lightgray;
        text-align: center;
        content: "This collection is not Bloom Enterprise-enabled";
    }
}

.bloom-page.questions {
    background-color: @bloom-blue;

    .quizIntructions {
        background-color: @bloom-lightgray;
        font-size: 10pt;
        font-family: Segoe UI, Open Sans, Arial, sans-serif;
        // Top and bottom padding are set to 0 so as not to clip scrolled text at the bottom.
        // Left and right padding of 4px gives a nice appearance,
        // but still allows room for the text on (smaller) Device layouts.
        padding: 0 4px 0 4px;
        height: 100%;
        p + h1 {
            margin-top: 1em;
        }
        .key {
            font-style: italic;
        }
        overflow-y: scroll;
    }
    .bloom-translationGroup {
        height: 100%;
        background-color: white;
    }
    .quizContents {
        padding: @quizContentPadding;
        box-sizing: border-box;
    }
}
.bloom-page.simple-quiz {
    .bloom-translationGroup {
        margin-bottom: 10px;
        flex-grow: 1;
        margin-left: 10px;
    }
    .check-answer-wrapper {
        display: flex; // horizontal;

        // quizCheck and its ::after make a box and position a check mark in the box.
        // The default rules here then hide the check mark.
        // If the relevant classes indicate it should be checked, the
        // opacity rule is overridden (and the background made green).
        .quizCheck {
            display: inline-block;
            cursor: pointer;
            height: 15px;
            width: 15px;
            border: 1px solid black;
        }

        .quizCheck::after {
            position: absolute;
            display: block;
            content: "\2713";
            opacity: 0;
            top: -4px;
            left: 1px;
            color: white;
        }

        .hiddenCheckbox {
            position: absolute; // occupies no space
            // hidden, but in a way that deceives a screen reader; can still be tabbed to
            // and selected with space key (behaves as a click, still intercepted by parent)
            // Unfortunately, no visual indication of selecting it; the focus rectangle is
            // hidden also. But we mainly want this for blind accessibility.
            opacity: 0;
        }
    }
}

// In edit mode, the check boxes are checked if marked correct.
body.editMode .bloom-page.simple-quiz .check-answer-wrapper {
    &.empty {
        opacity: 0.5; // dim empty ones.
        // It happens that we do want a check-answer-wrapper to display:flex,
        // but the key point of this very specific rule is to beat the one
        // below which makes it display:none in read mode.
        display: flex;
    }
    &.correct-answer {
        .quizCheck {
            background-color: green;
        }

        .quizCheck::after {
            opacity: 1;
        }
    }
}

// In read mode, the check boxes are checked if marked correct AND userSelected
// We would like to mark this rule body:not(.editMode)
// but when loaded into bloom reader, all the rules are preceded by something like [__scoped_1],
// and any rule that begins [__scoped_1] body...won't match.
// So we have to rely on something else. In this case, userSelected will
// never occur in editMode.
.bloom-page.simple-quiz .check-answer-wrapper.correct-answer.userSelected {
    .quizCheck {
        background-color: green;
    }

    .quizCheck::after {
        opacity: 1;
    }
}
.bloom-page.simple-quiz {
    .check-answer-wrapper {
        &.empty {
            // Javascript adds this class if the answer contains nothing visible.
            // This rule is overridden by a more specific one in edit mode.
            display: none;
        }
        &.userSelected:not(.correct-answer) {
            // In read mode, if they are selected but not correct, the whole answer dims
            opacity: 0.5;
        }
    }
}
