mixin choice
	//- JS intercepts clicks on this and sets classes on it which produce the right appearance for the the .styled-check-box div
	//- that provides the appearance of the checkbox, as well as setting the state of the actual invisible input one.
	//- Notice that this works over a whole Bloom Field, not just the box itself, which is why it is a bit more complicated
	//- than checkbox-styling solutions which don't require JS. Also, there are different behaviors in edit mode and in the reader.
	.checkbox-and-textbox-choice
		//- This div is styled by CSS to look like a checkbox, because a regular input is hard to give the look we want.
		//- For accessibility, there is also a proper input element, whose value is kept in sync, but which is hidden.
		.styled-check-box
		//- This input widget is here for the benefit of screen readers. It is kept in sync by JS that we attach to the checkbox-and-textbox-choice div.
		//- Not sure how easily a blind reader will associate the right check box with the reader reading the answer aloud,
		//- but at least a screen reader will see an input.
		input.hiddenCheckbox(type="checkbox", name="Correct")
		+field("auto").QuizAnswer-style(data-hint="Put a possible answer here. Check it if it is correct.")

mixin quizPage
	+page('Quiz Page', 'Use for comprehension testing.').simple-comprehension-quiz.bloom-interactive-page#F125A8B6-EA15-4FB7-9F8D-271D7B3C8D4D(data-page='extra' data-analyticsCategories="comprehension")
		.quiz
			+field("auto").QuizQuestion-style(data-hint="Put a comprehension question here")
			each dummy in new Array(7)
				+choice()
			script(src="simpleComprehensionQuiz.js")