// Styles that are shared by both the regular book css and the more minimalist epub css.

@preferredBackgroundGray: hsl(0, 0%, 86%);

body {
    line-height: 1.5;
    font-family: "Andika New Basic", Andika, "Andika Basic", "Gentium Basic",
        "Gentium Book Basic", "Doulos SIL", Sans-Serif;
}

// Centers the img in the container making it as large as possible while preserving aspect ratio
// (for any obsolete xmatter pages which use a background image)
.bloom-backgroundImage {
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
}

// Centers the img in the container making it as large as possible while preserving aspect ratio
// (for all current pages, which currently have a child img element)
.bloom-imageContainer img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    // REVIEW: this may need to be a page setting? I'm going to write it as though it is,
    // and hard code this on the template.
    &.bloom-imageObjectFit-cover {
        object-fit: cover; // if we don't have the proportions exactly right, object-fit:"contain" will make black borders
    }
}

// overridden if it is also nested in bloom-showImageDescriptions, but this can't be shared,
// because we can't use display:flex in epubs.
.bloom-imageContainer .bloom-imageDescription {
    display: none;
}

//This is needed to support captioned, inline images, as in  SIL LEAD's Uganda P4 Pupils Books.
//In these cases, the captions went from 1 to many lines, and
//the container needs to grow to hold the caption (else the text doesn't flow around the caption). But as it
//grows, we don't want the image to also keep moving downwards so that it is centered within the container.
// images also are going to look best left aligned.
.bloom-alignImageTopLeft img {
    object-position: 0 0;
}

.bloom-borderstyle-black,
.bloom-borderstyle-black-round,
.bloom-borderstyle-gray,
.bloom-borderstyle-gray-round {
    //It's not 100% clear people won't sometimes wish this was a fixed distance,
    //rather than proportional. After reading many non-concusive things on the topic,
    //I'm going with proportional for now.
    //padding: 1em;
    // And then in June 2018, we got a complaint, not about being proportional, but about being too large. So I (jh)
    // fiddled with Microsoft Publisher, and found that their "automatic" setting doesn't change based on font size.
    // I didn't see it change based on... anything. It was alway 0.04". So I exported to html and see that they use
    // 5.38pt in css. pt vs. px is a no-win situation; pt better for print, but px better for screen. The way things
    // are going, I expect we may have more electronic publishing than paper soon. So I'm sticking with px here.
    // And found that 7px gives same results as 5.38pt on my normal monitor.
    padding: 7px;

    .bloom-editable {
        //the normal grey edit-time-only border looks weird inset from a visible border
        //the highlighted border will still show when you're in the box
        border: none;
    }
}

.bloom-borderstyle-black {
    border: 1px solid black;
    border-radius: 0px;
    box-sizing: border-box;
}
.bloom-borderstyle-black-round {
    border: 1px solid black;
    border-radius: 10px;
    box-sizing: border-box;
}
.bloom-borderstyle-gray {
    border: 1px solid gray;
    border-radius: 0px;
    box-sizing: border-box;
}
.bloom-borderstyle-gray-round {
    border: 1px solid gray;
    border-radius: 10px;
    box-sizing: border-box;
}
.bloom-top-border-off {
    border-top: none;
}
.bloom-right-border-off {
    border-right: none;
}
.bloom-bottom-border-off {
    border-bottom: none;
}
.bloom-left-border-off {
    border-left: none;
}

.bloom-background-none {
    background-color: transparent;
}
.bloom-background-gray {
    background-color: @preferredBackgroundGray;
}
