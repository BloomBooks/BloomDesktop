@import (reference) "../bloomUI.less";
@MinTextBoxWidth: 30px;
@MinTextBoxHeight: 30px;
@DefaultTextBoxWidth: 140px;
@DefaultTextBoxHeight: @MinTextBoxHeight;
@DragHandleBackgroundColor: transparent;

// This can color the svg into whatever color we want. Currently bloom-purple.
// While working on this PR I changed the color 4 times and it's a pain to keep
// exporting new svgs.
// Eventually if the color settles down, we can replace this with just svg's colored like we want.
// To generate new filter rules like this, use https://codepen.io/sosuke/pen/Pjoqqp
@ComicAffordanceFilter: invert(48%) sepia(14%) saturate(1147%)
    hue-rotate(257deg) brightness(90%) contrast(84%);

// Don't show text over picture borders, resizing handles, or format buttons unless hovering over the image
.bloom-imageContainer:not(.hoverUp) .bloom-textOverPicture {
    .bloom-editable {
        border: none;
        // keeps text from jumping when switching between hover/nothover states
        padding-left: 1px;
        padding-right: 1px;
        padding-top: 2px;
        &:after {
            display: none !important;
        }
    }
    .ui-resizable-handle {
        display: none !important;
    }
    .bloom-dragHandle {
        display: none;
    }
    #formatButton {
        display: none;
    }
}

.bloom-imageContainer {
    &.grabbable:not(.bloom-resizing) {
        &,
        .bloom-textOverPicture
            .bloom-translationGroup
            .bloom-editable.cke_editable {
            cursor: grab;
        }
    }

    &.grabbing:not(.bloom-resizing) {
        &,
        .bloom-textOverPicture
            .bloom-translationGroup
            .bloom-editable.cke_editable {
            cursor: grabbing;
        }
    }

    .bloom-textOverPicture:not(.ui-resizable-resizing) {
        .bloom-dragHandle {
            cursor: grab;

            &.grabbing {
                cursor: grabbing;
            }
        }
    }

    &.ne-resizable {
        &,
        .bloom-textOverPicture
            .bloom-translationGroup
            .bloom-editable.cke_editable {
            cursor: ne-resize;
        }
    }

    &.nw-resizable {
        &,
        .bloom-textOverPicture
            .bloom-translationGroup
            .bloom-editable.cke_editable {
            cursor: nw-resize;
        }
    }

    &.sw-resizable {
        &,
        .bloom-textOverPicture
            .bloom-translationGroup
            .bloom-editable.cke_editable {
            cursor: sw-resize;
        }
    }

    &.se-resizable {
        &,
        .bloom-textOverPicture
            .bloom-translationGroup
            .bloom-editable.cke_editable {
            cursor: se-resize;
        }
    }

    .bloom-textOverPicture {
        position: absolute;
        width: @DefaultTextBoxWidth;
        height: @DefaultTextBoxHeight;
        min-width: @MinTextBoxWidth;
        min-height: @MinTextBoxHeight;
        border-radius: 3px;
        border: none !important; // needed to override ui-draggable blue border
        .bloom-dragHandle {
            filter: @ComicAffordanceFilter;
            position: absolute;
            left: unset;
            // NB: right is set by a rule at the end of this file
            width: 22px;
            height: 22px;
            top: -15px;

            &.visible {
                // This z-index should be below the canvas
                z-index: @dragHandleVisibleZIndex;
            }

            &.transparent {
                // This z-index should be above the canvas
                z-index: @dragHandleEventZIndex;
                opacity: 0; // Fully transparent (aka invisible)
            }
        }

        .bloom-translationGroup {
            background: transparent; // don't want to worry about what background the image has
            border: none;
            z-index: @textOverPictureZIndex;
            .bloom-editable {
                min-width: @MinTextBoxWidth - 3;
                min-height: @MinTextBoxHeight - 3 !important;
                text-align: center;

                // Move the format button and language tip out of the box, since we have a smaller-than-normal editable box here
                overflow: visible;
                #formatButton {
                    &:hover {
                        background-color: white;
                    }
                    filter: @ComicAffordanceFilter;
                    left: unset;
                    // NB: right is set by a rule at the end of this file
                    //right: 100% + 33px;
                    bottom: -18px;
                }
            }

            .bloom-editable:focus {
                // Overrides the inherited values from editMode.less, which are a slightly different shade of blue.
                border: 1px solid @bloom-blue;
                box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1),
                    0 0 8px @bloom-blue;
            }

            // Language tip CSS
            .bloom-editable[contentEditable="true"][data-languageTipContent]:not([data-languageTipContent=""]) {
                &:after {
                    // In editMode.less, it sets the "content" property for all text boxes (which normally always have the language tip visible).
                    // But here in text over picture, we want to default to not having the language tip visible.
                    display: none; // Prevents padding-top from being rendered (content: "" still renders it)
                }

                &:focus:after {
                    display: block;
                    left: unset;
                    text-align: right;
                    // NB: right is set by a rule at the end of this file
                    bottom: 3px;
                    color: @bloom-purple;
                    background-color: white;
                    font-size: small;
                    cursor: auto;
                    &:hover {
                        background-color: white;
                    }
                }
            }
            // Allows the format gear and language tip to be suppressed by adding a class
            // (currently, during overflow testing). Don't normally like !important,
            // but the rules this has to override are complex and trying to make this
            // rule always more specific means breaking it up and putting it in multiple
            // places (and is bug prone, if we change the other visibility rules).
            // We absolutely want these hidden during overflow calculations!
            .bloom-editable.disableTOPControls {
                #formatButton,
                &:after {
                    display: none !important;
                }
            }
        }
    }
}

// Code to handle borders
.bloom-imageContainer {
    // Text-over-picture elements with speech bubbles
    //
    // a TOP element that contains a data-bubble attribute and does NOT contain the substring "`style`:`none`" in the value of the data-bubble attribute
    .bloom-textOverPicture[data-bubble]:not([data-bubble*="`style`:`none`"]) {
        .bloom-translationGroup {
            .bloom-editable {
                border: none;
                box-shadow: none;
            }
        }
    }

    // The inverse of the above... text boxes which do not have bubbles
    //
    // The case where it doesn't contain a data-bubble attribute at all
    .bloom-textOverPicture:not([data-bubble]),
    // The case where it does contain a data-bubble attribute, but the style is none.
    .bloom-textOverPicture[data-bubble*="`style`:`none`"] {
        .bloom-translationGroup {
            .bloom-editable {
                &:focus {
                    // Overrides the inherited values from editMode.less, which are a slightly different shade of blue.
                    border: 1px solid @bloom-blue;
                    box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1),
                        0 0 8px @bloom-blue;
                }
            }
        }
    }
}

.bloom-showImageDescriptions {
    .bloom-textOverPicture {
        display: none; // Turn this off because it's complicated to deal with these while image description tool active.  Re-positioning and shrinking the text boxes proportionally while ImageDescription tool is active is possible but hugely complicates the code... so for now, just disable it.
    }
}

// different bubble shapes require different positioning of the affordances
[data-bubble] {
    .bloom-dragHandle {
        right: 100% + 1px;
    }
    #formatButton {
        right: 100% + 2px;
    }
    // we need to push the label left-ward to get out of the way of the fat part of the bubble
    [data-languageTipContent]:after {
        right: 100% + 10px !important;
    }
}
[data-bubble*="caption"] {
    [data-languageTipContent]:after {
        right: 100% + 2px !important;
    }
}
