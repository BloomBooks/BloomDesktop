@import "../templates/common-mixins.less";
@import "basePage-sharedRules.less";
@import "device.less";
@import "textOverPicture.less";

@bloom-page-background: white;

.Browser-Reset() {
    /*+init {*/
    * {
        position: relative;
        margin: 0;
        padding: 0;
        font-size: 1em;
    }
    h1, h2, h3, h4, h5, h6, th {
        font-weight: inherit;
    }
    address, cite, dfn, var {
        font-style: inherit;
    }
    caption, code, kbd, pre, samp, tt, input, textarea, select, button {
        font-family: inherit;
    }
    table {
        border-spacing: 0;
    }
    th {
        text-align: left;
    }
    html, body, thead, tbody, tfoot, tr, th, td, br {
        position: static;
    }
    input[type=hidden] {
        display: none !important;
    }
    fieldset, a img {
        border: 0;
    }
    body {
    }
}

.Browser-Reset();

body
{
    /*Most text in the document should be % changes from this value. Collection.css can then change it to make all the text  bigger.
Note: the webkit browsers (wkhtml which bloom uses for pdf, and google chrome)
Need about 2% more space to draw the same text on a ine (can't tell if the font is bigger or the box is smaller)
Therefore, in the editMode.css, we repeat this, but with a 2% larger size.
So if you change this, change it there. Note, this might not be the best long-term solution
To handling the mis-match.*/
    font-size: 10pt;
}

// when making a thumbnail for a template page, add a kind of text mockup to text areas
.bloom-templateThumbnail {
    .numberedPage:after { display:none }
    .bloom-editable {
        background-image: url('templateThumbnailText.svg');
        background-repeat: repeat-y;
        //height in ems so it is sentitive to font size. The '3' here is not necessarily
        //ideal, and was just arrived at through experimentation, balancing accuracy
        //(how many lines of text really fit in this box) with visual appeal.
        background-size: 100% 3em;

        //don't show any text that might be in the text block
        color: transparent;
    }
}

/* gridItem means this is a page thumbnail */
.gridItem {
    .pageOverflows {
        background-image: url("/bloom/BloomBrowserUI/images/Attention.svg"); /* red triangle with exclamation point */
        background-position: bottom;
        background-repeat: no-repeat;
        background-size: 70%;
    }
}
div.ui-tooltip-content
{
    overflow: visible !important;
    font-size: 10pt;
    padding: 0px 9px;
}
.uibloomSourceTextsBubble .ui-tooltip-content
{
    /*This minimum height is for picture dictionary where the height of the target box is just one line high, not enough to show the language tabs at the top and then the content below*/
    min-height: 60px !important;
}
.bloom-imageContainer
{
    min-height: 50px;
    z-index: 100;
}
p{
  min-height: 1em; //without this, an empty paragraph will be invisible, making blank lines impossible
}
textarea, .bloom-editable
{
    resize: none;
    /*don't show those cute little resize controls in Firefox 4 and greater*/
    overflow: visible;
    // this is just... bogus! removing it will cause some problems, but.. but... font-size: 143%;
    line-height: @defaultLineHeight;
    min-height:  @defaultLineHeight + .3em;
    width: 100%;
    height: 100%;
    // visible .bloom-editables are made display:flex rather than display:none
    // to allow for possible vertical alignment options. Once using display:flex,
    // the direction must be column, or paragraphs arrange in a row.
    flex-direction: column;
}

/* The following has been split out from the above rule because it should probably be removed,
    but at this point we are about to go release candidate with 3.1 so it will have to wait.
    When we do remove it, the main things it could effect are the Story Primer template and the dozen or so SIL LEAD Uganda SHRP templates.
*/
TD {
    resize: none;
    /*don't show those cute little resize controls in Firefox 4 and greater*/
    overflow: visible;
    font-size: 143%;
    line-height: @defaultLineHeight;
    min-height: @defaultLineHeight + .3em;
    width: 100%;
}

p{
  min-height: 1em; //without this, an empty paragraph will be invisible, making blank lines impossible
}

//user can get this in by pressing shift-enter. See bloomField.ts
span.bloom-linebreak {
  display: block;
  text-indent: 0;
}

div.bloom-page
{
    display: block;
    page-break-after: auto;
    background-color: @bloom-page-background;
}
div#bloomDataDiv
{
    display: none;
}
.centered
{
    text-align: center;
}
.centerJustify
{
    text-align: center;
}

/*Notes on wkhtmltopdf and page sizes: Set the border color of Div.Page in preview.css so you can see what the pdf is doing
these should be 14.8, but wkhtmltopdf shinks it
The folowing are the values which work with a 1px border.  With 0px border, I could not get the pages to come out
properly at all with wkhtmltopdf 0.10.0. It's as if the borders actually help by making the used part of each
page be the full page, regardless of the contents.

To compensate, the code asks wkthmlpdf to zoom the page by 9.1%, which an invisble 1px border added by
preview.css.

Changes here generally require similar changes in EpubMaker.FixPictureSizes() and pageThumbnailList.less.
*/
.bloom-page {
    // See device.less for all css involving the following layouts:
    //   Device16x9Portrait, Device16x9Landscape and PictureStoryLandscape

    &.A5Portrait {
        min-width: @A5Portrait-Width;
        max-width: @A5Portrait-Width;
        min-height: @A5Portrait-Height;
        max-height: @A5Portrait-Height;
    }
    &.A5Landscape {
        min-width: @A5Landscape-Width;
        max-width: @A5Landscape-Width;
        min-height: @A5Landscape-Height;
        max-height: @A5Landscape-Height;
    }
    &.B5Portrait {
        min-width: @B5Portrait-Width;
        max-width: @B5Portrait-Width;
        min-height: @B5Portrait-Height;
        max-height: @B5Portrait-Height;
    }
    &.A4Landscape, &.A4LandscapeSideBySide {
        min-width: @A4Landscape-Width;
        max-width: @A4Landscape-Width;
        min-height: @A4Landscape-Height;
        max-height: @A4Landscape-Height;
    }
    &.A4Portrait {
        min-width: @A4Portrait-Width;
        max-width: @A4Portrait-Width;
        min-height: @A4Portrait-Height;
        max-height: @A4Portrait-Height;
    }
    &.A3Landscape {
        min-width: @A3Landscape-Width;
        max-width: @A3Landscape-Width;
        min-height: @A3Landscape-Height;
        max-height: @A3Landscape-Height;
    }
    &.A3Portrait {
        min-width: @A3Portrait-Width;
        max-width: @A3Portrait-Width;
        min-height: @A3Portrait-Height;
        max-height: @A3Portrait-Height;
    }
    &.A6Portrait {
        min-width: @A6Portrait-Width;
        max-width: @A6Portrait-Width;
        min-height: @A6Portrait-Height;
        max-height: @A6Portrait-Height;
    }
    &.A6Landscape {
        min-width: @A6Landscape-Width;
        max-width: @A6Landscape-Width;
        min-height: @A6Landscape-Height;
        max-height: @A6Landscape-Height;
    }
    &.QuarterLetterPortrait {
        min-width: @QuarterLetterPortrait-Width;
        max-width: @QuarterLetterPortrait-Width;
        min-height: @QuarterLetterPortrait-Height;
        max-height: @QuarterLetterPortrait-Height;
    }
    &.QuarterLetterLandscape {
        min-width: @QuarterLetterLandscape-Width;
        max-width: @QuarterLetterLandscape-Width;
        min-height: @QuarterLetterLandscape-Height;
        max-height: @QuarterLetterLandscape-Height;
    }
    &.HalfLetterPortrait {
        min-width: @HalfLetterPortrait-Width;
        max-width: @HalfLetterPortrait-Width;
        min-height: @HalfLetterPortrait-Height;
        max-height: @HalfLetterPortrait-Height;
    }
    &.HalfLetterLandscape {
        min-width: @HalfLetterLandscape-Width;
        max-width: @HalfLetterLandscape-Width;
        min-height: @HalfLetterLandscape-Height;
        max-height: @HalfLetterLandscape-Height;
    }
    &.LetterPortrait {
        min-width: @LetterPortrait-Width;
        max-width: @LetterPortrait-Width;
        min-height: @LetterPortrait-Height;
        max-height: @LetterPortrait-Height;
    }
    &.LetterLandscape {
        min-width: @LetterLandscape-Width;
        max-width: @LetterLandscape-Width;
        min-height: @LetterLandscape-Height;
        max-height: @LetterLandscape-Height;
    }
    &.HalfLegalPortrait {
        min-width: @HalfLegalPortrait-Width;
        max-width: @HalfLegalPortrait-Width;
        min-height: @HalfLegalPortrait-Height;
        max-height: @HalfLegalPortrait-Height;
    }
    &.HalfLegalLandscape {
        min-width: @HalfLegalLandscape-Width;
        max-width: @HalfLegalLandscape-Width;
        min-height: @HalfLegalLandscape-Height;
        max-height: @HalfLegalLandscape-Height;
    }
    &.LegalPortrait {
        min-width: @LegalPortrait-Width;
        max-width: @LegalPortrait-Width;
        min-height: @LegalPortrait-Height;
        max-height: @LegalPortrait-Height;
    }
    &.LegalLandscape {
        min-width: @LegalLandscape-Width;
        max-width: @LegalLandscape-Width;
        min-height: @LegalLandscape-Height;
        max-height: @LegalLandscape-Height;
    }
}
/*Margins*/
.textWholePage .marginBox {
    position: absolute; /* see https://jira.sil.org/browse/BL-390; Without this, the "Just text" page causes the marginBox to drop down to the start of the vertically centered text, and then on PDF, you get an extra page. */
}

.SetMarginBoxHeight(@PageHeight) {
    height: @PageHeight - (@MarginTop + @MarginBottom);
}

.marginBox{
    position: absolute;
    top: @MarginTop;
}

// Mixin for setting .marginBox margins.
.SetMarginBox(@PageWidth, @PageHeight) {
    height: @PageHeight - (@MarginTop + @MarginBottom);
    width: @PageWidth - ( @MarginOuter + @MarginInner );
    IMG { /* BL-1022, BL-2353 Keeps regular thumb images from going too wide */
        max-width: @PageWidth - ( @MarginOuter + @MarginInner );
    }
}

.marginBox {
    .A3Landscape & {
        .SetMarginBox(@A3Landscape-Width, @A3Landscape-Height);
    }
    .A4Portrait & {
        .SetMarginBox(@A4Portrait-Width, @A4Portrait-Height);
    }
    .A4Landscape & {
        .SetMarginBox(@A4Landscape-Width, @A4Landscape-Height);
    }
    .A5Portrait & {
        .SetMarginBox(@A5Portrait-Width, @A5Portrait-Height);
    }
    .A5Landscape & {
        .SetMarginBox(@A5Landscape-Width, @A5Landscape-Height);
    }
    .A6Portrait & {
        .SetMarginBox(@A6Portrait-Width, @A6Portrait-Height);
    }
    .A6Landscape & {
        .SetMarginBox(@A6Landscape-Width, @A6Landscape-Height);
    }
    .B5Portrait & {
        .SetMarginBox(@B5Portrait-Width, @B5Portrait-Height);
    }

    .QuarterLetterPortrait & {
        .SetMarginBox(@QuarterLetterPortrait-Width, @QuarterLetterPortrait-Height);
    }
    .QuarterLetterLandscape & {
        .SetMarginBox(@QuarterLetterLandscape-Width, @QuarterLetterLandscape-Height);
    }
    .HalfLetterPortrait & {
        .SetMarginBox(@HalfLetterPortrait-Width, @HalfLetterPortrait-Height);
    }
    .LetterPortrait & {
        .SetMarginBox(@LetterPortrait-Width, @LetterPortrait-Height);
    }
    .LetterLandscape & {
        .SetMarginBox(@LetterLandscape-Width, @LetterLandscape-Height);
    }

    .HalfLegalPortrait & {
        .SetMarginBox(@HalfLegalPortrait-Width, @HalfLegalPortrait-Height);
    }
    .LegalPortrait & {
        .SetMarginBox(@LegalPortrait-Width, @LegalPortrait-Height);
    }
    .LegalLandscape & {
        .SetMarginBox(@LegalLandscape-Width, @LegalLandscape-Height);
    }
}

:not(.calendarFold) :not(.outsideFrontCover):not(.outsideBackCover):not(.screen-only){
    &.side-left  // maintained by c#
    {
        .marginBox{
            left: @MarginOuter;
        }
    }

    &.side-right // maintained by c#
    {
        .marginBox{
            left: @MarginInner;
        }
    }
}

.screen-only {
    .marginBox{
        left: 20px;
        width: ~"calc(100% - 40px)";
    }
}
// Note: we aren't making any assumption about this or that landscape being calendar fold.
// The publishModel needs to make that decision (perhaps, in the future, user will be able to control that when
// making the pdf). From the stylesheet's view, we just need to see this calendarFold class on the Body

.calendarFold{
    .marginBox {
        /* balanced margin*/
        left: @MarginBalanced;
    }
}

// pageDescription is for javascript to read, we never display it directly on the page
.pageDescription{display:none}

/*Our javascript (bloomediting.js) uses <label> elements to get help bubbles and placeholders on editable divs.*/
label.bubble, label.placeholder
{
    display: none;
}
.superscript
{
    vertical-align: super;
    font-size: 80%;
}
/* This is the html default, but our Browser.reset.* unfortunately overrides it. */
sup {
    font-size: smaller;
}
h1
{
    font-size: 1.5em;
}

h2 {
    font-size: 1.2em;
}
/* we will have UI that switches this .box-header-on if th user wants it*/
/* If this is not important, it can be overridden by display:flex in languageDisplayTemplate.css (BL-3555, BL-3711) */
.box-header-off{
    display: none !important;
}

// page-specific stylesheets can call this with (false) to turn it off
.Common-SeparateMultilingualEditables(@StandardMultilingualEditBoxSeparation);

.customPage {
    .bloom-imageContainer {
        width: ~"calc(100% - 1px)"; //the -1 lets our border fall jus inside the marginbox border. Undesirable in terms of layout, but visually it looks a lot better in the editor
        height: ~"calc(100% - 3px)"; //hack: this should logically be 1px, but 3 was needed, so I'm missing something, or maybe it's about rounding and such.

        // above so buttons show
        z-index: @imageContainerZIndex;
        // Solves BL-1033 small picture frames cycling red overflow
        overflow: hidden;
    }
    .bloom-editable {
        overflow-y: hidden;
    }
    .bloom-translationGroup{
        height: ~"calc(100% - 2px)";
        width: ~"calc(100% - 2px)"; //the -1 lets our border fall jus inside the marginbox border. Undesirable in terms of layout, but visually it looks a lot better in the editor
    }
    /* other rules normally make bloom-editable divs height: 100%. That won't work for a bilingual or trilingual block. 
    This rule makes them start out the size they need to be, then whatever space is left over is divided between them. 
    */ 
    &.bloom-bilingual, &.bloom-trilingual { 
        .bloom-editable {
            height: auto;
            flex-grow: 1; 
        }
    }

    .split-pane-component {
        //Enhance: this doesn't buy us much... it would be more helpful if the minimum was
        // the min-height of the child
        min-height: @defaultLineHeight;
    }
    //&.A5Portrait.bloom-monolingual .bloom-translationGroup {
    //	height: 99%;
    //	width: 99%;
    //}
}

// Making the translation group centered handles multilingual books,
// centering the group of height:auto editable divs we have in that
// case.
// Making the bloom-editable div (vertically) centered handles monolingual books
// (which otherwise would not center because the bloom-editable div
// when monolingual occupies the whole group space.)
// We don't make the bloom-editable div display:flex here because that
// would conflict with the rules that determine which of them are
// visible. The rules that make them something other than display:none
// must use display:flex. I think all of those are in languageDisplay.less.
.bloom-vertical-align-center {
    justify-content:center;
    &:not(.bloom-bilingual):not(.bloom-trilingual) .bloom-editable {
        justify-content: center;
    }
}

.bloom-vertical-align-bottom {
    justify-content:flex-end;
    &:not(.bloom-bilingual):not(.bloom-trilingual) .bloom-editable {
        justify-content: flex-end;
    }
}

/* ------------------------------------------------------
/*		Visibility System
/*		https://goo.gl/EgnSJo
/* ------------------------------------------------------*/

//Each bloom-translationGroup has 0 or more div.bloom-editables.
//Each .bloom-editable has a lang attribute to tell us what language it is in.
//Each of these is assumed to be unwanted:
.bloom-editable	{
    display: none;
    order: 99; //if somehow we don't have an order for this, show it last (default is 0, which would be first)
}
.bloom-translationGroup {
    display: flex;
    flex-direction: column;
}
// And now we can control the order using Flexbox "order" attribute:
//sadly, as of Dec 2016, browsers do not implement the full attr() spec, so this rule is rejected
// [data-language-order]{
// 	order:  attr(data-language-order integer);
// }
// Note, we could still use a data-* attribute and do this instead: [data-language-order='1']
// But for now, we're sticking with the older .bloom-content* classes.
.bloom-content1 {
    order: 0;
}
.bloom-content2 {
    order: 1;
}
.bloom-content3 {
    order: 2;
}


//Enhance: I think these could be computed, based on the current margin
@OddPageNumberPosition: 57px;
@EvenPageNumberPosition: 60px;

.numberedPage{
    &:after {
        content: attr(data-page-number);
        font-size: 14pt;
        position: absolute;
        bottom: 20px;
    }
    &.side-left:after { // side-___ maintained by c#
        left: @OddPageNumberPosition;
    }
    &.side-right:after { // side-___ maintained by c#
        right: @EvenPageNumberPosition;
        text-align: right;
    }
}


//... to be continued. We sandwich most other sheets between this one and the languageDisplay.css, which comes last-ish
