@import "../templates/common-mixins.less";
@import "basePage-sharedRules.less";
@import "device.less";
@import "bubble.less";
@import (reference) "../bloomUI.less"; // importing by reference only brings in the constants
// NOTE: more style sheet imports are at the end of this document,
// ones that should supercede the normal rules

@bloom-page-background: white;

.Browser-Reset() {
    /*+init {*/
    * {
        position: relative;
        margin: 0;
        padding: 0;
        font-size: 1em;
    }
    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    th {
        font-weight: inherit;
    }
    address,
    dfn,
    var {
        font-style: inherit;
    }
    caption,
    code,
    kbd,
    pre,
    samp,
    tt,
    input,
    textarea,
    select,
    button {
        font-family: inherit;
    }
    table {
        border-spacing: 0;
    }
    th {
        text-align: left;
    }
    html,
    body,
    thead,
    tbody,
    tfoot,
    tr,
    th,
    td,
    br {
        position: static;
    }
    input[type="hidden"] {
        display: none !important;
    }
    fieldset,
    a img {
        border: 0;
    }
    body {
    }
}

.Browser-Reset();

body {
    /*Most text in the document should be % changes from this value. Collection.css can then change it to make all the text  bigger.
Note: the webkit browsers (wkhtml which bloom uses for pdf, and google chrome)
Need about 2% more space to draw the same text on a ine (can't tell if the font is bigger or the box is smaller)
Therefore, in the editMode.css, we repeat this, but with a 2% larger size.
So if you change this, change it there. Note, this might not be the best long-term solution
To handling the mis-match.*/
    font-size: 10pt;
}

// When making a thumbnail for a template page, add a kind of text mockup to text areas
.bloom-templateThumbnail {
    .numberedPage:after {
        display: none;
    }
    .bloom-editable {
        background-image: url("templateThumbnailText.svg");
        background-repeat: repeat-y;
        // Height in ems so it is sentitive to font size. The '3' here is not necessarily
        // ideal, and was just arrived at through experimentation, balancing accuracy
        // (how many lines of text really fit in this box) with visual appeal.
        background-size: 100% 3em;

        // Don't show any text that might be in the text block.
        color: transparent;
        // BL-6582 But do display the div, because otherwise the text mockup won't show.
        display: block;
    }
}

/* gridItem means this is a page thumbnail */
.gridItem {
    .pageOverflows {
        height: 100%;
    }
    .pageOverflowsIcon {
        background-image: url("/bloom/Attention.svg"); /* red triangle with exclamation point */
        background-position: bottom;
        background-repeat: no-repeat;
        background-size: 70%;
        z-index: 3; // Should be above split-pane-component and split-pane-divider
        height: 100%;
    }
}
div.ui-tooltip-content {
    overflow: visible !important;
    font-size: 10pt;
    padding: 0px 9px;
}
.uibloomSourceTextsBubble .ui-tooltip-content {
    /*This minimum height is for picture dictionary where the height of the target box is just one line high, not enough to show the language tabs at the top and then the content below*/
    min-height: 60px !important;
}
.bloom-imageContainer {
    min-height: 50px;
    z-index: 100;
}
p {
    //without this, an empty paragraph will be invisible, making blank lines impossible
    //but we also want to make sure that an empty paragraph is the same height as other lines...
    //especially since in the Edit Page (but not in Publish to Reader preview, bloom-player, etc),
    //CKEditor will insert a <br> element (making it take up the line-height) whereas without the <br>,
    //it would take up the min-height
    min-height: @defaultLineHeight;
}
textarea,
.bloom-editable {
    resize: none;
    /*don't show those cute little resize controls in Firefox 4 and greater*/
    overflow: visible;
    // this is just... bogus! removing it will cause some problems, but.. but... font-size: 143%;
    line-height: @defaultLineHeight;
    min-height: @defaultLineHeight + 0.3em;
    width: 100%;
    // We want the bloom-editables to fill the containing bloom-translationGroup,
    // so that the boxes around them give an idea of how much space is available
    // when the translationGroup has a fixed size. This pair of properties allows
    // each bloom-editable to grow proportionally to fill the space (including
    // filling it all if there is only one).
    height: auto;
    flex-grow: 1;
    // visible .bloom-editables are made display:flex rather than display:none
    // to allow for possible vertical alignment options. Once using display:flex,
    // the direction must be column, or paragraphs arrange in a row.
    flex-direction: column;
}

/* The following has been split out from the above rule because it should probably be removed,
    but at this point we are about to go release candidate with 3.1 so it will have to wait.
    When we do remove it, the main things it could effect are the Story Primer template and the dozen or so SIL LEAD Uganda SHRP templates.
*/
td {
    resize: none;
    /*don't show those cute little resize controls in Firefox 4 and greater*/
    overflow: visible;
    font-size: 143%;
    line-height: @defaultLineHeight;
    min-height: @defaultLineHeight + 0.3em;
    width: 100%;
}

//user can get this in by pressing shift-enter. See bloomField.ts
span.bloom-linebreak {
    display: block;
    text-indent: 0;
}

div.bloom-page {
    display: block;
    page-break-after: auto;
    background-color: @bloom-page-background;
}
div#bloomDataDiv {
    display: none;
}
.centered {
    text-align: center;
}
.centerJustify {
    text-align: center;
}

@bleed: 3mm;
@RA5Portrait-Width: @A5Portrait-Width + @bleed + @bleed;
@RA5Portrait-Height: @A5Portrait-Height + @bleed + @bleed;
@RA5-Scale: unit(@RA5Portrait-Width / @A5Portrait-Width);
@A5Portrait-HeightFB: @A5Portrait-Height * @RA5-Scale;
@A5Portrait-Height-Excess: @A5Portrait-HeightFB - @RA5Portrait-Height;
.bloom-fullBleed {
    //background-color: green;
    .bloom-page {
        transform-origin: top left;
        transition: 0.5s ease-in-out;
        &.A5Portrait {
            // NB: transform order is rightmost first
            transform: translate(0, -@A5Portrait-Height-Excess / 2)
                scale(@RA5-Scale);
        }
        &.A5Landscape {
            // NB: transform order is rightmost first
            transform: translate(-@A5Portrait-Height-Excess / 2, 0)
                scale(@RA5-Scale);
        }
    }
}

// In full bleed mode, this will be @bleed larger than the desired page size. The "media" here is the phsyical paper that
// a printshow would have to work with. E.g. RA4, RA5.
// If bloom-fullBleed mode is off, this div, in the DOM, doesn't exist.
// See editMode.less for more things that we do with this (it allows us to draw the bleed and safety areas).
.bloom-mediaBox {
    overflow: hidden; // when the page is scaled, stuff in the longer dimension will actually exceed the bleed area. We want to clip that.
    &.A5Portrait {
        width: @RA5Portrait-Width;
        height: @RA5Portrait-Height;
    }
    &.A5Landscape {
        width: @RA5Portrait-Height;
        height: @RA5Portrait-Width;
    }
    // Todo: this needs rules for every page size we support in full bleed (try to use a macro)
}

/*Notes on wkhtmltopdf and page sizes: Set the border color of Div.Page in preview.css so you can see what the pdf is doing
these should be 14.8, but wkhtmltopdf shinks it
The folowing are the values which work with a 1px border.  With 0px border, I could not get the pages to come out
properly at all with wkhtmltopdf 0.10.0. It's as if the borders actually help by making the used part of each
page be the full page, regardless of the contents.

To compensate, the code asks wkthmlpdf to zoom the page by 9.1%, which an invisble 1px border added by
preview.css.

Changes here generally require similar changes in EpubMaker.FixPictureSizes() and pageThumbnailList.less.
*/
.bloom-page {
    // See device.less for all css involving the following layouts:
    //   Device16x9Portrait, Device16x9Landscape and PictureStoryLandscape

    &.A5Portrait {
        min-width: @A5Portrait-Width;
        max-width: @A5Portrait-Width;
        min-height: @A5Portrait-Height;
        max-height: @A5Portrait-Height;
    }
    &.A5Landscape {
        min-width: @A5Landscape-Width;
        max-width: @A5Landscape-Width;
        min-height: @A5Landscape-Height;
        max-height: @A5Landscape-Height;
    }
    &.B5Portrait {
        min-width: @B5Portrait-Width;
        max-width: @B5Portrait-Width;
        min-height: @B5Portrait-Height;
        max-height: @B5Portrait-Height;
    }
    &.A4Landscape,
    &.A4LandscapeSideBySide {
        min-width: @A4Landscape-Width;
        max-width: @A4Landscape-Width;
        min-height: @A4Landscape-Height;
        max-height: @A4Landscape-Height;
    }
    &.A4Portrait {
        min-width: @A4Portrait-Width;
        max-width: @A4Portrait-Width;
        min-height: @A4Portrait-Height;
        max-height: @A4Portrait-Height;
    }
    &.A3Landscape {
        min-width: @A3Landscape-Width;
        max-width: @A3Landscape-Width;
        min-height: @A3Landscape-Height;
        max-height: @A3Landscape-Height;
    }
    &.A3Portrait {
        min-width: @A3Portrait-Width;
        max-width: @A3Portrait-Width;
        min-height: @A3Portrait-Height;
        max-height: @A3Portrait-Height;
    }
    &.A6Portrait {
        min-width: @A6Portrait-Width;
        max-width: @A6Portrait-Width;
        min-height: @A6Portrait-Height;
        max-height: @A6Portrait-Height;
    }
    &.A6Landscape {
        min-width: @A6Landscape-Width;
        max-width: @A6Landscape-Width;
        min-height: @A6Landscape-Height;
        max-height: @A6Landscape-Height;
    }
    &.QuarterLetterPortrait {
        min-width: @QuarterLetterPortrait-Width;
        max-width: @QuarterLetterPortrait-Width;
        min-height: @QuarterLetterPortrait-Height;
        max-height: @QuarterLetterPortrait-Height;
    }
    &.QuarterLetterLandscape {
        min-width: @QuarterLetterLandscape-Width;
        max-width: @QuarterLetterLandscape-Width;
        min-height: @QuarterLetterLandscape-Height;
        max-height: @QuarterLetterLandscape-Height;
    }
    &.HalfLetterPortrait {
        min-width: @HalfLetterPortrait-Width;
        max-width: @HalfLetterPortrait-Width;
        min-height: @HalfLetterPortrait-Height;
        max-height: @HalfLetterPortrait-Height;
    }
    &.HalfLetterLandscape {
        min-width: @HalfLetterLandscape-Width;
        max-width: @HalfLetterLandscape-Width;
        min-height: @HalfLetterLandscape-Height;
        max-height: @HalfLetterLandscape-Height;
    }
    &.LetterPortrait {
        min-width: @LetterPortrait-Width;
        max-width: @LetterPortrait-Width;
        min-height: @LetterPortrait-Height;
        max-height: @LetterPortrait-Height;
    }
    &.LetterLandscape {
        min-width: @LetterLandscape-Width;
        max-width: @LetterLandscape-Width;
        min-height: @LetterLandscape-Height;
        max-height: @LetterLandscape-Height;
    }
    &.HalfLegalPortrait {
        min-width: @HalfLegalPortrait-Width;
        max-width: @HalfLegalPortrait-Width;
        min-height: @HalfLegalPortrait-Height;
        max-height: @HalfLegalPortrait-Height;
    }
    &.HalfLegalLandscape {
        min-width: @HalfLegalLandscape-Width;
        max-width: @HalfLegalLandscape-Width;
        min-height: @HalfLegalLandscape-Height;
        max-height: @HalfLegalLandscape-Height;
    }
    &.LegalPortrait {
        min-width: @LegalPortrait-Width;
        max-width: @LegalPortrait-Width;
        min-height: @LegalPortrait-Height;
        max-height: @LegalPortrait-Height;
    }
    &.LegalLandscape {
        min-width: @LegalLandscape-Width;
        max-width: @LegalLandscape-Width;
        min-height: @LegalLandscape-Height;
        max-height: @LegalLandscape-Height;
    }
    &.Cm13Landscape {
        min-width: @Cm13Square-Side;
        max-width: @Cm13Square-Side;
        min-height: @Cm13Square-Side;
        max-height: @Cm13Square-Side;
    }
}
/*Margins*/
.textWholePage .marginBox {
    position: absolute; /* see https://jira.sil.org/browse/BL-390; Without this, the "Just text" page causes the marginBox to drop down to the start of the vertically centered text, and then on PDF, you get an extra page. */
}

.SetMarginBoxHeight(@PageHeight) {
    height: @PageHeight - (@MarginTop + @MarginBottom);
}

.marginBox {
    position: absolute;
    top: @MarginTop;
}

// Mixin for setting .marginBox margins.
.SetMarginBox(@PageWidth, @PageHeight) {
    height: @PageHeight - (@MarginTop + @MarginBottom);
    width: @PageWidth - (@MarginOuter + @MarginInner);
    img {
        /* BL-1022, BL-2353 Keeps regular thumb images from going too wide */
        max-width: @PageWidth - (@MarginOuter + @MarginInner);
    }
}

.marginBox {
    .A3Portrait & {
        .SetMarginBox(@A3Landscape-Height, @A3Landscape-Width);
    }
    .A3Landscape & {
        .SetMarginBox(@A3Landscape-Width, @A3Landscape-Height);
    }
    .A4Portrait & {
        .SetMarginBox(@A4Portrait-Width, @A4Portrait-Height);
    }
    .A4Landscape & {
        .SetMarginBox(@A4Landscape-Width, @A4Landscape-Height);
    }
    .A5Portrait & {
        .SetMarginBox(@A5Portrait-Width, @A5Portrait-Height);
    }
    .A5Landscape & {
        .SetMarginBox(@A5Landscape-Width, @A5Landscape-Height);
    }
    .A6Portrait & {
        .SetMarginBox(@A6Portrait-Width, @A6Portrait-Height);
    }
    .A6Landscape & {
        .SetMarginBox(@A6Landscape-Width, @A6Landscape-Height);
    }
    .B5Portrait & {
        .SetMarginBox(@B5Portrait-Width, @B5Portrait-Height);
    }

    .QuarterLetterPortrait & {
        .SetMarginBox(
            @QuarterLetterPortrait-Width,
            @QuarterLetterPortrait-Height
        );
    }
    .QuarterLetterLandscape & {
        .SetMarginBox(
            @QuarterLetterLandscape-Width,
            @QuarterLetterLandscape-Height
        );
    }
    .HalfLetterPortrait & {
        .SetMarginBox(@HalfLetterPortrait-Width, @HalfLetterPortrait-Height);
    }
    .LetterPortrait & {
        .SetMarginBox(@LetterPortrait-Width, @LetterPortrait-Height);
    }
    .LetterLandscape & {
        .SetMarginBox(@LetterLandscape-Width, @LetterLandscape-Height);
    }

    .HalfLegalPortrait & {
        .SetMarginBox(@HalfLegalPortrait-Width, @HalfLegalPortrait-Height);
    }
    .LegalPortrait & {
        .SetMarginBox(@LegalPortrait-Width, @LegalPortrait-Height);
    }
    .LegalLandscape & {
        .SetMarginBox(@LegalLandscape-Width, @LegalLandscape-Height);
    }
    .Cm13Landscape & {
        .SetMarginBox(@Cm13Square-Side, @Cm13Square-Side);
    }
}

:not(.calendarFold)
    :not(.outsideFrontCover):not(.outsideBackCover):not(.screen-only) {
    &.side-left  // maintained by c#
 {
        .marginBox {
            left: @MarginOuter;
        }
    }

    &.side-right // maintained by c#
 {
        .marginBox {
            left: @MarginInner;
        }
    }
}

// Needed for Translation Instruction pages
.screen-only {
    .marginBox {
        left: 20px;
        width: ~"calc(100% - 40px)";
    }
}
// Note: we aren't making any assumption about this or that landscape being calendar fold.
// The publishModel needs to make that decision (perhaps, in the future, user will be able to control that when
// making the pdf). From the stylesheet's view, we just need to see this calendarFold class on the Body

.calendarFold {
    .marginBox {
        /* balanced margin*/
        left: @MarginBalanced;
    }
}

// pageDescription is for javascript to read, we never display it directly on the page
.pageDescription {
    display: none;
}

/*Our javascript (bloomediting.js) uses <label> elements to get help bubbles and placeholders on editable divs.*/
label.bubble,
label.placeholder {
    display: none;
}
// Previously (<= 4.5), we used to use this class to do superscripting. Now we use <sup> to be consistent with ckeditor.
// But we have to keep this styling here for legacy books.
.superscript {
    vertical-align: super;
    font-size: 80%;
}
/* This is the html default, but our Browser.reset.* unfortunately overrides it. */
sup {
    font-size: smaller;
}
h1 {
    font-size: 1.5em;
}

h2 {
    font-size: 1.2em;
}
/* box-header is an idea we never implemented. We don't use it any more, but older
books may contain divs with box-header-off, so we need a rule to hide them.*/
.box-header-off {
    display: none !important;
}

// page-specific stylesheets can call this with (false) to turn it off
.Common-SeparateMultilingualEditables(@StandardMultilingualEditBoxSeparation);

.customPage {
    .bloom-imageContainer {
        width: 100%;
        height: 100%;
        box-sizing: border-box; // need any borders inside that 100% sizing (otherwise they tend to be clipped on at least one side)

        // above so buttons show
        z-index: @imageContainerZIndex;
        // Solves BL-1033 small picture frames cycling red overflow
        overflow: hidden;
    }
    .bloom-videoContainer {
        box-sizing: border-box;
        width: 100%;
        height: 100%;
        &.bloom-noVideoSelected {
            background: url("video-placeholder.svg") no-repeat center;
            background-size: contain;
        }

        // above so buttons show
        z-index: @imageContainerZIndex;

        video {
            // I don't know exactly why this works, but it makes the video shrink to fit,
            // keep its aspect ratio, and center in whatever direction is not filled.
            height: 100%;
            width: 100%;
            max-height: 100%;
            max-width: 100%;
        }
    }
    .bloom-widgetContainer {
        box-sizing: border-box;
        width: 100%;
        height: 100%;
        &.bloom-noWidgetSelected {
            background: url("widget-placeholder.svg") no-repeat center;
            // enhance: video placeholder looks good using contain. That's better in
            // principle, because it will fit however awkward the container shape;
            // but it looks too big. Possibly we should edit the svg and give the image
            // a border there? But then I think it will be smaller than we want in
            // the page thumbnail list. May need two versions?
            background-size: 50%;
        }
        iframe {
            // The iframe containing the widget should fill the widget container.
            height: 100%;
            width: 100%;
            box-sizing: border-box; // currently redundant, but anything with 100% dimensions should have this
            border: none; // leave everything up to the content.
        }

        // above so buttons show
        z-index: @imageContainerZIndex;
    }
    .bloom-editable {
        overflow-y: hidden;
    }
    .bloom-translationGroup {
        height: ~"calc(100% - 2px)";
        width: ~"calc(100% - 2px)"; //the -1 lets our border fall jus inside the marginbox border. Undesirable in terms of layout, but visually it looks a lot better in the editor
    }

    .split-pane-component {
        //Enhance: this doesn't buy us much... it would be more helpful if the minimum was
        // the min-height of the child
        min-height: @defaultLineHeight;
    }
    //&.A5Portrait.bloom-monolingual .bloom-translationGroup {
    //	height: 99%;
    //	width: 99%;
    //}
}

// Making the translation group centered handles multilingual books,
// centering the group of height:auto editable divs we have in that
// case.
// Making the bloom-editable div (vertically) centered handles monolingual books
// (which otherwise would not center because the bloom-editable div
// when monolingual occupies the whole group space.)
// We don't make the bloom-editable div display:flex here because that
// would conflict with the rules that determine which of them are
// visible. The rules that make them something other than display:none
// must use display:flex. I think all of those are in langVisibility.less.
.bloom-vertical-align-center {
    justify-content: center;
    &:not(.bloom-bilingual):not(.bloom-trilingual) .bloom-editable {
        justify-content: center;
    }
}

.bloom-vertical-align-bottom {
    justify-content: flex-end;
    &:not(.bloom-bilingual):not(.bloom-trilingual) .bloom-editable {
        justify-content: flex-end;
    }
}

/* ------------------------------------------------------
/*		Visibility System
/*		https://goo.gl/EgnSJo
/* ------------------------------------------------------*/

//Each bloom-translationGroup has 0 or more div.bloom-editables.
//Each .bloom-editable has a lang attribute to tell us what language it is in.
//Each of these is assumed to be unwanted:
.bloom-editable {
    display: none;
    order: 99; //if somehow we don't have an order for this, show it last (default is 0, which would be first)
}
.bloom-translationGroup {
    display: flex;
    flex-direction: column;
}
// And now we can control the order using Flexbox "order" attribute:
//sadly, as of Dec 2016, browsers do not implement the full attr() spec, so this rule is rejected
// [data-language-order]{
// 	order:  attr(data-language-order integer);
// }
// Note, we could still use a data-* attribute and do this instead: [data-language-order='1']
// But for now, we're sticking with the older .bloom-content* classes.
.bloom-content1 {
    order: 0;
}
.bloom-content2 {
    order: 1;
}
.bloom-content3 {
    order: 2;
}

//Enhance: I think these could be computed, based on the current margin
@OddPageNumberPosition: 57px;
@EvenPageNumberPosition: 60px;

.numberedPage {
    &:after {
        content: attr(data-page-number);
        font-size: 14pt;
        position: absolute;
        bottom: 20px;
    }
    &.side-left:after {
        // side-___ maintained by c#
        left: @OddPageNumberPosition;
    }
    &.side-right:after {
        // side-___ maintained by c#
        right: @EvenPageNumberPosition;
        text-align: right;
    }
}

// When bloom-showImageDescriptions is set (typically only when the relevant toolbox is showing, currently,
// but we'd like to be able to turn it on in the end result, too), we make the picture shrink to fit
// in the left half and show the translation group in the right half.
// This rule would like to live in basePage-sharedRules, but we need display:flex in Bloom and display:block
// in epubs.
.bloom-showImageDescriptions .bloom-imageContainer .bloom-imageDescription {
    // We really just want to turn off the display:none that usually applies to image descriptions
    // inside image containers, but we have to set something. Fortunately, translation groups
    // are always display:flex (when not hidden) in Bloom itself.
    display: flex;
}

// When bloom-showImageDescriptions is set (typically only when the relevant toolbox is showing, currently,
// but we'd like to be able to turn it on in the end result, too), we make the picture shrink to fit
// in the left half and show the translation group in the right half.
// NB: this rule was in basePage-sharedRules, but epubcheck objects to the "position: absolute;".
// "position: absolute;" is required for the text to display in the proper location.  If we ever want to
// display like this in ePUBs (picture and description side by side), some other approach will be needed.
.bloom-showImageDescriptions .bloom-imageContainer {
    background-size: 50% auto;
    background-position-x: 0;
    .bloom-imageDescription {
        width: 50%;
        // not needed in content pages, but for some reason on cover.
        // Overridden in edit mode to make room for special border on top.
        height: 100%;
        top: 0;

        position: absolute;
        left: 50%;
        box-sizing: border-box;
        border-left: solid lightgray 1px;
        // We also want to turn off the display:none that usually applies to translation groups
        // inside image containers (above), but we want display:flex in Bloom, and display:block
        // in epubs. So that rule is elsewhere.
    }
    // Requiring a direct child helps prevent this from applying to things like the format cog
    > img {
        width: 50%;
    }
}

// if brandings has hyperlinks, we default to not showing ugly blue underlines in print.
// those could be re-enabled for digital products
div[data-book*="branding"] {
    a:link,
    a:visited {
        color: unset;
        text-decoration: unset;
    }
}

// Both canvas used in editing and svg used in permanent doc need to be
// above image and below TOP box and overlayed.
.comical-generated {
    z-index: @bubbleCanvasZIndex;
    position: absolute;
}
//BL-7929 Sometimes text in bubbles gets cut off. In lieu of understanding exactly
// what causes the discrepancy and how to compensate for it, we are just turning
// off the cutoff when it's displayed by BloomPlayer. (Problem does not occur in PDF)
.bloomPlayer-page .bloom-textOverPicture[data-bubble] {
    height: auto !important;
}
//... to be continued. We sandwich most other sheets between this one and the langVisibility.css, which comes last-ish

// now apply any book features
@import "bookFeatures.less";
