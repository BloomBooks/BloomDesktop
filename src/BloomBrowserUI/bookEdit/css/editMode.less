/*This stylesheet applied when a book is being edited. It does things like show that images can be changed by click on them.*/
@import "../../templates/common-mixins.less";
@import "../sourceBubbles/sourceBubbles.less";

@MediumGray: #C0B9B9;
@ImageHoverOverlay: #D5D5E4;
@ImageButtonBorder: #716666;
@ChangeImageButtonColor: #96668F;
@PasteImageButtonColor: #0C8597;
@MetadataButtonColor: #3A7F62;
@OverflowColor: red;

@PageLabelAndChangeLayoutPaneHeight: 45px;
@PageLabelVerticalDisplacement: -33px;

BODY
{
    background-color: #363333;
    transform-origin: top left; /* This works with a transform:scale style added in Javascript to allow zooming just the main page*/
    transition: transform 20ms; /* This works around a bug in Gecko29 and should be removed when we upgrade. It prevents redraw errors during crtl-wheel zooming*/
}

#labelAndLayoutPane
{
    height: @PageLabelAndChangeLayoutPaneHeight;
}

.tool-items:after
{
    content: ".";
    display: block;
    height: 0;
    clear: both;
    visibility: hidden;
    font-size: 0;
}
.tool-items
{
    display: inline-block;
}
.tool-items
{
    /*\*/
    display: block;
    /**/
    -height: 1px;
}
/*+}*/
DIV.bloom-imageContainer
{
    border: 1px solid #C0B9B9;
}
.coverColor DIV.bloom-imageContainer
{
    border: thin solid rgba(1, 1, 1, 0.2);
}

/*....NB: we have 2 rules because some pageLabels may be within the margin box, some outside*/
.marginBox DIV.pageLabel
{
    /*+placement:anchor-top-left -1px -29px;*/
    position: absolute;
    left: -1px;
    top: calc(@PageLabelVerticalDisplacement - 48);
}

.bloom-page .pageLabel
{
    text-align: left;
    color: @bloom-purple;
    position: absolute;
    left: 5mm;
    top: @PageLabelVerticalDisplacement;
    float: left;
    font-family: "Segoe UI", "Open Sans", Arial, sans-serif;
    &[contenteditable="true"] {
        color: @bloom-purple;
        padding: 0 2px;
    }
}

.evenPage DIV.pageLabel
{
    margin-left: 2.5cm;
}

.oddPage DIV.pageLabel
{
    margin-left: 1.3cm;
}

DIV.page
{
    background-color: #F8F8F8;
    border: medium outset #000000;
}
DIV.page.coverColor
{
    background-color: @ImageHoverOverlay;
    border: medium outset #000000;
}
/* We want divs which are used for editing to look just like textareas (e.g. border).
   For now, this readOnlyInTranslationMode is an indicator that this is edtiable,
   but there could be divs which are always edtiable... unfortunately we can't access
   the contentEditable thing itself. Note that borders are made transpartent by the languagedisplay.css,
   and there is javascript which notices that transparnet border and makes the field read-only.
*/
DIV.readOnlyInTranslationMode
{
    border: thin solid @MediumGray;
}
DIV.hoverUp
{
    background-color: @ImageHoverOverlay;
}
.imageButton {
    width: 87px;
    height: 52px;
    z-index: 100;
    position: absolute;
    background-repeat: no-repeat;
    background-size: contain;
    background-position: center center;
    &.smallButtonWidth {
        width: 50%;
        max-width: 87px;
        border-style: none;
    }
    &.smallButtonHeight {
        height: 50%;
        max-height: 52px;
        border-style: none;
    }
    &.changeImageButton {
        right: 0;
        top: 0;
        background-color: @ChangeImageButtonColor;
        background-image: url("../img/changeButton.svg");
    }
    &.pasteImageButton {
        right: 0;
        bottom: 0;
        background-color: @PasteImageButtonColor;
        background-image: url("../img/pasteButton.svg");
        background-position: right center;
        &.smallButtonWidth {
            width: 87px;
            &.verySmallButtons {
                width: 98%;
                background-size: 60%;
            }
        }
    }
    &.editMetadataButton {
        left: 0;
        top: 0;
        background-image: url("../img/imageMetaDataButton.svg") !important;
        background-color: @MetadataButtonColor;
        &.imgMetadataProblem {
            background-color: transparent;
            background-image: url("../img/imageMissingMetaData.svg") !important;
            border: none;
        }
    }
}
.hoverUp .imageButton {
   	border: 2px outset @ImageButtonBorder !important;
    border-radius: 3px !important;
    &:hover {
        border: inset @ImageButtonBorder !important;
    }
    &.editMetadataButton {
        background-image: none;
        background-color: @MetadataButtonColor !important;
    }
}
BUTTON.miniButton {
    width: 20px;
    height: 18px;
    right: 60px;
    border: none;
    position: absolute;
    background-position: left center;
    background-repeat: no-repeat;
    background-size: contain;
    background-color: transparent;
    z-index: 120;
    &:hover {
        border: 1px inset @ImageButtonBorder;
    }
    &.verySmallButtons {
        right: 60%;
    }
    &.smallButtonHeight {
        height: 15%;
    }
    &.verySmallButtons {
        width: 30%;
    }
    &.cutImageButton {
        background-image: url("../img/cut.svg");
        bottom: 27px;
        &.disabled {
    	    background-image: url("../img/cutGrey.svg");
            pointer-events: none;
        }
        &.smallButtonHeight {
            bottom: 26%;
        }
    }
    &.copyImageButton {
        background-image: url("../img/copy.svg");
        bottom: 6px;
        &.disabled {
    	    background-image: url("../img/copyGrey.svg");
            pointer-events: none;
        }
        &.smallButtonHeight {
            bottom: 4%;
        }
    }
}
BUTTON.deleteButton
{
    position: absolute;
    left: 0;
    bottom: 0;
    background-image: url("../img/deleteButtonSmall.png") !important;
    width: 40px;
    height: 40px;
    z-index: 100;
}
/*Originally, the move button was within the movable thing. Problem is, I couldn't get jquery draggable to actually use this button, using the 'handle' option, probably because it doesn't exist early enough (it pops up on mouseEnter) . But I had to have something in that option, else jquery actually prevents clicking on elements inside the drraggable thing. So I ended up setting the handle to "img", which won't be sufficient once we wan to drag things with no image.So it woud be good to get this working.*/
.moveButtonIcon
{
    background-image: url("../img/moveDivButton.png") !important;
    width: 37px !important;
    height: 37px !important;
}
BUTTON.moveButton
{
    /*+placement:anchor-top-left -19px -17px;*/
    position: absolute;
    left: -19px;
    top: -17px;
    background-image: url("../img/moveDivButton.png") !important;
    background-repeat: no-repeat;
    background-color: transparent;
    width: 16px;
    height: 16px;
    border: 0 hidden #000000;
    z-index: 1000;
    background-size: contain;
}
TEXTAREA, DIV.bloom-editable, DIV.pageLabel[contenteditable="true"]
{
    border: thin solid #C0B9B9;
    /*[disabled]min-height:34px;*/
}
/*need a darker border when we have a background color*/
.coverColor TEXTAREA, DIV.bloom-editable
{
    border: thin solid rgba(0, 0, 0, 0.2);
}
IMG.hoverUp
{
    background-color: #DFDFDF;
    border: 1px outset #000000;
}
TEXTAREA:focus, DIV.bloom-editable:focus, DIV.pageLabel[contenteditable="true"]:focus
{
    border: 1px solid rgba(82, 168, 236, 0.6);
    box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1), 0 0 8px rgba(82, 168, 236, 0.6);
    outline: 0;
}
TEXTAREA.province
{
    width: 151px;
    height: 33px;
}

/* somehow, this doesn't affect the layout of the page inside. */
DIV.bloom-templateMode {
    border: 3px dashed black;
}

.overflow
{
    color: @OverflowColor !important;
    border: solid thin @OverflowColor !important; //NB: can't afford to go "thick" because it throws off the calculation
    p:empty:after{ //br:after would be great but it doesn't work
        content:'Â¶';
    }
}
.childOverflowingThis {
    border-bottom: solid thick @OverflowColor !important;
    // no, that's really confusing when text far from the crime turns red color: red !important;
}
//we do both in case one is already used and !important
.Layout-Problem-Detected:before, .Layout-Problem-Detected:after {
    content: attr(layoutproblem);
    text-align: left;
    color: @OverflowColor;
    position:absolute;
    bottom: 0;
    left: 0;
    font-size: 9pt;
    line-height: 9pt;
}

.fieldInfo-qtip .ui-tooltip-content
{
    border: 0 solid #A03C50;
    padding: 0px;
    text-align: right;
    color: #363333;
    font-size: 8pt;
    margin-top: -8px;
    margin-right: 8px;
}

DIV.textWholePage UL
{
    position: absolute;
    margin-left: 1px;
    margin-top: -37px;
}
/*suggested by http://jqueryui.com/docs/Upgrade_Guide_17*/
.ui-mouseOver .ui-resizable-handle
{
    width: 8px;
    height: 8px;
    border: 1px solid rgb(128, 128, 128);
    background: rgb(242, 242, 242);
}
.ui-resizable-n, .ui-resizable-s
{
    left: 45%;
}
.ui-resizable-e, .ui-resizable-w
{
    top: 45%;
}
DIV.marginBox
{
    border: 1px solid rgba(115, 189, 189, 0.3);
}
.bloom-frontMatter DIV.marginBox
{
    /*With the colored background, the margin border is just too distracting, and it doesn't (yet) help the user in any way because he can't move things around on the frontmatter*/
    border: none;
}

//BL-2512 when overflowing on pages where the text is allowed to run off the screen, the formatButton would not be visible/reachable, so you couldn't shrink the text
//in response to the overflow situation.
//So in this situation, we just show it at the top.
.thisOverflowingParent #formatButton{
  top: 0;
}

#formatButton
{
    overflow: hidden;
    position: absolute;
    margin-left: 3px;
    bottom: 0;
    left:0;
    /*The font-size here is weird, but if we don't set it, the growing/shrinking font of the text will actually move the button up/down on the page*/
    font-size: 10pt;
    height: 20px;
    width: 20px;
    z-index: @formatButtonZIndex;
    img{
        position: absolute;
        bottom: 0;
        left: 0;
    }
    &:Hover {
        color: #000000;
    }
}
/*Toolbox*/
#pagedragtoolbox
{
    background-color: #FFFFA3;
    position: relative;
    left: 564px;
    top: -649px;
    width: 274px;
    height: 645px;
}
.ui-resizable, .ui-draggable, .ui-deletable
{
    border: 1px solid #C1E6CA;
}
#pagedragtoolbox IMG
{
    width: 116px;
}
#pagedragtoolbox > UL > LI > DIV
{
    border: 1px dotted #787800;
    margin-top: 34px;
    /*[empty]padding-top:;*/
}
UL.pagedragtoolbox
{
    height: 212px;
    width: 207px;
    margin-left: 31px;
    margin-top: 15px;
    background-color: transparent;
}
UL.pagedragtoolbox LI
{
    display: inline-block;
    width: 162px;
}
TEXTAREA.Heading1-style,  DIV.bloom-editable.Heading1-style{
    font-size: 16pt;
}
TEXTAREA.Heading2-style,  DIV.bloom-editable.Heading2-style {
    font-size: 13pt;
    font-weight: bold;
}
.centered
{
    text-align: center;
}
/*Put in little grey language tooltips in the bottom-right of the editable divs*/
.languageTip, .bloom-editable[contentEditable=true][data-languageTipContent]:not([data-languageTipContent='']):after
{
    position: absolute;
    right: 0;
    bottom: 0px;
    /*Same grey color as pageLabel*/
    color: rgba(0, 0, 0, 0.2);
    font-size: small;
    font-family: Arial, sans-serif; /* Arial matches .qtip-content */
    font-style: normal;
    font-weight: normal;
    line-height: 1;//else it will draw up in the box somewhere if the font is large
}
.languageTip
{
    /* 'top' is added by javascript (StyleEditor.AttachLanguageTip) based on the height of the element */
    margin-right: 1px;
    text-align: right;
}
.bloom-editable[contentEditable=true][data-languageTipContent]:not([data-languageTipContent='']):after
{
    content: attr(data-languageTipContent);
    bottom: 0px;
    margin-right: 2px;
}
/*Simulate the html5 placeholder attribute which is not available on divs
The :not(:focus) selector here is something we do NOT want. It was added as a workaround for a firefox bug
https://bugzilla.mozilla.org/show_bug.cgi?id=997749, namely that when the user clicks in an element which
has a :before rule applied and which already has focus, weird things happen and typing is suppressed.
When this bug is fixed, or if we can find a better workaround, the :not(:focus) should be removed
so that when a div has the data-placeholder attribute set, the placeholder will continue to appear
even when the div is focused (as long as it is empty).*/
[contentEditable=true][data-placeholder]:empty:not(:focus):before
{
    content: attr(data-placeholder);
    color: #DDDBDB;
}
/*This block handles marking elements that violate decodable book and leveled reader constraints*/
SPAN.sentence-too-long
{
    background-color: orange;
}

.page-too-many-words .marginBox {
    border: 5px solid orange !important;
}
.book-too-many-unique-words .marginBox {
    border: 5px solid orange !important;
}
.book-too-many-words .marginBox {
    border: 5px solid orange !important;
}

.ui-dialog { z-index: 20000; }

SPAN.sight-word
{
}
SPAN.word-not-found
{
    background-color: #1D94A4;/*bloomblue	   #D65649; /* bloomRed */

}

/* We are disabling the "Possible Word" feature at this time.
SPAN.possible-word
{
    -moz-text-decoration-style: wavy;
    -moz-text-decoration-line: underline;
    -moz-text-decoration-color: blue;
}
*/

div.cke_float {
  div.cke_top {
    padding: 4px !important;

    span.cke_toolgroup { margin: 0 !important; }
  }
}

.bloom-textOverPicture .bloom-editable {
    padding-top: 1px; // for some reason this is needed to keep edit/non-edit text spacing the same
}

div.long-press-popup {z-index: 15005} // in front of hint bubbles
