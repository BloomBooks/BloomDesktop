@import "../../../bloomUI.less";
@buttonColor: @accordion-active-element;
@recordingColor: @bloom-yellow;
#videoMonitorWrapper {
    width: 100%;
    height: 160px;
}
#videoMonitor {
    width: 100%;
    height: 100%;
}

@videoButtonSize: 40px;
@videoButtonBorder: @videoButtonSize/3;
@videoButtonRimThickness: 3px;

#videoToggleRecording {
    // These properties make a blue circle, with the border thickness equal to the center diameter
    height: @videoButtonSize;
    width: @videoButtonSize;
    border-style: solid;
    border-width: @videoButtonBorder;
    border-color: @buttonColor;
    border-radius: @videoButtonSize/2; // circle
    background-color: transparent;
    position: relative;
    &.started {
        background-color: @recordingColor;
    }
    &.recordingNow::after {
        position: absolute;
        content:"";
        box-sizing: border-box;
        height: @videoButtonSize;
        width: @videoButtonSize;
        border-style: solid;
        border-width: @videoButtonRimThickness;
        border-color: @recordingColor;
        left: -@videoButtonBorder;
        top:-@videoButtonBorder;
        border-radius: @videoButtonSize/2;
        background-color:transparent;     
    }
}

@stopBorderThickness: @videoButtonSize/10;
@stopCenterBlockSize: @videoButtonSize/3;
#videoStopRecording {
    // These properties make a thin blue circle
    position: relative;
    height: @videoButtonSize;
    width: @videoButtonSize;
    border-width: @stopBorderThickness;
    border-color: @buttonColor;
    border-radius: @videoButtonSize/2; // circle
    border-style: solid;
    background-color: transparent;
    margin-top: 20px;
    margin-bottom: 30px;
    &::after {
        // And this lot put a blue square in the middle of it.
        content:"";
        position: absolute;
        height: @stopCenterBlockSize;
        width: @stopCenterBlockSize;
        background-color: @buttonColor;
        left:  (@videoButtonSize - @stopCenterBlockSize)/2 - @stopBorderThickness;
        top: (@videoButtonSize - @stopCenterBlockSize)/2 - @stopBorderThickness;
    }
}
.videoButtonWrapper {
    display: flex;
    align-items: center;
    // giving it a fixed height prevents a slight jump when showing the large numbers, which otherwise
    // make the containing box a little bigger than when it just contains the button and small text.
    height: @videoButtonSize + 2;
    margin-bottom: 20px;
}

.startRecording, .recordingLabel, .commandLabel {margin-left: 10px;}
.countdownNumber {
    margin-left: 40px;
    font-size: 40px;
    margin-top: -6px; // experimentally, makes it look centered on the button.
}
.countdownNumber, .recordingLabel {
    color: @recordingColor;
}
.recordingLabel, .stopLabel {
    font-size: 20px;
}

.stopLabel {
    color: @buttonColor;
}

.signLanguageFrame {
    margin-left: 20px;
    margin-right: 20px;
}

.disabled{
    opacity: 0.4;
}

.ui-accordion h3[data-toolId="signLanguageTool"] span.ui-accordion-header-icon {
    background-image:url('/bloom/images/signLanguageTool.svg') !important;
}

#editOutsideButton, #restoreOriginalButton {
    height: @videoButtonSize;
    width: @videoButtonSize;
    background-repeat: no-repeat;
    background-size: contain;
    background-color: transparent;
    border: none;
}

#editOutsideButton {
    background-image: url('/bloom/images/blue pencil.svg');
}

#restoreOriginalButton {
    background-image: url('/bloom/images/restore-original.svg');
}

#restoreOriginalWrapper.disabled {
    display: none;
}

// state management
.waiting {
    .countdown3, .countdown2, .countdown1, .counting, .recording, .notWaiting {display:none}
}
.countdown3 {
    .waiting, .countdown2, .countdown1, .recording {display:none}
}
.countdown2 {
    .waiting, .countdown3, .countdown1, .recording {display:none}
}
.countdown1 {
    .waiting, .countdown3, .countdown2, .recording {display:none}
}
.recording {
    .waiting, .countdown3, .countdown2, .countdown1, .counting {display:none}
}