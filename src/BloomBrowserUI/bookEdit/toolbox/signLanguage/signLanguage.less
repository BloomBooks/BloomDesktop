@import "../../../bloomUI.less";
@buttonColor: @accordion-active-element;
@text-color: @bloom-buff;
#videoMonitorWrapper {
    width: 100%;
    // I wish we didn't need this. It works fine without it most of the time;
    // figures out how high to make the wrapper based on auto-sizing the video
    // monitor to width:100%. But there is flicker: the lower controls are
    // drawn as if this had a smaller size, then moved when the video appears.
    // FF 63 does better, so maybe we can take this out when we get GeckoFx60.
    min-height: 120px;
}
.recording {
    #videoMonitor {
        border: solid 4px @bloom-red;
    }
}
#videoMonitor {
    width: 100%;
    height: 100%;
    box-sizing: border-box;
}

.signLanguageFrame {
    color: @text-color;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    .ui-widget-content & a {
        color: @text-color; // prevents an override by jquery on ".ui-widget-content a" by being more specific
    }
    .rc-slider {
        // In this context the slider initially has controls overlaid at the left and right.
        // Since they are centered at the ends of the slider bar, the bar needs to be made
        // smaller to make the initial effect look aligned.
        // The -9px on width and the 7px margin make the slider line up with the video
        // preview. There's probably some relationship to the various dimensions in
        // rc-slider-bloom.less, but I don't know what.
        width: calc(100% - 9px);
        margin-left: 7px;
    }
    // All the layers down to .signLanguageFrame have to be 100%
    // to allow it to stretch and put Help at the bottom
    // (and divide spare space between the three main blocks)
    height: 100%;
}

@videoButtonSize: 40px;
@smallVideoButtonSize: 20px;
@advancedIndent: 20px;
@commandLabelMargin: 10px;
@videoButtonBorder: @videoButtonSize / 2;
@videoButtonRimThickness: 3px;
@stopBorderThickness: @videoButtonSize / 10;
@stopCenterBlockSize: @videoButtonSize / 3;
#videoToggleRecording {
    // These properties make a red circle
    height: @videoButtonSize;
    width: @videoButtonSize;
    border-style: solid;
    border-width: @videoButtonBorder;
    border-color: @bloom-red;
    border-radius: @videoButtonSize / 2; // circle
    background-color: transparent;
    position: relative;
    filter: drop-shadow(2px 2px 4px rgba(0, 0, 0, 0.65));
    &.counting {
        // This hides it during the 3..2..1 countdown
        display: none;
    }
    &.recordingNow {
        // during recording the button is blue, with square cutout in the middle
        border-color: @buttonColor;
        &::after {
            // And this lot put a dark square in the middle of it.
            content: "";
            position: absolute;
            height: @stopCenterBlockSize;
            width: @stopCenterBlockSize;
            background-color: @DarkBackgroundColor;
            // The button is an infinitesimal dot with a thick border making the circle.
            // The square is in the center of the circle, so the overlay rectangle's top left needs to be
            // up and left of the infinitesimal box in the center.
            left: (-@stopCenterBlockSize)/2;
            top: (-@stopCenterBlockSize)/2;
        }
    }
}

#videoPlayAndLabelWrapper,
#trimLabelWrapper,
#stopWrapper {
    display: flex;
    justify-content: center;
}
#countdownWrapper {
    display: flex;
}

#timeWrapper {
    display: flex;
    justify-content: flex-end;
    color: @bloom-red;
    visibility: hidden;
    .recording & {
        visibility: visible;
    }
}

.videoButtonWrapper {
    display: flex;
    align-items: center;
    // giving it a fixed height prevents a slight jump when showing the large numbers, which otherwise
    // make the containing box a little bigger than when it just contains the button and small text.
    height: @videoButtonSize + 2;
    margin-bottom: 20px;
}

.smallVideoButtonWrapper {
    display: flex;
    align-items: center;
    margin-bottom: 5px;
    margin-left: @advancedIndent;
}

#importRecordingWrapper {
    margin-top: 10px;
}

.startRecording,
.recordingLabel,
.commandLabel {
    margin-left: @commandLabelMargin;
}
.countdownNumber {
    margin-left: 1px;
    font-size: 40px;
    margin-top: -6px; // experimentally, makes it look centered on the button.
}
.countdownNumber,
.recordingLabel {
    color: @bloom-red;
}

.signLanguageFrame {
    margin-left: 20px;
    margin-right: 20px;
}

*.disabled {
    opacity: 0.4;
    pointer-events: none;
}

.signLanguageFrame {
    // The video monitor box takes up space even when hidden.
    .disabledVideoMonitor {
        visibility: hidden;
        // This shouldn't be necessary but in FF 45 it seems to be.
        video {
            display: none;
        }
    }
}

.ui-accordion h3[data-toolId="signLanguageTool"] span.ui-accordion-header-icon {
    background-image: url("signLanguageTool.svg") !important;
}

#videoImport,
#showInFolder,
#videoDelete {
    background-repeat: no-repeat;
    background-size: contain;
    background-color: transparent;
    border: none;
    height: @smallVideoButtonSize;
    width: @smallVideoButtonSize;
}

#videoImport {
    background-image: url("ImportVideo.svg");
}

#showInFolder {
    background-image: url("../../../images/folder.svg");
}

#videoDelete {
    background-image: url("../../../images/delete.svg");
}

#videoStatsWrapper {
    margin-left: @advancedIndent;
    label {
        margin-top: 20px;
        display: block; // otherwise margins have no effect
        font-weight: bolder;
    }
}

#restoreOriginalWrapper.disabled {
    display: none;
}

#videoDelete {
    background-color: transparent;
    color: @buttonColor;
    border: none;
}

// state management. Each item has a class, and we use the same classes
// on an outer element to identify which state we're in. So for example items which
// themselves have the class countdown3 will be invisible when the outer
// class is idle.
.idle {
    .countdown3,
    .countdown2,
    .countdown1,
    .recording,
    .notIdle {
        display: none;
    }
    .counting {
        visibility: hidden; // let one label take up space, to prevent things below jumping
    }
}
.countdown3 {
    .idle,
    .recording {
        display: none;
    }
    .countdown2,
    .countdown1 {
        opacity: 0.2;
    }
}
.countdown2 {
    .idle,
    .recording {
        display: none;
    }
    .countdown3,
    .countdown1 {
        opacity: 0.2;
    }
}
.countdown1 {
    .idle,
    .recording {
        display: none;
    }
    .countdown3,
    .countdown2 {
        opacity: 0.2;
    }
}
.recording {
    .idle,
    .countdown3,
    .countdown2,
    .countdown1,
    .counting {
        display: none;
    }
}

.processing {
    .idle,
    .recording,
    .countdown1,
    .countdown2,
    .countdown3 {
        display: none;
    }
    // let one label take up space, to prevent things below jumping.
    // For the same reason trim is hidden, not none.
    .counting,
    #trimWrapper {
        visibility: hidden;
    }
}
#videoStatsWrapper {
    .trimLabel {
        font-weight: bold;
        margin-left: 50px;
    }
}
.videoTrimSlider {
    margin-top: 15px;
    margin-bottom: 5px;
    .rc-slider-handle {
        border-radius: 0;
        height: 19px;
        width: 9px;
        background-color: @buttonColor;
        margin-top: -8px;
    }
    .rc-slider-rail {
        background-color: @DisabledButtonColor;
    }
    .rc-slider-track {
        background-color: @buttonColor;
    }
}

// By default help has a large margin. In this tool we want it fixed at the bottom,
// so it's in a FLEX box that distributes any spare space to keep it there.
// We need a rather specific rule to override the default one.
div.toolboxRoot {
    .signLanguageOuterWrapper {
        .helpLinkWrapper {
            margin-top: 0;
        }
    }
}
