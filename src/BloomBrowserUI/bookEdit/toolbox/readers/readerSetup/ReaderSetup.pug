doctype html
html
	head
		meta(charset='UTF-8')
		link(rel='stylesheet', href='/bloom/themes/bloom-jqueryui-theme/jquery-ui-dialog.custom.css', type='text/css')
		link(rel='stylesheet', href='readerSetup.css', type='text/css')
		link(rel='stylesheet', href='writingSystemDisplayForUI.css', type='text/css')
		link(rel='stylesheet', href='/bloom/lib/long-press/longpress.css', type='text/css')
		// script(src='/bloom/jquery-min.js')
		// script(src='/bloom/modified_libraries/jquery-ui/jquery-ui-1.10.3.custom.min.js')
		// //script(src='/bloom/lib/errorHandler.js')
		// script(src='/bloom/bookEdit/toolbox/decodableReader/jquery.div-columns.js')
		// script(src='/bloom/bookEdit/toolbox/decodableReader/libSynphony/underscore_min_152.js')
		// script(src='/bloom/bookEdit/toolbox/decodableReader/libSynphony/jquery.text-markup.js')
		// script(src='/bloom/bookEdit/toolbox/decodableReader/libSynphony/synphony_lib.js')
		// script(src='/bloom/bookEdit/toolbox/decodableReader/libSynphony/bloomSynphonyExtensions.js')
		// script(src='/bloom/lib/localizationManager/localizationManager.js')
		// script(src='/bloom/lib/jquery.i18n.custom.js')
		// script(src='/bloom/lib/long-press/jquery.mousewheel.js')
		// script(src='/bloom/lib/long-press/jquery.longpress.js')
		// script(src='/bloom/bookEdit//toolbox/decodableReader/readerSettings.js')s.js')
		// script(src='/bloom/bookEdit/toolbox/decodableReader/readerSetup/readerSetup.io.js')
		// script(src='/bloom/bookEdit/toolbox/decodableReader/readerSetup/readerSetup.ui.js')
		// script(type='text/javascript') $(function() {$("#dlstabs").tabs();});

		script(src='/bloom/commonBundle.js')
		script(src='/bloom/readerSetupBundle.js')
	body
		#dlstabs.ui-dialog.ui-widget
			ul
				li: a(href='#dlstabs-0', data-i18n='ReaderSetup.Letters') Letters
				li: a(href='#dlstabs-1', data-i18n='ReaderSetup.SampleWords') Sample Words
				li: a(href='#dlstabs-2', data-i18n='ReaderSetup.DecodableStages') Decodable Stages
				li: a(href='#dlstabs-3', data-i18n='ReaderSetup.Punctuation') Punctuation
				li: a(href='#dlstabs-4', data-i18n='ReaderSetup.ReaderLevels') Reader Levels
			#dlstabs-0.reader-setup-tab
				.floating
					p(data-i18n='ReaderSetup.Letters.Intro') To help you make decodable readers, Bloom needs to know the letters and letter combinations that you will be teaching.
					br
					label(data-i18n='ReaderSetup.Letters.Header') Letters and Letter Combinations
					br
					textarea#dls_letters.lang1InATool.book-font(style='height: 55px; width: 325px')
					p(data-i18n='ReaderSetup.Letters.LetterHelp1') Separate each letter or letter combination with a space. For example, here is what we might use for the English language:
					p a b c ch d e f g h i j k l m n ng o p q r s sh t th u v w x y z ' -
					p
						span(data-i18n='ReaderSetup.Letters.LetterHelp2') Notice that the English list includes symbols that are used to make words, like ' in&nbsp;
						i(data-i18n='ReaderSetup.Letters.LetterHelp3') it's
						span(data-i18n='ReaderSetup.Letters.LetterHelp4')
							= '.'
					p(data-i18n='ReaderSetup.Letters.LetterHelp5') Do not include punctuation in this list. Bloom does not support the inclusion of punctuation in decodable stages.
			#dlstabs-1.reader-setup-tab
				.flex-column
					.flex-column-fixed-row
						p
							input#use-word-list(type='radio' name='words-or-letters' value='1' checked)
							label(data-i18n='ReaderSetup.Words.UseAllowedWords' for='use-word-list') We are using lists of allowed words to define stages
							br
							input#use-letters(type='radio' name='words-or-letters' value='0')
							label(data-i18n='ReaderSetup.Words.UseLetters' for='use-letters') We are using letters with sight words to define stages
						p.disableable(data-i18n='ReaderSetup.Words.Intro') To help you make decodable readers, Bloom can suggest words that fit within the current stage.  There are two ways to give words to Bloom:
					.flex-column-expanding-row
						#more-words-div.floating.flex-column(style='width: 30%')
							label.disableable.flex-column-fixed-row(for='dls_more_words', data-i18n='ReaderSetup.Words.TypeWordsHere') 1) Type Words Here
							textarea#dls_more_words.lang1InATool.book-font.disableable.flex-column-expanding-row(style='width:100%')
						#word-lists-div.floating.flex-column
							label.disableable.flex-column-fixed-row(for='dls_word_lists')
								span(data-i18n='ReaderSetup.Words.PlaceTextFiles') 2) Place Text Files in Your
								= ' '
								a#open-text-folder.blue-link(href='', data-i18n='ReaderSetup.Words.SampleTextFolder') Sample Texts Folder
							#dls_word_lists.disableable.flex-column-expanding-row
							#how_to_export(style="display: none")
								a(href="/bloom/api/help?topic=Tasks/Edit_tasks/Decodable_Reader_Tool/Language_tab.htm", data-i18n='ReaderSetup.HowToExport') Help exporting and converting files to use as sample texts
			#dlstabs-2.reader-setup-tab
				.floating(style='width: 100%; box-sizing: border-box; margin-bottom: 8px;')
					table
						tr
							td: img(src='keys.png')
							td(style='vertical-align: baseline; white-space: nowrap'): span.rs-heading(style='margin: auto 0', data-i18n='ReaderSetup.Stages') Stages
				#stage-list-container.floating.tab-list-container
					#stage-list.tab-list
						.scrolling-table-container
							.scrolling-table-header
							.scrolling-table-container-inner
								table#stages-table(style='border-collapse: collapse')
									thead
										tr
											th(style='min-width: 25px'): div(data-i18n='ReaderSetup.StageHeader') Stage
											th(style='min-width: 35px'): div(data-i18n='ReaderSetup.lettersHeader') Letters
											th(style='width: 100%'): div(data-i18n='ReaderSetup.SightWordsHeader') Sight Words
											th(style='width: 100%'): div(data-i18n='ReaderSetup.AllowedWordsFileHeader') Allowed Words File
									tbody
									tfoot
										tr
											td(colspan='3'): a#setup-add-stage(href='', data-i18n='ReaderSetup.AddStage') Add Stage
					div.smaller(style='float: left', data-i18n='ReaderSetup.ReorderStages') Drag rows to reorder stages.
					div(style='float: right')
						a.blue-link#setup-remove-stage.smaller(href='', data-i18n='ReaderSetup.RemoveStage') Remove Stage {0}
				#stage-detail.floating.tab-detail
					div(style='display: block; margin: 6px 10px')
						span.rs-subheading(style='margin: auto 0', data-i18n='ReaderSetup.StageLabel') Stage&nbsp;
						span#setup-stage-number.rs-subheading 1
					#setup-stage-letters-and-words.sub-float
						div(style='width: 100%')
							label(for='setup-stage-sight-words', data-i18n='ReaderSetup.SightWordLabel') New Sight Words
							textarea#setup-stage-sight-words.lang1InATool.book-font(style='height: 35px; width: 100%; box-sizing:border-box;')
						br
						div(style='display: block; margin-top: 12px;'): label(data-i18n='ReaderSetup.SelectedLetters') Previous and New Letters
						#setup-selected-letters.rs-letter-container
							// If an alphabet is already set up, the innerHTML of #setup-selected-letters will be replaced with a list of letters and letter combinations.
							div(style='height: 80px')
								p
									span(data-i18n='ReaderSetup.FirstSetupAlphabet') First,
									= ' '
									a#first-setup-alphabet(href='', onclick='return firstSetupLetters();', data-i18n='ReaderSetup.SetupAlphabet') set up the alphabet for this language.
						#click-letters.smaller(style='float: left', data-i18n='ReaderSetup.ClickLetter') Click on letters to add them to this stage.
					#setup-stage-words-file.sub-float
						div(style='width: 100%;')
							label(data-i18n='ReaderSetup.AllowedWordsFile') Allowed Words File
							br
							a.blue-link#setup-choose-allowed-words-file(href='', data-i18n='ReaderSetup.ChooseAllowedWordsFile') Choose...
							#allowed-words-file-div
								span#allowed-words-file
								span &nbsp;
									= ' '
									a#remove-allowed-word-file.red-x(href='') &#x2717;
					#setup-stage-matching-words.sub-float
						div(style='width: 100%; height: calc(100% - 18px);')
							label
								span#setup-words-count 0
								= ' '
								span#matching-words-span(data-i18n='ReaderSetup.MatchingWords') matching words
								span#allowed-words-span(data-i18n='ReaderSetup.AllowedWords') allowed words
							.rs-word-container
								#rs-matching-words.lang1InATool.book-font(style='margin-left: 8px')
			#dlstabs-3.reader-setup-tab
				.floating
					label(data-i18n='ReaderSetup.SentencePunctuation.Header') Special Sentence-Ending Punctuation
					br
					textarea#dls_sentence_punct.lang1InATool.book-font(style='height: 55px; width: 325px')
					p(data-i18n='ReaderSetup.SentencePunctuation.Help') Bloom already knows which characters in the world's languages always mark the end of sentences. To add others, enter the Unicode character escapes here. For example for Thai script languages, enter \U0020 to tell Bloom that normal spaces are used to break sentences.
			#dlstabs-4.reader-setup-tab
				.floating(style='width: 100%; box-sizing: border-box; margin-bottom: 8px;')
					table
						tr
							td: img(src='steps.png', height='32')
							td(style='vertical-align: baseline; white-space: nowrap'): span.rs-heading(style='margin: auto 0', data-i18n='ReaderSetup.Levels') Reader Levels
				#level-list-container.floating.tab-list-container
					#level-list.tab-list
						table#levels-table(style='border-collapse: collapse; width: 100%;table-layout:fixed')
							colgroup
								// These are fine-tuned for English, to make everything fit in three lines total
								// at the narrowest width possible. Of course translations of the headings are
								// not likely to have the same optimum lengths. But the variations are not large
								// and a lot of our users work in English. We hope to reimplement this component
								// in React and using grid, and hope the result will be more flexible.
								col(width="10%")
								col(width="18%")
								col(width="21%")
								col(width="15%")
								col(width="18%")
								col(width="18%")
							thead
								tr.first-row
									th: div(data-i18n='ReaderSetup.LevelHeader') Level
									th: div(data-i18n='ReaderSetup.Letters') Letters
									th(colspan="3" class="borderRight centered"): div(data-i18n='ReaderSetup.Words') Words
									th: div(data-i18n='ReaderSetup.Sentences') Sentences
								tr.second-row
									th
									th: div(data-i18n='ReaderSetup.PerWordHeader') Per Word (Average)
									th: div(data-i18n='ReaderSetup.PerSentenceHeader') Per Sentence (Average)
									th: div(data-i18n='ReaderSetup.PerPageHeader') Per Page (Average)
									th: div(data-i18n='ReaderSetup.PerBookHeader') Per Book (Unique)
									th: div(data-i18n='ReaderSetup.PerPageHeader') Per Page (Average)
									th(style='display: none')
							tbody
							tfoot
								tr
									td.no-right-border(colspan='6'): a#setup-add-level(href='', data-i18n='ReaderSetup.AddLevel') Add Level
					div.smaller(style='float: left', data-i18n='ReaderSetup.ReorderLevels') Drag rows to reorder levels.
					div(style='float: right')
						a.blue-link#setup-remove-level.smaller(href='', data-i18n='ReaderSetup.RemoveLevel') Remove Level {0}
				#level-detail.floating.tab-detail
					div(style='display: block; margin: 0 10px 6px')
						span#setup-level-label.rs-subheading(style='margin: auto 0', data-i18n='ReaderSetup.LevelLabelMax') Level {0} Maximums;
					table
						tr
							td(data-i18n='ReaderSetup.Letters' colspan="3" class="detail-heading") Letters
						tr
							td: input#use-glyphs-per-word.level-checkbox(type='checkbox')
							td: label.withBoldWords(for='use-glyphs-per-word', data-i18n='ReaderSetup.MaxGlyphsPerWord') In any
								= ' '
								strong Word
							td: input#max-glyphs-per-word.level-textbox(type='text')
						tr
							td: input#use-average-glyphs-per-word.level-checkbox(type='checkbox')
							td: label.withBoldWords(for='use-average-glyphs-per-word', data-i18n='ReaderSetup.MaxAverageGlyphsPerWord') Average per Word in
								= ' '
								strong Book
							td: input#max-average-glyphs-per-word.level-textbox(type='text')
						tr
							td(data-i18n='ReaderSetup.Words' colspan="3" class="detail-heading") Words
						tr
							td: input#use-words-per-sentence.level-checkbox(type='checkbox')
							td: label.withBoldWords(for='use-words-per-sentence', data-i18n='ReaderSetup.SentenceMaxWords2') Per
								= ' '
								strong Sentence
							td: input#max-words-per-sentence.level-textbox(type='text')
						tr
							td: input#use-average-words-per-sentence.level-checkbox(type='checkbox')
							td: label.withBoldWords(for='use-average-words-per-sentence', data-i18n='ReaderSetup.MaxAverageWords') Average per
								= ' '
								strong#problem Sentence
								= ' in'
								strong Book
							td: input#max-average-words-per-sentence.level-textbox(type='text')
						tr
							td: input#use-words-per-page.level-checkbox(type='checkbox')
							td: label.withBoldWords(for='use-words-per-page', data-i18n='ReaderSetup.PageMaxWords2') Per
								= ' '
								strong Page
							td: input#max-words-per-page.level-textbox(type='text')
						tr
							td: input#use-average-words-per-page.level-checkbox(type='checkbox')
							td: label.withBoldWords(for='use-average-words-per-page', data-i18n='ReaderSetup.MaxAverageWordsPerPage') Average per
								= ' '
								strong Page
							td: input#max-average-words-per-page.level-textbox(type='text')
						tr
							td: input#use-words-per-book.level-checkbox(type='checkbox')
							td: label.withBoldWords(for='use-words-per-book', data-i18n='ReaderSetup.BookMaxWords2') Per
								= ' '
								strong Book
							td: input#max-words-per-book.level-textbox(type='text')
						tr
							td: input#use-unique-words-per-book.level-checkbox(type='checkbox')
							td: label.withBoldWords(for='use-unique-words-per-book', data-i18n='ReaderSetup.MaxUniqueWords2')
								strong Unique
								= ' in '
								strong Book
							td: input#max-unique-words-per-book.level-textbox(type='text')
						tr
							td(colspan="3" data-i18n='ReaderSetup.Sentences' class="detail-heading") Sentences
						tr
							td: input#use-sentences-per-page.level-checkbox(type='checkbox')
							td: label.withBoldWords(for='use-sentences-per-page', data-i18n='ReaderSetup.MaxSentencesPerPage') Per
								= ' '
								strong Page
							td: input#max-sentences-per-page.level-textbox(type='text')
						tr
							td: input#use-average-sentences-per-page.level-checkbox(type='checkbox')
							td: label.withBoldWords(for='use-average-sentences-per-page', data-i18n='ReaderSetup.MaxAverageSentencesPerPage') Average per
								= ' '
								strong Page
							td: input#max-average-sentences-per-page.level-textbox(type='text')
					#things-to-remember-container
						label(for='things-to-remember', data-i18n='ReaderSetup.ToRemember') Things to remember for this level:
						ul#things-to-remember
							li(contenteditable='true')
		#hiddenWordList(style="display: none")
			label#please-add-texts
			label#format_not_supported(data-i18n='ReaderSetup.FormatNotSupported') Cannot read this format
			label#needs_txt_extension(data-i18n='ReaderSetup.FileNeedsTxtExtension') File needs .TXT extension
			label#remove_word_list(data-i18n='ReaderSetup.RemoveWordList') Remove from this stage
