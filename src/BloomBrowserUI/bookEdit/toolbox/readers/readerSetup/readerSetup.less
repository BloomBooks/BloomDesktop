@import "../../../../bloomUI.less";

// Things are getting a little messy here. It's getting tricky to figure out what is
// shared by decodable and leveled settings, and what is unique to one or the other.
// We are hoping to reimplement in React soon, or at least the next time we need
// major changes.

@tableBackground: white;
@tableRowContrast: #eee;
/* Used by all tabs */
* {
    font-size: 9pt;
}
body {
    margin: 0;
    box-sizing: border-box;
}
div {
    box-sizing: border-box;
}
.align-top {
    vertical-align: top;
}
td,
th {
    padding: 0 8px;
}
#levels-table th {
    padding: 0 5px;
}
.smaller,
.smaller span, .smaller a /*Otherwise, was overridden by * above*/
 {
    font-size: 8pt;
}
label {
    font-weight: 700;
    &.withBoldWords {
        font-weight: initial;
    }
}
div.floating {
    position: relative;
    float: left;
}
.rs-heading {
    font-size: 13pt;
    font-weight: 400;
}
.rs-subheading {
    font-size: 13pt;
    font-weight: 400;
}
#dlstabs {
    width: auto;
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
}
.reader-setup-tab {
    width: 100%;
    overflow-y: auto;
    height: ~"calc(100% - 32px)";
}
tr.linked:hover {
    background-color: #ccc !important;
    cursor: pointer;
}
tr.selected {
    background-color: #fff0b3 !important;
    cursor: pointer;
}
.tab-list-container {
    width: 100%;
}
.tab-list {
    border: thin solid #666;
    -moz-user-select: none;
    width: 100%;
}
.ui-tabs .ui-state-disabled {
    display: none;
}
textarea {
    resize: none;
}

.tab-detail {
    border: 0;
    background-color: @tableBackground;
    border: 1px solid @bloom-darkestBackground;
    width: 100%;
    margin-top: 12px;
    margin-bottom: 8px;
}

/* Language Setup */
#dls_word_lists {
    background: transparent;
    border: 1px solid #bbb;
    padding: 1px;
    overflow: auto;
    width: 100%;
    margin-top: 1px;
    margin-right: 0;
}
#word-lists-div {
    width: 65%;
    float: right;
}

.format-not-supported {
    color: @WarningColor;
}

div.sub-float {
    position: relative;
}
// be careful of changes here, they can produce unexpected layout problems for long translations of the powered-by string. BL-4241.
#powered-by {
    position: relative;
    float: right;
    padding: 2px 6px;
    text-align: right;
    -moz-user-select: none;
    max-width: 300px;
}
#setup-stage-letters-and-words,
#setup-stage-words-file {
    float: left;
    margin-left: 10px;
}
#click-letters {
    padding-bottom: 10px;
}

div.scrolling-table-container {
    height: 100%;
    overflow-x: hidden;
}
div.scrolling-table-container-inner,
#level-list {
    overflow-x: hidden;
    overflow-y: auto;
    height: 100%;
    background-color: @tableBackground;

    table {
        td {
            color: black;
            height: 26px;
            white-space: nowrap;
            //min-width: 26px;
        }
        tr:nth-child(even),
        .first-row {
            background-color: @tableRowContrast;
        }
        a {
            color: #2392db;
        }
    }
}

// This is tricky. Arguably we should just put .border-right exactly where we want it.
// But the td cells are generated and the logic that generates them has no natural
// knowledge of which tds should be followed by a border. After the first (level),
// second (characters) and fifth (last words) columns is nearly always right.
// The few exceptions are handled with the border-right and no-right-border classes.
#levels-table {
    th:nth-of-type(1),
    td:nth-of-type(1),
    th:nth-of-type(2),
    td:nth-of-type(2),
    th:nth-of-type(5),
    td:nth-of-type(5),
    .borderRight {
        border-right: thin solid @bloom-darkestBackground;
        &.no-right-border {
            border-right: none;
        }
    }
}

/* There's a trick going on here. If we get more than about 10 levels or stages,
the table will start to scroll. We don't want the header to move.
So, we do the following:
  - force the real header to have height zero
  - leave space here, as padding, for one row of heading
  - make this element's position relative, so it becomes a parent for anything
    absolutely positioned
  - leave the position of all the intermediate table components at default,
    so they do NOT affect the origin for absolute positioning
  - make the divs inside the th elements be positioned absolutely
    (so their position is relative to this element, however the table scrolls).
I was not able to get this working for the new leveled reader headings, which
are mostly two lines long in English and might be more in translations. It's very
tricky to get the header cells to wrap and optimize the column widths to fit them
in as few lines as possible; even that I only managed by explicitly setting column
widths. To make the trick above work with a potentially variable number of lines
of heading is too complicated.
Since the column widths are currently fixed, it might work to make two tables,
one with the fixed (header) content and one with the scrolling content. Or it may be
possible to make the tbody element scroll separately from the header, though
I suspect not or this complicated trick would never have been created. We decided
not to try to fix it for now, but rather hope to reimplement this with React and grid. */
@headerLineHeight: 26px;
@twoRowsHeight: @headerLineHeight * 3;
div.scrolling-table-container {
    position: relative;
    padding-top: @headerLineHeight;
    width: 100%;
    &.two-rows-header {
        padding-top: @twoRowsHeight;
    }
}
div.scrolling-table-header {
    background-color: #ddd;
    height: @headerLineHeight;
    position: absolute;
    top: 0;
    right: 0;
    left: 0;
    border-bottom: 1px solid #666;
    .two-rows-header & {
        height: @twoRowsHeight;
    }
}
#things-to-remember-container {
    margin-top: 10px;
}

#levels-table th div {
    text-align: left;
}

#levels-table th.centered div {
    text-align: center;
}

#levels-table .first-row {
    line-height: 26px;
}
// logically this belongs on the tr with class second-row, but padding on tr's is ignored.
#levels-table .second-row th {
    padding-top: 5px;
    padding-bottom: 5px;
}

.detail-heading {
    font-weight: bold;
}
div.scrolling-table-container-inner table th div {
    position: absolute;
    top: 0;
    line-height: 26px;
    text-align: left;
    white-space: nowrap;
}

.second-row {
    border-bottom: thin solid @bloom-darkestBackground;
}

div.rs-letters {
    position: relative;
    float: left;
    margin: -1px 0 0 -1px;
    padding: 4px 0;
    text-align: center;
    border: thin solid @bloom-darkestBackground;
    -moz-user-select: none;
    z-index: 4;
    height: 34px;

    // font-size: 1.1em;  <-- this is user data, and its size needs to be variable (larger for complex scripts)
}

div.unselected-letter {
    color: #666;
    background-color: white;
    cursor: pointer;
}
div.previous-letter {
    color: black;
    background-color: white;
    font-weight: 700;
    cursor: not-allowed;
    z-index: 1;
    border: 4px solid @bloom-yellow;
    padding-top: 1px;
}
div.current-letter {
    color: black;
    background-color: @bloom-yellow;
    font-weight: 700;
    cursor: pointer;
}
div.rs-letters-s {
    width: 32px;
}
div.rs-letters-l {
    width: 35px;
}
div.rs-letter-container-s {
    max-width: 218px;
    overflow-y: hidden;
    border-top: 1px solid @bloom-darkestBackground;
    border-left: 1px solid @bloom-darkestBackground;
}
div.rs-letter-container-l {
    max-width: 223px;
    overflow-y: auto;
    height: 180px;
    border: 1px solid @bloom-darkestBackground;
}
div.word {
    width: 100%;
    margin: 0 2px 2px;
}
div.rs-word-container {
    border: thin solid #666;
    overflow-y: auto;
    overflow-x: hidden;
    margin-bottom: 8px;
    background-color: #e0e0e0;
    color: black;
    margin-top: 1px;
}
span.desired-grapheme {
    color: #b2652b;
}
span.current-sight-word {
    font-weight: 700;
}
span.sight-word {
    color: #00528d;
}
div.ui-tabs div.ui-tabs-panel ul.asterisk {
    margin: 0;
    padding-left: 12px;
    border: 0 none;
}

#setup-stage-matching-words td {
    padding: 0;
}
#rs-matching-words {
    column-count: 3;
}

/* Leveled Reader Setup */
#level-detail table {
    input[type="text"] {
        width: 30px;
    }
    tr td {
        padding-bottom: 2px;
        -moz-user-select: none;
        &:first-child {
            padding-right: 0;
            padding-top: 2px;
        }
        &:nth-child(2) {
            padding-left: 2px;
        }
    }
}

#things-to-remember-container {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    margin-left: 12px;
    width: ~"calc(100% - 24px)";
    height: ~"calc(100% - 200px)";
}

#things-to-remember {
    height: 200px;
    width: 100%;
    box-sizing: border-box;
    background-color: white;
    color: black;
    padding-left: 20px;
    margin-top: 2px;
    overflow-y: auto;
    flex-grow: 1;
}

.disableable {
    &.disabled {
        color: #777;
        pointer-events: none;

        a.blue-link {
            color: #777;
        }
    }
}
textarea.disableable.disabled {
    background-color: #ddd;
}

table.hide-second-column {
    th:nth-child(2),
    td:nth-child(2) {
        display: none;
    }
}

table.hide-third-column {
    th:nth-child(3),
    td:nth-child(3) {
        display: none;
    }
}

table.hide-fourth-column {
    th:nth-child(4),
    td:nth-child(4) {
        display: none;
    }
}

// flex-column marks a container which is expected to have as direct children a flex-column-fixed-row
// and a flex-column-expanding-row.  The flex-column-fixed-row is just big enough to hold its content;
// the flex-column-expanding-row fills the rest of the available space (as flex-column fills the
// space its parent makes available).
//
// This has not been tried beyond one flex-column-fixed-row and one flex-column-expanding-row inside
// a flex-column, but multiple occurrences should work.  We are nesting a flex-column inside a
// flex-column-expanding-row, and that does work.
.flex-column {
    display: flex;
    flex-flow: column;
    height: 100%;
}
.flex-column-fixed-row {
    flex: 0 1 content;
}
.flex-column-expanding-row {
    flex: 1 1;
}

#more-words-div {
    margin-bottom: 8px;
}

#setup-stage-words-file {
    a.blue-link {
        color: #00528d;
    }

    a.red-x {
        font-size: 16px;
        font-weight: 700;
        color: #a00;
        text-decoration: none;
    }
}

#allowed-words-file {
    line-height: 28px;
}
#remove-allowed-word-file {
    display: none;
}

@media (max-width: 539px) {
    .tab-detail div.sub-float {
        width: ~"calc(100% - 20px)";
    }
    #setup-stage-matching-words {
        float: left;
        margin-left: 10px;
        margin-top: 12px;
    }
    div.rs-word-container {
        height: 100px;
    }
    #powered-by {
        width: 100%;
    }
    .reader-setup-tab {
        height: ~"calc(100% - 50px)";
    }
}

@media (min-width: 540px) and (max-width: 649px) {
    .tab-detail div.sub-float {
        width: ~"calc(50% - 17px)";
    }
    #setup-stage-matching-words {
        float: right;
        margin-right: 10px;
    }
    div.rs-word-container {
        height: 240px;
    }
    #powered-by {
        width: 100%;
    }
    .reader-setup-tab {
        height: ~"calc(100% - 50px)";
    }
}

@media (max-width: 649px) {
    #more-words-div {
        margin-right: 15px;
    }
}

@media (min-width: 650px) {
    #more-words-div {
        margin-right: 20px;
    }
    #level-list-container {
        width: ~"calc(100% - 272px)";
        min-height: 310px;
        height: ~"calc(100% - 50px)";
    }
    #level-detail {
        width: 260px;
        min-height: ~"calc(100% - 50px)";
        margin-left: 12px;
        margin-top: 0;
        display: flex;
        flex-direction: column;
    }
    #level-detail div.sub-float {
        width: ~"calc(100% - 258px)";
    }
    #things-to-remember {
        height: ~"calc(100% - 32px)";
    }
    #stage-list-container {
        width: ~"calc(40% - 6px)";
        min-height: 360px;
        height: ~"calc(100% - 50px)";
    }
    .tab-list {
        height: ~"calc(100% - 16px)";
    }
    #stage-detail {
        width: ~"calc(60% - 6px)";
        min-height: 360px;
        height: ~"calc(100% - 50px)";
        margin-left: 12px;
        margin-top: 0;
    }
    #stage-detail div.sub-float {
        width: ~"calc(100% - 258px)";
    }
    #setup-stage-letters-and-words,
    #setup-stage-words-file {
        width: 228px !important;
    }
    #setup-stage-matching-words {
        float: right;
        margin-right: 10px;
        height: ~"calc(100% - 45px)";
    }
    div.rs-word-container {
        height: 100%;
    }
}
