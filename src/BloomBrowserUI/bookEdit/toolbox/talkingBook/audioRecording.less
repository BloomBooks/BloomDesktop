@import "../../../bloomUI.less";

@textColor: @bloom-buff;
@hoverBackgroundColor: @bloom-buff;
@highlightColor: @bloom-yellow;
@toolboxBackgroundColor: @bloom-panelBackground;
@sectionVerticalGap: 25px;
@buttonColumnWidth: 40px;
@splitAnimationTime: 300ms;

//highlight of the text on the page
span.ui-audioCurrent:not(.disableHighlight),
div.ui-audioCurrent:not(.disableHighlight) p {
    background: @highlightColor;

    &:before {
        background-image: url(currentTextIndicator.svg);
        background-repeat: no-repeat;
        background-size: 10px 13px;
        background-position: 2px 5px;
        left: -15px;
        top: 0; // should have no effect, but prevents a FF bug causing BL-6796
        width: 15px;
        height: 19px;
        position: absolute;
        content: " ";
    }
}
.ui-audioCurrent.bloom-postAudioSplit[data-audiorecordingmode="TextBox"]:not(.disableHighlight) {
    // Special higlighting after the Split button completes to show it completed.
    span:nth-child(3n + 1) {
        background-color: #bfedf3;
    }
    span:nth-child(3n + 2) {
        background-color: #7fdae6;
    }
    span:nth-child(3n + 3) {
        background-color: #29c2d6;
    }

    p {
        // Override the normal yellow highlight so it doesn't clash with the ones we just added
        background: none;
    }
}

.ui-audioBody {
    padding-left: 15px;
    padding-right: 15px;
    *,
    a {
        color: @textColor;
    }
    background-color: @toolboxBackgroundColor;

    background-position: center;

    .ui-audioTitle {
        font-size: larger;
        margin-top: 5px;
        font-size: large;
    }
    .ui-audio-button {
        height: @buttonColumnWidth;
        width: @buttonColumnWidth;
        border: none;
        background-size: contain;
        background-color: transparent;
        background-repeat: no-repeat;
        display: inline-block;
        margin-bottom: 5px;
        border: solid thin transparent; // just be a little responsive to indicate that it is clickable
        &:hover {
            border: none; // makes it grow a little on mouse hover
        }
    }
    #audio-prev,
    #audio-clear {
        height: 20px;
        //width:20px;
        //margin-left: 10px;
        background-position: center;
    }
    .disabled {
        opacity: 0.4;
    }
    #audio-record {
        background-image: url("record_enabled.svg");
        &.expected {
            background-image: url("record_expected.svg");
        }
        &.active {
            background-image: url("record_active.svg");
        }
    }
    #audio-play {
        background-image: url(audio/play_enabled.svg);
        height: 45px;
        width: 45px; // visually same width as record button

        &.expected {
            background-image: url(audio/play_expected.svg);
        }
        &.active {
            background-image: url(audio/play_active.svg);
        }
    }
    #audio-split {
        background-image: url(audio/split_enabled.svg);
        height: 45px;
        width: 45px; // visually same width as record button

        &.expected {
            background-image: url(audio/split_expected.svg);
        }
    }

    .audio-about {
        margin-top: @sectionVerticalGap;
    }
    #audio-look-at,
    #audio-check {
        max-width: none;
    }
    #audio-listen-label {
        position: relative;
        width: 80px;
    }
    a {
        display: block; //start on a new line
        margin-top: 10px;
        text-decoration: underline;
        cursor: pointer;
    }
    .ui-audioFooter {
        margin-top: 30px;
        margin-bottom: 5px;
    }
    .ui-audioInput,
    .ui-audioMeter {
        display: inline-block;
        background-color: @bloom-panelBackground;
    }
    .ui-audioInputGroup {
        margin-top: 5px;
        margin-bottom: 12px;
    }
    img#audio-input-dev {
        height: 30px;
        width: 30px;
        box-sizing: border-box;
        border: solid thin transparent; // just be a little responsive to indicate that it is clickable
        &:hover {
            border: none; // makes it grow a little on mouse hover
        }
    }
    // hidden unless we need to choose between three or more input devices.
    #audio-devlist {
        display: none;
        position: absolute;
        background-color: white;
        width: 180px;
        padding-left: 0;
        list-style: none;
        cursor: pointer;
        z-index: 1000;
        overflow-x: hidden;
        li {
            min-height: 20px;
            font-size: 12px;
            color: black;
            padding-left: 5px;
            white-space: nowrap;
            &:hover {
                background-color: @hoverBackgroundColor;
            }
        }
        #audio-input-dev {
            margin-top: 2px;
            width: 15px;
        }
    }
    #audio-next {
        background-image: url(audio/next_enabled.svg);
        &.expected {
            background-image: url(audio/next_expected.svg);
        }
    }
    #audio-prev {
        background-image: url(audio/prev_enabled.svg);
    }
    #audio-listen {
        margin-left: 2px; // visually centered
        background-image: url(audio/listen_enabled.svg);
        &.active {
            background-image: url(audio/listen_active.svg);
        }
    }
    #audio-clear {
        background-image: url(audio/clear_enabled.svg);
    }
    .button-label-wrapper {
        margin-top: 10px;
    }

    @buttonWidth: 60px;
    @uiAudioBodyMinWidth: 150px; // The minimum width of the container, which occurs if the scroll bar is present. It is 17 pixels larger otherwise
    @whitespaceFillerWidth: 3px; // Caused by the whitespace in the PUG code I think.
    .button-wrapper {
        display: inline-block;
        min-width: @buttonWidth;
        vertical-align: top; // Align the button with the label in case the label is really long.
    }

    .audio-label {
        display: inline-block;
        max-width: (
            @uiAudioBodyMinWidth - @buttonWidth - @whitespaceFillerWidth
        );
        vertical-align: top;

        &.expected {
            color: @highlightColor;
            //font-weight: bold;
            //font-size: 11pt;
        }
    }
    .audio-advanced {
        padding-top: 35px;
    }
}

// Automatic numbering of the elements
// Uses CSS counter instead of an ordered list (which is more awkward structurally and doesn't offer formatting flexibility)
// You could use display: none instead of the not() pseudo-selector, but display: none is not compatible with CSS transitions.
.ui-audioBody {
    counter-reset: talkingBookListCounter;
}
*:not(.hide-countable) > .audio-label.talking-book-counter:before {
    content: counter(talkingBookListCounter) ") ";
}
*:not(.hide-countable) > .audio-label.talking-book-counter {
    counter-increment: talkingBookListCounter;
}

//////////////////////////////////////////
// Animation of hiding/showing a button //
//////////////////////////////////////////
@anticipatedButtonLabelHeight: 57.5px; // The expected height for the English text. Ideal results would be had if this is kept up to date whenever the English string changes.
@buttonLabelMaxHeight: 100px;
@expandTargetProportion: unit(
    @anticipatedButtonLabelHeight / @buttonLabelMaxHeight
);
@shrinkTargetProportion: 1 - @expandTargetProportion;

// Active Case
.button-label-wrapper {
    max-height: @buttonLabelMaxHeight; // Should be at least as large as the anticipated need
    transition: max-height @splitAnimationTime;

    // Timing for Expanding
    //
    // Roughly linear to the target for most of the duration. (Then rapidly finish the rest in the last little portion of time)
    // For en, we expect no effect after it reaches actualHeight/maxHeight = 57.5/100 = 0.575
    // Thus, we want it to shrink extremely rapidly at first so we can quickly reach the region where it has a visible effect.
    transition-timing-function: cubic-bezier(
        0.9,
        @expandTargetProportion,
        0.9,
        @expandTargetProportion
    ); // Linear to 60% for most of the duration.

    overflow: hidden; // hiding the overflow causes the subsequent element to smoothly move up
}

// Hidden Case
.ui-audioBody .button-label-wrapper.hide-countable {
    max-height: 0px;

    // Timing for Shrinking (because the rule takes effect immediately once the selector rule is met)
    //
    // Rapidly shrink to the expected size of the text, then roughly linear shrink to the end.
    // For en, we expect no effect until it reaches the expected target size
    // Thus, we want it to shrink extremely rapidly at first so we can quickly reach the region where it has a visible effect.
    transition-timing-function: cubic-bezier(
        0,
        @shrinkTargetProportion,
        0,
        @shrinkTargetProportion
    );
}

.cursor-progress {
    cursor: progress;
}
body .cursor-progress {
    // A rule with higher specificity to beat out some ckeditor rules that set it to cursor: text
    cursor: progress;
}
.cursor-progress button {
    // Deal with buttons on the image container, which will appear grabbable by default. Especially the on-hover buttons for the bloom-imageContainer, those are hard to modify in the JS layer.
    cursor: progress;
}

#toast-container {
    z-index: 999999 !important;
    font-family: "Segoe UI", "sans-serif";
    font-size: 9pt;
}
#toast-container > .toast {
    opacity: 1 !important;
    box-shadow: none !important;
    background-image: none !important;
    padding-left: 8px; //don't leave room for the icon
}
.toast-toolbox-bottom {
    left: 32px;
    bottom: 46px;
}
