@import "../../../bloomUI.less";

@textColor: @bloom-buff;
@hoverBackgroundColor: @bloom-buff;
@highlightColor: @bloom-yellow;
@toolboxBackgroundColor: @bloom-panelBackground;
@sectionVerticalGap: 25px;
@buttonColumnWidth: 40px;
@splitAnimationTime: 300ms;
@micProblemColor: @bloom-warning;
@textOnLightBackground: black;
@disablingOverlayZindex: 1001; // higher than #audio-devlist

// See BL-7442: When low line height causes lines to overlap, the highlighting overlaps and
// can over up the bottom of the characters in the line above. For Chrome/Safari we have
// a fix that can be found in bloom-player. But those don't work in Firefox yet (as of FF 68).
// So we deal with the most common case of overlap (the book title on the cover) by just
// treating the text as a rectangle. And it's fine that this will show this way in Chrome too:
.Title-On-Cover-style
    span.ui-audioCurrent:not(.ui-suppressHighlight):not(.ui-disableHighlight) {
    display: inline-block;
}
span.ui-audioCurrent:not(.ui-suppressHighlight):not(.ui-disableHighlight),
div.ui-audioCurrent:not(.ui-suppressHighlight):not(.ui-disableHighlight) p {
    // This behavior is now achieved by a default rule in content/basePage-shared.less,
    // from whence it can work in various players and be overridden by our new audio-hightlighting
    // control. The negation for suppress/disable is now handled by a separate rule below.
    // background: @highlightColor;
    // /* make highlighted text easier to read if it is normally a light color (like white)*/
    // color: @textOnLightBackground;
}

.bloom-ui-current-audio-marker:before {
    background-image: url(currentTextIndicator.svg);
    background-repeat: no-repeat;
    background-size: 10px 13px;
    background-position: 2px 5px;
    left: -15px;
    top: 0; // should have no effect, but prevents a FF bug causing BL-6796
    width: 15px;
    height: 19px;
    position: absolute;
    content: " ";
}

// These classes get applied to ui-audioCurrent elements when we don't currently want
// them highlighted. Because a lot of rules now set various foreground and background
// colors for .ui-audioCurrent, not only during editing when the suppress and disable
// classes are relevant, it's cleaner to do the suppression with separate rules
// rather than :not claues like the above.
// The goal is that rules that set background and foreground color for the current
// playback element shall be defeated when the disable/suppress classes are present.
// There could pathologically be a case where some other rule was defeated unintentionally,
// but we don't have any other rule-based text or background coloring that applies to
// audio elements, so I think the neatness of not having to complicate many rules
// with :not clauses that aren't relevant in most contexts is worth it.
.ui-audioCurrent.ui-suppressHighlight,
.ui-audioCurrent.ui-suppressHighlight p,
.ui-audioCurrent.ui-disableHighlight,
.ui-audioCurrent.ui-disableHighlight p {
    background-color: unset !important;
    color: unset !important;
}

.ui-audioCurrent .ui-enableHighlight {
    background-color: @highlightColor;
    // If we can one day get rid of this, we can simplify code for positioning the microphone icon near the span.
    position: unset; // BL-11633, works around Chromium bug
}

span.ui-audioCurrent,
div.ui-audioCurrent p {
    // The rule that sets the background color is in basepage.less. However, we only need to
    // interfere with position: relative when editing, so I _think_ this rule belongs here.
    position: unset; // BL-11633, works around Chromium bug
}

.ui-audioCurrent.bloom-postAudioSplit[data-audiorecordingmode="TextBox"]:not(.ui-suppressHighlight):not(.ui-disableHighlight) {
    // Special highlighting after the Split button completes to show it completed.
    // Note: This highlighting is expected to persist across sessions, but to be hidden (displayed with the yellow color) while each segment is playing.
    //       This is accomplished because this rule temporarily drops out of effect when .ui-audioCurrent is moved to the span as that segment plays.
    //       (The rule requires a span BELOW the .ui-audioCurrent, so it drops out of effect the span IS the .ui-audioCurrent).
    span:nth-child(3n + 1) {
        background-color: #bfedf3;
    }
    span:nth-child(3n + 2) {
        background-color: #7fdae6;
    }
    span:nth-child(3n + 3) {
        background-color: #29c2d6;
    }
    span {
        position: unset; // BL-11633, works around Chromium bug
    }

    p {
        // Override the normal yellow highlight so it doesn't clash with the ones we just added
        background: none;
    }
}

.ui-audioBody {
    padding-left: 15px;
    padding-right: 15px;
    *,
    a {
        color: @textColor;
    }
    background-color: @toolboxBackgroundColor;

    background-position: center;

    .ui-audioTitle {
        font-size: larger;
        margin-top: 5px;
        font-size: large;
    }
    .ui-audio-button {
        height: @buttonColumnWidth;
        width: @buttonColumnWidth;
        border: none;
        background-size: contain;
        background-color: transparent;
        background-repeat: no-repeat;
        display: inline-block;
        border: solid thin transparent; // just be a little responsive to indicate that it is clickable
        &:hover {
            border: none; // makes it grow a little on mouse hover
        }
    }
    #audio-prev,
    #audio-clear {
        height: 20px;
        //width:20px;
        //margin-left: 10px;
        background-position: center;
    }
    .disabled {
        // Note: There is a similar rule in signLanguage.less which actually does have the scope to affect this talking book code.
        opacity: 0.4;
        pointer-events: none;
    }

    // This is kind of like disabled, except that pointer-events are still allowed. This allows it to look visually enabled when hovered.
    .disabledUnlessHover {
        opacity: 0.4;

        // No need to actually disable clicks unless hovered because you are more or less probably going to be hovering it if you're going to click it
        &:hover {
            opacity: 1;
        }
    }
    #audio-record {
        background-image: url("record_enabled.svg");
        &.expected {
            background-image: url("record_expected.svg");
        }
        &.active {
            background-image: url("record_active.svg");
        }
    }
    #audio-play {
        // We need a path here because this image is in a shared folder, not at the same
        // location as the generated audioRecording.css itself like the others.
        background-image: url(/bloom/images/play_enabled.svg);
        height: 45px;
        width: 45px; // visually same width as record button

        &.expected {
            background-image: url(play_expected.svg);
        }
        &.active {
            // we want to switch to a yellow square. This is a cheap way to get it.
            // If we want some other special shape when play is active, we have a currently-unused
            // svg we can use/edit at url("play-active.svg")
            background-image: url(pause_yellow.svg);
            //background-color: @bloom-yellow;
        }
    }
    #audio-split {
        background-image: url(split_enabled.svg);
        height: 45px;
        width: 45px; // visually same width as record button

        &.expected {
            background-image: url(split_expected.svg);
        }
    }

    .audio-about {
        margin-top: @sectionVerticalGap;
    }
    #audio-look-at,
    #audio-check {
        max-width: none;
    }
    #audio-listen-label {
        position: relative;
        width: 80px;
    }
    a {
        display: block; //start on a new line
        margin-top: 10px;
        text-decoration: underline;
        cursor: pointer;
    }
    .ui-audioFooter {
        margin-top: 30px;
        margin-bottom: 5px;
    }
    .ui-audioInput,
    .ui-audioMeter {
        display: inline-block;
        background-color: @bloom-panelBackground;
    }
    .ui-audioInputGroup {
        margin-top: 5px;
        margin-bottom: 12px;
    }
    img#audio-input-dev {
        height: 30px;
        width: 30px;
        box-sizing: border-box;
        border: solid thin transparent; // just be a little responsive to indicate that it is clickable
        &:hover {
            border: none; // makes it grow a little on mouse hover
        }
    }
    // hidden unless we need to choose between three or more input devices.
    #audio-devlist {
        display: none;
        position: absolute;
        background-color: white;
        width: 180px;
        padding-left: 0;
        list-style: none;
        cursor: pointer;
        z-index: 1000;
        overflow-x: hidden;
        li {
            min-height: 20px;
            font-size: 12px;
            color: @textOnLightBackground;
            padding-left: 5px;
            white-space: nowrap;
            &:hover {
                background-color: @hoverBackgroundColor;
            }
        }
        #audio-input-dev {
            margin-top: 2px;
            width: 15px;
        }
    }
    #audio-next {
        background-image: url(next_enabled.svg);
        &.expected {
            background-image: url(next_expected.svg);
        }
    }
    #audio-prev {
        background-image: url(prev_enabled.svg);
    }
    #audio-listen {
        margin-left: 2px; // visually centered
        background-image: url(listen_enabled.svg);
        &.active {
            background-image: url(listen_active.svg);
        }
    }
    #audio-clear {
        background-image: url(clear_enabled.svg);
    }
    .button-label-wrapper {
        margin-top: 10px;
        margin-bottom: 5px; // Was originally part of the button. Note that vertical margins will auto-collapse with the next element's margin-top. You can switch this to padding-bottom if this is undesirable.
    }

    @buttonWidth: 60px;
    @uiAudioBodyMinWidth: 149px; // The minimum width of the container, which occurs if the scroll bar is present. It is 17 pixels larger otherwise. Could be 150 or 149.67 pixels, so round down to 149
    @whitespaceFillerWidth: 3px; // Caused by the whitespace in the PUG code I think.
    .button-wrapper {
        display: inline-block;
        min-width: @buttonWidth;
        vertical-align: middle; // Align the button with the label in case the label is really long.
    }

    .audio-label {
        display: inline-block;
        max-width: (
            @uiAudioBodyMinWidth - @buttonWidth - @whitespaceFillerWidth
        );
        vertical-align: middle;

        &.expected {
            color: @highlightColor;
            //font-weight: bold;
            //font-size: 11pt;
        }
    }

    .audio-advanced {
        padding-top: 35px;
    }

    .help-link,
    .audio-about {
        z-index: @disablingOverlayZindex + 1;
        // I have no idea why this next rule is necessary, but the z-index rule has no effect without it.
        position: relative;
    }
}

// Automatic numbering of the elements
// Uses CSS counter instead of an ordered list (which is more awkward structurally and doesn't offer formatting flexibility)
// You could use display: none instead of the not() pseudo-selector, but display: none is not compatible with CSS transitions.
.ui-audioBody {
    counter-reset: talkingBookListCounter;
}
*:not(.hide-countable) > .audio-label.talking-book-counter {
    counter-increment: talkingBookListCounter;
}
// Intuitively, one would expect this to be prefixed by "*:not(.hide-countable) > "
// However, this would cause the counter to be removed, which may change the number of lines the text takes
// That changes the vertical height needed, which affects the vertical centering, which affects the position of the top of the button.
// Thus, we keep the counter there regardless of whether it's hide-countable or not.
// Instead, we rely on counter-increment to check .hide-countable in order to make sure the next one gets the right number.
// This will keep a (wrongly-numbered) counter in the text, making text length and thus vertical top more consistent
// (Still could be corner case if we switch from a 2-digit number to a 1-digit number, but we'll live with that)
.audio-label.talking-book-counter:before {
    content: counter(talkingBookListCounter) ") ";
}

// This rule supports hiding the count but not changing the counts of subsequent buttons.
// The one current instance is hiding the '4' when "Check" changes to "Stop" during playback.
.audio-label.talking-book-counter.hide-counter-still-count:before {
    display: none;
}
// Customized number styles for UI languages which need it:
*:not(.hide-countable) > .audio-label.talking-book-counter[lang="bn"]:before {
    // bn = Bangla also known as Bengali

    // Note: If some of the items are in lang="bn", but some fallback to lang="en", we want the "en" ones to use the default numbering (for now)
    //       (If in the future, you want all of them to use bengali numbers, you can include lang="bn" on the fallback ones too if they have class talking-book-counter)
    content: counter(talkingBookListCounter, bengali) ") ";
}

//////////////////////////////////////////
// Animation of hiding/showing a button //
//////////////////////////////////////////
@anticipatedButtonLabelHeight: 57.5px; // The expected height for the English text. Ideal results would be had if this is kept up to date whenever the English string changes.
@buttonLabelMaxHeight: 130px;
@expandTargetProportion: unit(
    @anticipatedButtonLabelHeight / @buttonLabelMaxHeight
);
@shrinkTargetProportion: 1 - @expandTargetProportion;

// Active Case
.button-label-wrapper {
    max-height: @buttonLabelMaxHeight; // Should be at least as large as the anticipated need
    transition: max-height @splitAnimationTime;

    // Timing for Expanding
    //
    // Roughly linear to the target for most of the duration. (Then rapidly finish the rest in the last little portion of time)
    // For en, we expect no effect after it reaches actualHeight/maxHeight = 57.5/100 = 0.575
    // Thus, we want it to shrink extremely rapidly at first so we can quickly reach the region where it has a visible effect.
    transition-timing-function: cubic-bezier(
        0.9,
        @expandTargetProportion,
        0.9,
        @expandTargetProportion
    ); // Linear to 60% for most of the duration.

    overflow: hidden; // hiding the overflow causes the subsequent element to smoothly move up
}

// Hidden Case
.ui-audioBody .button-label-wrapper.hide-countable {
    max-height: 0px;

    // Timing for Shrinking (because the rule takes effect immediately once the selector rule is met)
    //
    // Rapidly shrink to the expected size of the text, then roughly linear shrink to the end.
    // For en, we expect no effect until it reaches the expected target size
    // Thus, we want it to shrink extremely rapidly at first so we can quickly reach the region where it has a visible effect.
    transition-timing-function: cubic-bezier(
        0,
        @shrinkTargetProportion,
        0,
        @shrinkTargetProportion
    );
}

.cursor-progress {
    cursor: progress;
}
body .cursor-progress {
    // A rule with higher specificity to beat out some ckeditor rules that set it to cursor: text
    cursor: progress;
}
.cursor-progress button {
    // Deal with buttons on the image container, which will appear grabbable by default. Especially the on-hover buttons for the bloom-imageContainer, those are hard to modify in the JS layer.
    cursor: progress;
}

#toast-container {
    z-index: 999999 !important;
    font-family: @UIFontStack;
    font-size: 9pt;
}
#toast-container > .toast {
    opacity: 1 !important;
    box-shadow: none !important;
    background-image: none !important;
    padding-left: 8px; //don't leave room for the icon
}
.toast-toolbox-bottom {
    left: 32px;
    bottom: 46px;
}

#import-recording-button {
    font-family: @UIFontStack;

    text-transform: none; // Material buttons are all caps by default

    &:disabled {
        svg {
            opacity: 0.4;
        }
    }

    // Ok, not ideal, but we add these rules to override Material's defaults and
    // make the icon and text align with the (non-Material) checkbox above it
    .MuiButton-startIcon {
        margin-left: -1px;
        margin-right: 5px;
    }
    .MuiButton-iconSizeSmall > :first-child {
        font-size: 16px;
    }
}

#mic-problem-message {
    &.initiallyHidden {
        display: none;
    }
    background-color: @micProblemColor;
    color: @textOnLightBackground;
    border-radius: 6px;
    font-size: medium;
    padding: 6px;
}

#audio-playbackOrderControl-wrapper {
    z-index: @disablingOverlayZindex + 1;
    label.checked {
        color: @highlightColor;
    }
}

// This is for a div added to a visible bloom-translationGroup
// that needs to display playback order controls.
.bloom-playbackOrderControlsContainer {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    display: flex;
    justify-content: center;
    z-index: 2001; // textOverPicture is 1001
}

.hiddenOverlay {
    display: none;
}

#disablingOverlay {
    z-index: @disablingOverlayZindex;
    opacity: 0.7;
    position: fixed;
    top: inherit;
    background-color: @toolboxBackgroundColor;
    height: 100%;
    width: calc(100% - 20px);
}
