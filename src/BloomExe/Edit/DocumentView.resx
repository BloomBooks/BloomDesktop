<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="modeImages.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="modeImages.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj0yLjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAABm
        CQAAAk1TRnQBSQFMAgEBAwEAAZABAAGQAQABEAEAARABAAT/ARkBAAj/AUIBTQE2BwABNgMAASgDAAFA
        AwABEAMAAQEBAAEYBgABDBUAAcMBxQHEAYUBigGIAYUBigGIAYUBigGIAYUBigGIAYUBigGIAYUBigGI
        AYUBigGIAYUBigGIAYUBigGIAYUBigGIAYUBigGIAcMBxQHECQABrwGyAbEBhQGKAYgBhQGKAYgBhQGK
        AYgBhQGKAYgBhQGKAYgBhQGKAYgBhQGKAYgBhQGKAYgBhQGKAYgBhQGKAYgBhQGKAYgBhQGKAYgB0QHT
        AdIDACSPPwABhQGKAYgD7hWyA7EGsgGFAYoBiAYAAb8BwQHAAbsBvAG7A+Ue4gHhAuIBtgK3AbQBtwG1
        A48b/wP6A6gDjzwAAYUBigGIA/8D7APrBuoD6QPrA+oD6wPsA7IBhQGKAYgGAAGFAYoBiALrAeoB0AXP
        A8sBzAPLA8wBywTMAdABzwLQAc8C0AHPBNAB0wHUAdMB6wLqAYUBigGIA48D/wGbAakB9wFpAX0B8QGt
        AbYB7QH5AfgB9AL5AfgG9wP4A+sDqAP/A48D/jYAAYUBigGIA/8D2wPLA8QDAAECAVkBjwNjA4wDygPa
        A7IBhQGKAYgD/wMAAYUBigGIA/8D1gOWAZUGlgGVBJYClQmWApUClgHWAdUB1gHvAu4BhQGKAYgDjwP/
        Aa4BuQH2AWUBeQHuAWQBeAHrAaEBqwHmAf8B/QHyAfgB9wH2A/UD9gLrAeoDqAb/A48D/TMAAYUBigGI
        A/8G7APpAQIBWQGPASYBQgFMATYBVwFrAQIBWQGPA50D1gOuAYUBigGIBgABhQGKAYgD/wLdAdwE3QHc
        Bt0B3AHdAdwB3QPYAtcK2APdA/MBhQGKAYgDjwP/AvwB8wHYAd0B9AGIAZgB8gE4AVMB8QGxAbkB6ALu
        Ae8B/QH7AfIB/QH8AfUC8AHrDKgDjzMAAYUBigGIA/8D2wPMA8sDdQE5AVsBcAGKAasBwgFVAYUBowEC
        AVkEjwOGAYUBigGIA/8DAAGFAYoBiAP/A+MMoAPjD6ED4wP5AYUBigGIA48D/wPwAfYB9QHwAf4B/AHw
        AasBtgH0ATsBVgHvAYABjwHqAZkBpQHrAcABxwHsAWkBfgH1AVABZgHoAcYBygHhAe4B7QHpA/8DjzMA
        AYUBigGIA/8J7APrAQIBWQGPAcQB5QHtAWQBnwHIAVcBhwGkAQIBWQGPA3EBhQGKAYgDAAP/AYUBigGI
        A/8D4wOgBr4DoBXjA/8BhQGKAYgDjwP/A+8C8QHyAvUB8gHwAfEB8wFqAX0B7wHNAdAB5AG3AcAB8gEq
        AUgB8wFSAWoB8QFfAXYB9AHCAcgB7QH1AfQB7wP/A48zAAGFAYoBiAP/A9sJzAO3AQIBWQGPAcUB5gHt
        AWgBpgHOAVcBhAGgAQIBWQGPAYUBigGIAwAD/wGFAYoBiAP/A+kDoAa+A6AD6Q+gA+kD/wGFAYoBiAOP
        A/8D/QP8A/sC/wH5AYcBmAH3AZ8BqgHnAXcBigH0AXABggHtAfYB9QHqAvEB7QLwBO0D/wOPMwABhQGK
        AYgD/w/sA9MBAgFZAY8BxgHqAe4BaQGqAc8BVgGDAaABAgFZAY8B7gHxAfQDAAGFAYoBiAP/A+kDoAa+
        A6AV6QP/AYUBigGIA48G/wP+A/sC/wH6AcAByQH5ATIBTwHzAUgBYAHvAegB6QHtAfYB9QHxAe4B7QHs
        A+oD6wP/A48zAAGFAYoBiAP/A9sPzAO3AQIBWQGPAccB6wHvAWoBrAHSAVcBhwGkAQIBWQGPAe4B8QH0
        AYUBigGIA/8D6QygA+kPoAPpA/8BhQGKAYgDjwn/A/0C/wH7AegB6gH6AR8BPwH3AbMBuwHtAf8B/gH0
        AvIB8wPxA+sD6AP/A48zAAGFAYoBiAP/FewD0wECAVkBjwHHAesB7wFqAawB0gFYAYQBogECAVkBjwGF
        AYoBiAP/JOkD/wGFAYoBiAOPCf8D/gL/Af0BvAHFAfoBIQFAAfQB3wHhAewB+wH6AfcD8wPyA/AD6QP/
        A48zAAGFAYoBiAPrAQABoAHEA7wBAAGgAcQDuAEAAaABxAO4AQABoAHEA7gBAAGgAcQBAgFZAY8BxgHq
        Ae4BcQGtAc8BAgFZAY8BhQGKAYgD/wPpEmwG6QagA+kD/wGFAYoBiAOPDv8B/gF8AY0B+gEGASgB9AHO
        AdMB7AH+Af0B+AP1A/MD8QPuA/8DjzMAAYUBigGIAQABoAHEAT0BsQHrAQABoAHEAT0BsQHrAQABoAHE
        AT0BsQHrAQABoAHEAT0BsQHrAQABoAHEAT0BsQHrAQABoAHEAQIBWQGPAQIBWQGPAdQB3wHmAYUBigGI
        A/8D6QZsA6AGbAOgBukGoAPpA/8BhQGKAYgDjw//AacBtAH6ATYBUwH1AeQB5wHyAv8B9wL8AfUC+gH0
        AvkB8gL3AfAD/wOPMwAB4QHiAeEBAAGgAcQBxgHoAfkBAAGgAcQBxgHoAfkBAAGgAcQBxgHoAfkBAAGg
        AcQBxgHoAfkBAAGgAcQBxgHoAfkBAAGgAcQJAAGFAYoBiAP/JOkD/wGFAYoBiAOPA/8C7AH/AugB/wLi
        Af8C4wH/AuAB/gHSAdQB/ALZAfoB1gHVAfgC1AH3AtMB9gLRAfUCzwHzA/8DjzYAAeQB8AHyAQABoAHE
        AeQB8AHyAQABoAHEAeQB8AHyAQABoAHEAeQB8AHyAQABoAHEAeQB8AHyAQABoAHEAeQB8AHyCQABhQGK
        AYgq/wGFAYoBiAOPA/8CmAH/AqAB/wJdAf8CMwH/AigB/wEcARsB/wIJAf8CAAH/AgAB/wIAAf8CAAH/
        AgAE/wOPYAABhQGKAYgBhQGKAYgBhQGKAYgBhQGKAYgBhQGKAYgBhQGKAYgBhQGKAYgBhQGKAYgBhQGK
        AYgBhQGKAYgBhQGKAYgBhQGKAYgBhQGKAYgBhQGKAYgBhQGKAYgBhQGKAYgwjzAAAUIBTQE+BwABPgMA
        ASgDAAFAAwABEAMAAQEBAAEBBQABgBcAA/8BAAGAAQMBgAEBAQABDwIAAYABAwMAAQcCAAGAAQMDAAEB
        AgABgAEBBgABgAEDBgABgAEBBgABgAECBgABgAECBgABgAEBBgABgAcAAYAHAAGABwABgAcAAYABBwYA
        AcABBwYAAv8GAAs=
</value>
  </data>
</root>