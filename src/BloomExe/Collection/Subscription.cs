using System;
using System.Linq;

public class Subscription
{
    public static string kExpiryDateForDeprecatedBrandings = "2025-07-01"; // per Cate. Careful! Make sure to use leading zeros in month and day.
    private SubscriptionTier? TierOverride;
    private DateTime ExpirationDateOverride = DateTime.MinValue;

    // These options must match the strings used in requiresBloomEnterprise.tsx
    public enum SubscriptionTier
    {
        None,
        Community,
        Enterprise
    }

    private readonly string _code;

    public Subscription(string code)
    {
        _code = code;
    }

    public string Code => _code;

    // From the subscription code extract the project name,
    // everything up to the second-last hyphen.
    private string GetBranding(bool forCheckSum = false)
    {
        if (_code == null)
            return "Default"; // enhance: maybe change everything to just empty string?
        var parts = _code.Split('-').ToList();
        if (parts.Count < 3)
            return "Default";
        parts.RemoveAt(parts.Count - 1);
        parts.RemoveAt(parts.Count - 1);
        var branding = string.Join("-", parts.ToArray());

        // allow for future community codes like HuyaVillage-LC-12335-3233434
        if (!forCheckSum && branding.EndsWith("-LC"))
        {
            return "Local-Community";
        }
        return branding;
    }

    public string BrandingKey
    {
        get { return GetBranding(false); }
    }

    // Parse a string like PNG-RISE-361769-363798 or SIL-LEAD-361769-363644,
    // generated by a private google spreadsheet. The two last elements are numbers;
    // the first is an encoding of an expiry date, the second is a simple hash of
    // the project name (case-insensitive) and the expiry date, used to make it
    // a little less trivial to fake codes. We're not aiming for something that
    // would be difficult for someone willing to take the trouble to read this code.
    public DateTime GetExpirationDate()
    {
        if (ExpirationDateOverride != DateTime.MinValue)
            return ExpirationDateOverride;

        if (_code == null)
            return DateTime.MinValue;

        if (_code == "Local-Community")
            return DateTime.Parse(kExpiryDateForDeprecatedBrandings);
        var parts = _code.Split('-');
        if (parts.Length < 3)
            return DateTime.MinValue;
        int last = parts.Length - 1;
        if (parts[last].Length != 4 || parts[last - 1].Length != 6)
            return DateTime.MinValue;
        int datePart;
        if (!Int32.TryParse(parts[last - 1], out datePart))
            return DateTime.MinValue;
        int combinedChecksum;
        if (!Int32.TryParse(parts[last], out combinedChecksum))
            return DateTime.MinValue;

        int checkSum = CheckSum(GetBranding(true));
        if ((Math.Floor(Math.Sqrt(datePart)) + checkSum) % 10000 != combinedChecksum)
            return DateTime.MinValue;
        int dateNum = datePart + 40000; // days since Dec 30 1899
        var date = new DateTime(1899, 12, 30) + TimeSpan.FromDays(dateNum);

        // At one time there were some subscriptions which never ended. Those have been retired.
        if (date.Year == 3000)
            return DateTime.Parse(kExpiryDateForDeprecatedBrandings);
        return date;
    }

    // enhance extract and normalize the date part
    public bool GetChecksumCorrect()
    {
        if (_code == null)
            return false;
        var parts = _code.Split('-');
        if (parts.Length < 3)
            return false;
        int last = parts.Length - 1;
        if (parts[last].Length != 4 || parts[last - 1].Length != 6)
            return false;
        int datePart;
        if (!Int32.TryParse(parts[last - 1], out datePart))
            return false;
        int combinedChecksum;
        if (!Int32.TryParse(parts[last], out combinedChecksum))
            return false;

        int checkSum = CheckSum(GetBranding(true));
        if ((Math.Floor(Math.Sqrt(datePart)) + checkSum) % 10000 != combinedChecksum)
            return false;
        return true;
    }

    public bool IsExpired()
    {
        if (_code == null)
            return true;
        var date = GetExpirationDate();
        if (date == DateTime.MinValue)
            return true; // invalid code
        return date < DateTime.Now;
    }

    public bool LooksIncomplete()
    {
        if (_code == null)
            return true;
        var parts = _code.Split('-');
        if (parts.Length < 3)
            return true; // less than the required three components
        int last = parts.Length - 1;
        int dummy;
        if (!Int32.TryParse(parts[last - 1], out dummy))
            return true; // If they haven't started typing numbers, assume they're still in the name part, which could include a hyphen
        // If they've typed one number, we expect another. (Might not be true...ethnos-360-guatemala is incomplete...)
        // So, we already know the second-last part is a number, only short numbers or empty last part qualify as incomplete now.
        // Moreover, for the whole thing to be incomplete in this case, the completed number must be the right length; otherwise,
        // we consider it definitely wrong.
        if (
            parts[last - 1].Length == 6
            && parts[last].Length < 4
            && (parts[last].Length == 0 || Int32.TryParse(parts[last], out dummy))
        )
            return true;

        return false;
    }

    // Must match the function associated with the code generation google sheet
    private int CheckSum(string code)
    {
        var sum = 0;
        code = code.ToUpperInvariant();
        for (var i = 0; i < code.Length; i++)
        {
            sum += code[i] * i;
        }
        return sum;
    }

    public string GetIntegrityLabel()
    {
        if (String.IsNullOrWhiteSpace(_code))
        {
            return "none";
        }
        if (LooksIncomplete())
        {
            return "incomplete";
        }
        if (!GetChecksumCorrect())
        {
            return "invalid";
        }

        return "ok";
    }

    public SubscriptionTier Tier
    {
        get
        {
            if (TierOverride != null)
                return TierOverride.Value;
            var branding = GetBranding();
            if (string.IsNullOrWhiteSpace(branding) || branding == "Default")
                return SubscriptionTier.None;
            else if (
                branding == "Local-Community" || branding == "Local Community" /* pre 4.4 */
            )
                return SubscriptionTier.Community;
            else
                return SubscriptionTier.Enterprise;
        }
    }

    public static Subscription FromSettingsXml(string code, string brandingForMigration)
    {
        if (
            string.IsNullOrWhiteSpace(code)
            && (
                brandingForMigration == "Local-Community"
                || brandingForMigration == "Local Community"
            )
        )
        {
            // migrating to actual code
            code = "Legacy-LC-005809-2533";
        }

        return new Subscription(code);
    }

    public string Personalization
    {
        // everything before the -LC- is the personalization code, e.g. "Foobar-Village". Replace dashes with spaces.
        get { return _code.Substring(0, _code.IndexOf("-LC-")).Replace("-", " "); }
    }

    // Enhance: soon we will devide up these so that they don't have exactly the same set of features
    public bool HaveActiveSubscription =>
        Tier == Subscription.SubscriptionTier.Enterprise
        || Tier == Subscription.SubscriptionTier.Community;

    internal bool IsDifferent(string code)
    {
        if (string.IsNullOrEmpty(_code) && string.IsNullOrEmpty(code))
            return false;
        return _code != code;
    }

    // Since normally all info comes from the code, this allows us to ignore the code and just set what we need.
    // If a unit test breaks because of an expired subscription, consider fixing it by using this method or one like it.
    public static Subscription ForUnitTestWithOverrideTierOrBranding(
        SubscriptionTier tier,
        string brandingKey
    )
    {
        var subscription = FromSettingsXml("", brandingKey);
        subscription.TierOverride = tier;
        subscription.ExpirationDateOverride = DateTime.Now.AddDays(1);
        return subscription;
    }

    // Since normally all info comes from the code, this allows us to ignore the code and just set what we need.
    // If a unit test breaks because of an expired subscription, consider fixing it by using this method or one like it.
    public static Subscription ForUnitTestWithOverrideBranding(string brandingKey)
    {
        var subscription = FromSettingsXml("", brandingKey);
        subscription.ExpirationDateOverride = DateTime.Now.AddDays(1);
        return subscription;
    }

    internal static Subscription ForUnitTestWithOverrideTier(SubscriptionTier tier)
    {
        var subscription = new Subscription("");
        subscription.TierOverride = tier;
        return subscription;
    }
}
