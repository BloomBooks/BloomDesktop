<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="imageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAABK
        IAAAAk1TRnQBSQFMAgEBAwEAAQgBAAEIAQABIAEAASABAAT/ARkBAAj/AUIBTQE2BwABNgMAASgDAAGA
        AwABIAMAAQEBAAEYBgABMH4AA/8//gb/MAAB7QHuAe0BzwHTAdED75wAA/4D/T/7BvwD/gP/CQAD/gP7
        A/YD9T/yA/QD9QP4A/0qAAEhATsBLgFYAYEBcQE5AWoBUwFUAWUBXQGpAa0BqwP9jQAD/QP4A/ID7gPs
        POsD7QPsA+8D9AP7A/8D/gOyA0ctQg9DDEQDSQOlA/ID+gP/IQABrAGvAa4BTAGXAXMBrAHCAcEBnwG1
        AbQBhgGkAZwBcQGWAYoBWAFyAWgBZwGAAXUBtQG/AboB0wHWAdQD9n4AA/4D+QPyAbQCtQNfQlkDXAOm
        A+sD9Ab8A0sDy0jMA8YDUAPuA/YD/R4AA/4BRAGHAWcBTQGYAXQBvgHMAcsBugHKAckBtgHHAcYBsgHF
        AcQBrgHDAcIBqgHAAb8BdQGQAYkBVQGCAW8BOwFjAU8BXwFsAWcByAHKAcl4AAP/A/oDwgNoSGcDaAO3
        A/UD+wP9A08DzkWkA6UDzgNVA/ID+QP+HgABPwFdAU4BTQGYAXQBTQGYAXQBzwLXAcwB1QHUAcgC0gHE
        AdABzwHAAc4BzQG8AssBuAHJAcgBtAHHAcYBogG2AbQBigGmAZ8BcQGRAYYBXQF1AWwBdAGKAYABwgHI
        AcYB1wHZAdgD+mwAA/4DbwHZAtsB4gLkAeEC4wHgAuIB3wLgAd4C4AHdAt8B3ALdAdsC3QHaAdsB3AHZ
        AtoB2ALaAdcB2AHZAdYB1wHYAdUC1wHUAdUB1gHTAdQB1QHSAtQB0QHSAdMB0AHRAdIBzwLRAc4BzwHQ
        Ac0BzgHPAcsBzQHOAcsBzAHNAcEBwwHEA2sD+wP/AwADZAP2Ifgn9wP1A2QD+gP+HgABoAGjAaEBTQGY
        AXQBTQGYAXQBTQGXAXQD1gHeAt8B2gLdAdYC2gHSAtgBvAHEAcMByALRAcYC0QHCAc8BzgG/AswBuwLK
        AbcByAHHAbMBxgHFAXgBkgGLAVUBgQFuAUABYwFTAWsBdQFyA+BpAANnAecC6AHYAtoB1wLZAdYC2AHU
        AtYB0wLVAdIC1AHQAtIBzwLRAc0BzwHQAcwCzgHLAs0ByQHLAcwByAHKAcsBxwLJAcUBxwHIAcQBxgHH
        AcMCxQHBAcMBxAHAAcIBwwG/AsEBvQG/AcABvAG+Ab8BugG8Ab0BuQG7AbwB0AHRAdIDZwkAA3wD5gPn
        BuYP5QzkD+MP4gPhBuMDfCEAA/YBOgFuAVUBTQGYAXQBTQGYAXQBSwGTAXABngKfA6sBtgK3AcICwwHN
        As4B0QLTAcECwwHCAsUBvwLDAbkBwAG/AbUCvAG+AscBxQHRAdABwQLOAb0BzAHLAZYBpgGkAXYBkAGI
        AXABjgGEAV4BaAFjZgADZwHqAusB2ALaAdcC2QHWAtgB1ALWAdMC1QHSAtQB0ALSAc8C0QHNAc8B0AHM
        As4BywLNAckBywHMAcgBygHLAccCyQHFAccByAHEAcYBxwHDAsUBwQHDAcQBwAHCAcMBvwLBAb0BvwHA
        AbwBvgG/AboBvAG9AbkBuwG8AdYC1wNnCQADkAPhA+gJ5w/mD+UM5A/jA+UD3gOTIQABHgExAScBTQGY
        AXQBNAFiAU4BMwFdAUwBHAE5ASsBIQEsASYBPwFEAUEDdwGKAosBlgKXAaICowGuAq8BugK7AcYCxwHS
        AtMB3gLfAcACwgGkAqcBnwKjAcwC0wHLAtQBxwHSAdEBiwGVAZQD5mYAA2cB7QLuAdgC2gHXAtkB1gLY
        AdQC1gHTAtUB0gLUAdAC0gHPAtEBzQHPAdABzALOAcsCzQHJAcsBzAHIAcoBywHHAskBxQHHAcgBxAHG
        AccBwwLFAcEBwwHEAcABwgHDAb8CwQG9Ab8BwAG8Ab4BvwG6AbwBvQG5AbsBvAHcAt0DZwkAA6QD2wPr
        D+gG5wPlA+ED3APYA9YD1QPXA9gD3APhA+MD5QnkA+cD2QOkHgABuQG8AboBSwGTAXEBRgGJAWkBPAEp
        AU8BcgFxAYgBSwFIAVwBQgFFAVgBLwFHAUUBIAE1AS8BLQFRAUABNQFRAUQBSAFTAU0BVgFbAVgBbgFw
        AW8DjQGVA5YClwGhAaIBoQG/AsABywLMAbYCtwG4ArkBuwK+AbgCvAP7ZgADZwHwAvEB2ALaAdcC2QHW
        AtgB1ALWAdMC1QHSAtQB0ALSAc8C0QHNAc8B0AHMAs4BywLNAckBywHMAcgBygHLAccCyQHFAccByAHE
        AcYBxwHDAsUBwQHDAcQBwAHCAcMBvwLBAb0BvwHAAbwBvgG/AboBvAG9AbkBuwG8AeEB4gHjA2cJAAO1
        A9YD7QPqDKcDpAGKAZABkwF4AZABnAGAAZMBngGbAaUCqwGuAbADrgOpA6wDswO6A8MDywPWA+EG5QPp
        A9UDth4AAT0BeQFcAU0BmAF0AR4BFwEoAV0BPgF6AagBvwG+AaYBvgG9AaMBugG5AXQBeQGIAWIBUgF6
        AUABMQFVASYBMgE2ATcBbAFUAT0BgwFhASABUgE6ARYBKwEgASIBLAEnAUsBTQFMA3oDagNyAY4BjwGO
        A6sBtwK4AcMCxAP9ZgADZwPzAaYCpwNrDmYBZwJmAWcnZgNrAZUClwG5AbsBvAHnAugDZwkAA8YD0gPu
        CesG6gPmA94BawGIAZYBDAFBAVwBFQFJAWQBEQFGAWIBEgFHAWMBJAFVAW4BRwFuAYABngGnAawDxAPL
        A9ED2QPiA+cD5gPqA9ADxRsAAU4BZAFZAU0BmAF0ATABUQFHAXEBSwGUAVoBPAF2AbUBxwHGAbMBxgHF
        AbABxAHDAa4BwwHCAasBwQHAAZQBpAGnAYoBkAGgAWwBagGBAUsBTAFeAUIBSgFZAToBXgFUAS8BXgFK
        ATEBagFOASsBWQFDAScBTQE7ATQBSgE/AUgBUgFNAUsBTwFNA2MDfAP+ZgADZwP2AYwCjQHsAe0B7gHk
        AeUB5gHpAesB7AH1AfYB9wH1AfYB9wH1AfYB9wH1AfYB9wH1AfYB9wH1AfYB9wH1AfYB9wH1AfYB9wH1
        AfYB9wH1AfYB9wH1AfYB9wH1AfYB9wH1AfYB9wH1AfYB9wH1AfYB9wH1AfYB9wH1AfYB9wHsAe0B7gGE
        AoUBuQG7AbwB7QLuA2cJAAPTA80D8APsFakBYgF7AYcBGgFPAWoBcgGxAcwBhgHBAdYBeAGxAccBGgFh
        AYYBEwFIAWQBMgFdAXMBggGOAZUDpwmmA+gD7QPMA9QYAAHIAcoByQFNAZgBdAFLAZMBcAFmAUQBhgF0
        AU0BmAFWATkBcQHCAs4BvwHNAcwBvQLLAboBygHJAbgCyAG1AccBxgGzAcYBxQGxAcQBwwGuAcMBwgGl
        AbkBuAF0AXcBiAFdAUwBdAE1AS0BRgEnATYBNwE+AXsBXgFNAZgBdAE6AX8BXgEnAWYBRwEfAUcBMgEt
        AT4BNAG4AbsBumYAA2cD+QHTAtUC8QHyAckCygHhAeMB5ALwAfEC8AHxAvAB8QHvAfAB8QLvAfEC7wHw
        Au8B8ALvAfAB7gHvAfAB7gHvAfAC7gHvAu4B7wLuAe8B7QHuAe8C7QHvAu0B7gLtAe4B7AHtAe4BwwLE
        AbkBuwG8AvMB9ANnCQAD3gPKA/ID7gztDOwBhwGgAawBGQFRAW0BjQHCAdIBpAHWAeQBJwGSAcwBHwGF
        AbwBFwFkAYsBFgFNAWoBNQFkAXwBpwG3Ab8D6AbpA+4DyQPdFQAD+gE2AWQCTQGYAXQBOwEuAU4BdAFN
        AZgBdAFNAZgBUwE3AW0BzgLWAcwB1QHUAcoC0wHHAdIB0QHFAtABwgHPAc4BwAHOAc0BvQHMAcsBuwHL
        AcoBuQHJAcgBtgHIAccBtALGAZABnAGgAYkBiwGdAWcBZQF5AUsBTAFeAUEBUAFZATsBYgFWAUIBgwFl
        AT8BaAFVAbQBtwG2ZgADZwP8AeIC5AHnAukBzALNAdQC1QHmAucB5QLmA+UB5ALlAeMB5AHlAeIC4wHh
        AuMC4QHiAeAC4QHgAuEB3gLgAd4B3wHgAd0C3gLdAd4B3ALdAdwC3QHaAtwB2QHbAdwBzAHNAc4BxwLJ
        A/oDZwkAA+UDxAPzA+8DrA+rCaoBYwF8AYgBFAFLAWYBUAGVAbkBawG1AdwBRgGiAdQBJQGSAcwBIAGJ
        AcABFwFnAZEBFQFOAWsBIAFRAWoBbwGDAY0B5QHmAecD8APCA+QVAAEeAS4BJgFNAZgBdAEhAi4BdAFN
        AZgBdAFNAZgBdAFNAZgBTwE1AWgB2wLdAdgC3AHWAtoB1ALZAdEB2AHXAc8C1gHMAdUB1AHKAtMBxwHS
        AdEBxQLQAcMBzwHOAcACzQG+AcwBywGeAqoBkAKbAYwBmAGbAacBuAG3AXcBdQGJASsBKAEyA/1pAAN7
        A/0e/ir9A/wBcwJ0CQAD6wO9A/QJ8A/vCe4BpQG2Ab8BKQFaAXIBHwFZAXcBTAGQAbUBbQG0AdwBSgGk
        AdQBKAGTAcwBIQGLAcUBGAFsAZcBGQFVAXMBHwFRAWwBjAGkAbABtQK4A+oSAAHFAcgBxgFIAY4BbQE8
        AXABWQFgAUABfQF0AU0BmAF0AU0BmAF0AU0BmAE2ASQBRwFQAUMBXQFsAWgBcQGDAYIBhgGYApkBvwLA
        AdIC1QHZAd0B3AHXAtsB1AHaAdkBzALSAc8B1wHWAc0C1QHLAtQByAHTAdIBsAK6AcMBzwHOAagBsgG0
        AaQBrwGwA/FsAAbPBvsDmzaiA5ID5wPtA8ID0AkAA/EDtwP2A/EMrRWsAasCrAF5AYoBkwElAVUBbQEc
        AVQBcAFIAY0BsQFuAbcB3AFOAaYB1QEqAZQBzQEhAY0BxwEZAXABnQEZAVgBeAEWAUoBZQGfAbEBuQP7
        DwABNAFmAU4BTQGYAXQBOgEoAUsBdAFNAZgBdAFNAZgBdAFNAZgBIQEWASsBdQFOAZkBRQEwAVQBUQE2
        AWcBZgFBAYcBOgEiAVEBIgEZASoBKQElAS0CUQFSA5EBugK7AcACwQGsAa0BrgGlAacBqAG2AbkBugHU
        AdoB2QHMAtIBkAGTAZUBiAGMAY0BjgGUAZNvAAP+A4kD6wP7A4kDuQasCa0PrAytBq4DuQOFA/ED4QOQ
        A/4JAAP2A68D9wPzD/IP8QnwA+8BrQG8AcQBNAFjAXsBHAFUAXABRAGIAawBbgG1AdsBUgGoAdYBLAGV
        Ac0BIgGPAckBcQGHAbkBLwFYAYQBGgFNAWkBowG2Ab8D/QkAAU0BmAF0AS8BQAFDAXQBTQGYAXQBTQGY
        AXQBTQGYAUUBLgFaAW4BSwGOAU8BNwFeAVUBQQEsAX8BgwF4AV0BWQFUAVcBTAFKAVYBQQJOATQBVAE1
        ASIBPgEzASMBQAE/ASsBUAFBATYBSwFOAUkBUgFpAWcBawKDAYQCewF9AoUBhgGpAaoBqwG6ArsBtAK5
        cgAD8QN9A2cDiQPgCcMPxAzFDMYD4AOJA2cDgQP0DAAD+gOkA/gJ9AzzD/IP8QGzAcEByQE7AWgBfwEa
        AVEBbQFBAYUBqQFvAbYB2wFYAaoB2AHGAcsB5QKwAdsBFwEeAd8BGAFJAYcBiQGiAbAJAAE+AXkBXQFz
        AUwBlgF0AU0BmAF0AU0BmAFVATgBbwF2AVIBlwFlAUYBgQGHAWcBRAF0AVgBOwGpAb8BvgGmAb4BvQGm
        Ab4BvQGjAbsBugF9AYYBfwF5AXMCYgFRAT0BQwEyAS0BNwEnATEBPwEqAUwBRwEpAWQBLQEYAUABIgEb
        ASkBKwEnAS8DRwNWAWACYXsAA4kD8gbXCdgJ2QnaCdsG3APyA4kVAAP+A5oD+QP1CbAPrwOuCfMP8gPx
        AboBxwHNAUIBbQGDARkBTwFrAXMBlwGwAeQB6AHqAbcBuAH3AmYB/wE8AT4B+AEVAUkBZAYAA/wBRwEx
        AV4BdAFNAZgBdAFNAZgBVgE5AXABVwE+AW8BXgFDAXEBaQFQATgBmAF0AU0BbgFVATgBtQLHAbMBxgHF
        AbACxAGuAcMBwgGsAcIBwQGqAcABvwGoAb8BvgGTAaMBnwGAAYYBfgJyAWcBYQFcAVUBWQFPAUsBUgE/
        AUMBRQEtAUMBMwEkATgBNAEmAToBNwEnAUMB2AHXAdh4AAOJA/gD7wnwBvEPpwPvA/MJ9AP4A4kYAAOa
        A/gP9g/1D/QM8wbyAcQBzwHUAUsBdQGKARcBSwFnAWEBhwGvAbYBugHzAVcBeAG8AVkBgAGTBgABMQEq
        ATYBdAFNAZgBdAFNAZgBdAFNAZcBTgE4AWMBdgFVAZUBeAFcAT4BmAF0AU0BmAF0AU0BaAFQATUBwgLO
        Ab8BzQHMAb0CywG7AcoByQG4AckByAG2AccBxgGzAcYBxQGxAcQBwwGuAcMBwgGsAcEBwAGFAZcBlQF+
        AY4BjQF+AY4BjQF+AYgBgwF6AXYBZQFtAVsBRQFRAT4BLgFZAVMBTAGkAaEBoHUAA4kD+AP9CdwG2w+n
        A/cM/AP4A4kYAAOjA/QD+AOyG7EPsA+vA/MD8QGHAZABlQGAAZwBqgEfAVEBawFJAXEBiAH0AfUB9gMA
        AcMBwgHFAW4BSQGQAXQBTQGYAW8BSgGSAUkBNQFcAWsBTgGCAWUBTQE6AZgBdAFNAZgBdAFNAZgBdAFN
        AWQBTQE0Ac8C1gHMAtUBygLTAccC0gHFAdEB0AHCAs8BwAHOAc0BvgLMAbsBywHKAbkCyQG2AcgBxwG0
        AsYBsAHDAcIBmQGpAagBlgGnAaYBkgGkAaMBfQGIAYQBeQF+AXUBXwFTAUV1AAOJDPgD5AOpFacDwwn3
        A/gDiRgAA64D7wn5D/gP9wz2DPUD9gPtA6wPAAFcAT0BeQF0AU0BmAF0AU0BmAEfARcBKAGFAWIBpgFl
        AU4BOAGYAXQBTQGYAXQBTQGYAXQBTQGYAXQBTQFeAUkBMgHbAt0B2QLcAdYB2wHaAdQC2QHRAdgB1wHP
        AtYBzAHVAdQBygLTAcgB0gHRAcUC0AHDAc8BzgHAAs0BvgHMAcsBuwHLAcoBpQGzAbIBtwHIAccBtAHG
        AcUBsgHFAcQB1QLXdQADiQP4A/MJ1APDEqcDrgPRA9MG8gP4A4kYAAO3A+sD+hizD7IVsQP3A+kDtg8A
        AXQBTQGYAXQBTQGYAUUBMQFZAXcBWQGQAWIBSgE7AZgBdAFNAZgBdAFNAZgBdAFNAZgBdAFNAZEBbwFK
        AT4BLwEfAVcBTgFEAXABawFmAYYBgwGAAYgBhwGFAYkBiwGKAa0CrwHBAcQBwwG9AsABugK/AbgBvQG8
        AbgCvwHNAtUBswK7Aa8BuAG3AaIBqwGpAaABqQGoAZ8CqQGjAawBqwPfdQADiQP4D+4DxgynA6kD4gnu
        A+0D+AOJGAADwQPmA/wP+w/6DPkP+AP3A/gD4wPADwABdAFNAZgBOwEqAUoBkQFuAbIBUwE/ATEBmAF0
        AU0BmAF0AU0BmAF0AU0BmAF0AU0BlAFxAUsBKQEfARUBmgF2AVABmQF1AU4BmAF0AU0BjAFpAUQBeQFZ
        ATYBUgE6ASABNQEnARcBKQEiARkBNQExASwBXwFcAVoBrAKtAdIC1AGjAaUBpAGfAaIBoQGcAZ8BngGy
        ArcBrQGxAbABmwKgAZkCngPcdQADiQP4A+oGzAnLA7IJpwO+CcsG6QP4A4kYAAPLAdcB2AHXA/gB9gL3
        AfUC9gH1AfYC9QH2B/UP9AbzAfIC8wHyAvMB8gHzAfIB8QHyCvED8gHWAtcDyg8AAUwBNQFjAW8BVQGE
        AWEBSgE/AZgBdAFNAZgBdAFNAZgBdAFNAZgBdAFNAWIBSwEyAWQBTwE5AaABfwFbAaABfgFZAZ8BfQFY
        AZ4BfAFXAZ0BewFVAZwBegFUAZsBeAFSAZoBdwFRAZcBdAFOAY4BbAFHAX4BXwE8AWwBUQE0AWIBSwEy
        AVwBRwExAWABTwE8AW8BYwFXAXgBcQFrAWwBagFnAXIBcQFvAX0BfwF+AdIC03UAA4kD+BLlA+EDsgOn
        A74S5AP4A4kYAAPWAcUBxwHFAa4BswGxAZ0BogGgAUQBiQGWAQkBdAGMAUQBiAGVAUMBiAGVAQkBdAGM
        AUIBhwGUAUIBhwGUAQgBdAGMAUEBhgGTAUABhQGSAQgBdAGLAT8BhAGRAT8BhAGRAQgBdAGLAT4BggGQ
        AT4BggGPAQgBdAGLAT0BgQGOAYgBjAGKAZ0BoQGgAbQBtQG0A9MPAAFKAT8BWAE/ATEBKAGYAXQBTQGY
        AXQBTQGYAXQBTQGYAXQBTQE9AS8BHwGcAX8BYAGnAYgBZgGmAYYBZAGlAYUBYwGlAYQBYQGkAYMBYAGj
        AYIBXgGiAYEBXQGhAYABWwGgAX4BWgGfAX0BWQGeAXwBVwGdAXsBVgGcAXoBVAGcAXkBUwGbAXcBUQGa
        AXYBUAGZAXUBTwGYAXQBTQGPAWwBRgF+AV0BOQFeAUMBJgE+ATMBKHUAA4kD+APgEsMDvwOuA8IMwwbg
        A/gDiRgAA90BwgHEAcMBsQG1AbQBnQGiAaABAQFwAYkBRwHcAfABAQFwAYkBAQFwAYkBRwHcAfABAQFw
        AYkBAQFvAYkBRwHcAfABAQFwAYkBAQFvAYkBRwHcAfABAQFwAYkBAQFvAYkBRwHcAfABAQFvAYkBAQFv
        AYkBRwHcAfABAQFvAYkBiAGMAYoBoQGlAaMBsQGzAbID3A8AA/oBmAF0AU0BmAF0AU0BmAF0AU0BhAFl
        AUMBXQFLATcBnQGCAWYBrgGRAXEBrQGQAW8BrAGPAW4BqwGNAWwBqgGMAWsBqgGLAWkBqQGKAWgBqAGJ
        AWYBpwGIAWUBpgGGAWQBpQGFAWIBpAGEAWEBowGDAV8BogGCAV4BogGBAV0BoQGAAVsBoAF+AVoBnwF9
        AVgBmwF5AVUBfwFoAU8BhgF2AWQBvQG4AbMB1AHTAdJ1AAOJA/gw4AP4A4kYAAPmAbcBuQG4AckBywHK
        AcgBywHKAQABbwGIAU8B6QH8AQABbwGIAQABbwGIAU8B6QH8AQABbwGIAQABbwGIAU8B6QH8AQABbwGI
        AQABbwGIAU8B6QH8AQABbwGIAQABbwGIAU8B6QH8AQABbwGIAQABbwGIAU8B6QH8AQABbwGIAbwBvwG9
        AbsBvgG9AagBqwGqA+QSAAGYAXQBTQGYAXQBTQGEAWUBQwFCATkBLQG2AZoBfQG1AZkBewG0AZgBegGz
        AZcBeAGyAZYBdwGxAZUBdQGwAZMBdAGwAZIBcwGvAZEBcQGuAZABcAGtAY8BbgGsAY4BbQGrAY0BbAGq
        AYsBagGpAYoBaQGoAYkBZwGnAYgBZgGnAYcBZAGXAXoBWgFlAVoBUQGQAY0BigP4fgADjDb4A4wYAAP8
        A60BlQGWAZUBlAKVAQEBcAGIAUcB3AHwAQEBcAGIAQEBcAGIAUcB3AHwAQEBcAGIAQEBcAGIAUcB3AHw
        AQEBcAGIAQEBcAGIAUcB3AHwAQEBcAGIAQEBcAGIAUcB3AHwAQEBcAGIAQEBcAGIAUcB3AHwAQEBcAGI
        AZACkQGQAZEBkAOqA/wSAAGYAXQBTQFfAUsBMwF7AWoBWQG9AaQBiAG8AaIBhgG7AaEBhQG6AaABgwG5
        AZ8BggG4AZ4BgQG3AZ0BfwG2AZsBfgG1AZoBfAG1AZkBewG0AZgBeQGzAZcBeAGyAZYBdwGxAZUBdQGw
        AZMBdAGbAYEBZQGHAXUBYwGgAZUBigHOAcwByQLhAeAD/oQAA80DizCJA4sDzSQAAaABxwHPARYBfQGT
        AaABxwHPAaABxwHPARYBfQGTAaABxwHPAaABxwHPARYBfQGTAaABxwHPAaABxwHPARYBfQGTAaABxwHP
        AaABxwHPARYBfQGTAaABxwHPAaABxwHPARYBfQGTAaABxwHPHgABLgEmAR4BwQGqAZIBwwGsAZIBwwGr
        AZEBwgGqAZABwQGoAY4BwAGnAY0BvwGmAYsBvgGlAYoBvQGkAYgBvAGjAYcBuwGhAYYBuwGgAYQBugGf
        AYMBuQGeAYEBuAGdAYABhAFwAV0BcQFrAWYDy/8ARQAD/wLhAeAC3QHcAdsE2gLZAdgC1wLWAdcB1QHU
        AdUB1ALTAdIB0QHTAdEB0AHRAdABzgHQAc4CzAHKAccByAHFAcIBxQHBAb0B1AHTAdID8v8A/wAJAAFC
        AU0BPgcAAT4DAAEoAwABgAMAASADAAEBAQABAQYAAQIWAAP/AQAE/wHwAgABDwH/AfEC/wQAAeACAAED
        AYACAAEDAf8B8AE/Af8EAAGABwAB/wHgAQMB/wwAAf8BwAEAAf8MAAH/AcABAAEHBAABgAMAAYACAAEB
        Af8BgAEAAQEEAAHAAgABAwGAAgABBwH/BwABwAIAAQMBgAIAAQcB/wcAAcACAAEDAYACAAEHAf4HAAHA
        AgABAwGAAgABBwH+BwABwAIAAQMBgAIAAQcB/AcAAcACAAEDAYACAAEHAfgHAAHAAgABAwGAAgABBwHw
        BwABwAIAAQMBgAIAAQcB8AIAAQEEAAHAAgABAwGAAgABBwHgAgABAwQAAcACAAEDAYACAAEDAeACAAEH
        BAABwAIAAQMBgAMAAeACAAEHBAAB4AIAAQcBgAMAAeACAAEHBAAB/AIAAT8BgAMAAcACAAEDBAAB/AIA
        AT8BwAMAAcACAAEBBAAB/AIAAT8BwAMAAYACAAEBBAAB/AIAAT8BwAIAAQ8BgAIAAQEEAAH8AgABPwHA
        AgABDwGAAgABAQQAAfwCAAE/AcACAAEPAYACAAEBBAAB/AIAAT8BwAIAAQ8BgAIAAQEEAAH8AgABPwHA
        AgABDwGAAgABAQQAAfwCAAE/AcACAAEPAYACAAEBBAAB/AIAAT8BwAIAAQ8BwAIAAQ8EAAH8AgABPwHA
        AgABDwHAAgABPwQAAfwCAAE/AfwCAAH/AcABAAEHAf8EAAj/AYABAAEfAf8EAAz/BAAL
</value>
  </data>
</root>