@import "basePage-sharedRules.less";
@import "bubble.less";
@import (reference) "../../BloomBrowserUI/bloomUI.less"; // importing by reference only brings in the constants
// NOTE: more style sheet imports are at the end of this document,
// ones that should supersede the normal rules

@import "pageBoxesSizing.less";
@import "marginBox.less";
@import "pageNumbers.less";

// TODO: replace with variable
// no units! No em!!!! em makes children inside have a lineheight that matches the font of the overall box, regardless of the thing's font-size. See https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
// However, when you use it as anything BUT a line-height (e.g., min-height), remember to multiply by 1em, otherwise it
// will be ignored.
@defaultLineHeight: 1.5;

.Browser-Reset() {
    /*+init {*/
    * {
        position: relative;
        margin: 0;
        padding: 0;
        font-size: 1em;
    }

    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    th {
        font-weight: inherit;
    }

    address,
    dfn,
    var {
        font-style: inherit;
    }

    caption,
    code,
    kbd,
    pre,
    samp,
    tt,
    input,
    textarea,
    select,
    button {
        font-family: inherit;
    }

    table {
        border-spacing: 0;
    }

    th {
        text-align: left;
    }

    html,
    body,
    thead,
    tbody,
    tfoot,
    tr,
    th,
    td,
    br {
        position: static;
    }

    input[type="hidden"] {
        display: none !important;
    }

    fieldset,
    a img {
        border: 0;
    }

    body {
    }
}

.Browser-Reset();

// bloom-player uses a scoped style element, so everything on body is ignored. Must be applied to
// div.bloomPlayer-page also in order to be WYSIWYG in bloom-player.
body,
div.bloomPlayer-page {
    /*
    We used to set font-size slightly larger in editPaneGlobal.less, to handle a mismatch between webkit
    pdf generation and geckofx edit mode. That no longer seems to be necessary and the Browser-Reset() above
    sets a base font-size of 1em, which seems to be used everywhere. Inexplicably, if we remove this rule
    font-sizes everywhere jump up about 3px in size, so we'll leave this one here.
    */
    font-size: 10pt;
}

// When making a thumbnail for a template page, add a kind of text mockup to text areas
.bloom-templateThumbnail {
    // template page thumbnail shouldn't have scrollbars (see BL-11855)
    overflow: clip;

    // template page thumbnail shouldn't have a page number
    .numberedPage:after {
        display: none;
    }

    .bloom-translationGroup {
        // Height in ems so it is sensitive to font size. The '1 transparent/3 grey' here is not necessarily
        // ideal, and was just arrived at through experimentation, balancing accuracy
        // (how many lines of text really fit in this box) with visual appeal.
        // There's often an incomplete 'line'. "To bottom" puts it at the bottom.
        // Read as: start transparent, stay transparent to 1em, switch abruptly to grey at 1em,
        // stay grey out to 4em, then repeat (which will mean an abrupt transition back to transparent).
        background: repeating-linear-gradient(
            to bottom,
            transparent,
            transparent 1em,
            grey 1em,
            grey 4em
        );
        padding: 1em 0em; // text usually doesn't go to the outermost edges.
        box-sizing: border-box;
        // Makes background respect padding. However, the pattern still BEGINS at the outermost edge;
        // hence, we put the transparent at the start, so the first 1em transparent is clipped.
        // Something more complicated may be needed to make the first line full-width if the amount of padding
        // is not equal to the gap between lines.
        background-clip: content-box;

        // Don't show any text that might be in the text block.
        color: transparent;
        // BL-6582 But do display the div, because otherwise the text mockup won't show.
        display: flex;

        gap: var(--multilingual-editable-vertical-gap);
    }
}

/* gridItem means this is a page thumbnail */
.gridItem {
    .pageOverflowsIcon {
        /* red triangle with exclamation point */
        background-image: url("/bloom/images/Attention.svg");

        background-position: bottom;
        background-repeat: no-repeat;
        background-size: 70%;
        z-index: 3; // Should be above split-pane-component and split-pane-divider
        height: 100%;
    }
}

div.ui-tooltip-content {
    overflow: visible !important;
    font-size: 10pt;
    padding: 0px 9px;
}

.uibloomSourceTextsBubble .ui-tooltip-content {
    /*This minimum height is for picture dictionary where the height of the target box is just one line high, not enough to show the language tabs at the top and then the content below*/
    min-height: 60px !important;
}

.bloom-imageContainer {
    // Was 50px until 6.1. Now we support making very small draggable images in games, so that's too big.
    // Then we tried 10px with the idea that it could at least be grabbed. We may make a separate dragging affordance like
    // Canva for very small imagesto help with that. But any min-height causes weird behavior when cropping
    // makes the bubble smaller than the image-container is allowed to be. So try not setting one at all.
    // We also have code to prevent them getting smaller than 30px, but setting an actual CSS min-height is problematic
    // when the cropping code is trying to compute very exact sizes. I think we're better off without a min-height.
    // However, when imageContainer has no height or min-height set at all, for some reason auto-sizing it with
    // flex-grow (e.g., on the cover page) combined with auto-sizing the image inside it with content-fit doesn't work.
    // A min-height of zero somehow fixes that without interfering with cropping. So that's what we're doing for now.
    min-height: 0;
    border-radius: var(--image-border-radius);
    // image containers are ordered by document order so they can NOT be a stacking context,
    // allowing their child buttons to be over the comicaljs canvas
    //z-index: 100;
}

p {
    //without this, an empty paragraph will be invisible, making blank lines impossible
    //but we also want to make sure that an empty paragraph is the same height as other lines...
    //especially since in the Edit Page (but not in Publish to Reader preview, bloom-player, etc),
    //CKEditor will insert a <br> element (making it take up the line-height) whereas without the <br>,
    //it would take up the min-height
    min-height: @defaultLineHeight * 1em;
}

textarea,
.bloom-editable {
    resize: none;
    /*don't show those cute little resize controls in Firefox 4 and greater*/
    overflow: visible;
    // this is just... bogus! removing it will cause some problems, but.. but... font-size: 143%;
    line-height: @defaultLineHeight;
    min-height: @defaultLineHeight * 1em + 0.3em;
    width: 100%;
    // We want the bloom-editables to fill the containing bloom-translationGroup,
    // so that the boxes around them give an idea of how much space is available
    // when the translationGroup has a fixed size. This pair of properties allows
    // each bloom-editable to grow proportionally to fill the space (including
    // filling it all if there is only one).
    height: auto;
    flex-grow: 1;
    // We need this if appearance rules may set border or padding and yet we want to
    // use width: 100% (above). Otherwise, the border or padding will make the box
    // overflow its parent.
    box-sizing: border-box;
}

/* The following has been split out from the above rule because it should probably be removed,
    but at this point we are about to go release candidate with 3.1 so it will have to wait.
    When we do remove it, the main things it could effect are the Story Primer template and the dozen or so SIL LEAD Uganda SHRP templates.
*/
td {
    resize: none;
    /*don't show those cute little resize controls in Firefox 4 and greater*/
    overflow: visible;
    font-size: 143%;
    line-height: @defaultLineHeight;
    min-height: @defaultLineHeight * 1em + 0.3em;
    width: 100%;
}

div#bloomDataDiv {
    display: none;
}

.centered {
    text-align: center;
}

.centerJustify {
    text-align: center;
}

// pageDescription is for javascript to read, we never display it directly on the page
.pageDescription {
    display: none;
}

/*Our javascript (bloomediting.js) uses <label> elements to get help bubbles and placeholders on editable divs.*/
label.bubble,
label.placeholder {
    display: none;
}

// Previously (<= 4.5), we used to use this class to do superscripting. Now we use <sup> to be consistent with ckeditor.
// But we have to keep this styling here for legacy books.
.superscript {
    vertical-align: super;
    font-size: 80%;
}

/* This is the html default, but our Browser.reset.* unfortunately overrides it. */
sup {
    font-size: smaller;
}

h1 {
    font-size: 1.5em;
}

h2 {
    font-size: 1.2em;
}

/* box-header is an idea we never implemented. We don't use it any more, but older
books may contain divs with box-header-off, so we need a rule to hide them.*/
.box-header-off {
    display: none !important;
}

// // page-specific stylesheets can call this with (false) to turn it off
// .Common-SeparateMultilingualEditables(@StandardMultilingualEditBoxSeparation);

.customPage {
    .bloom-imageContainer {
        width: 100%;
        height: 100%;
        box-sizing: border-box; // need any borders inside that 100% sizing (otherwise they tend to be clipped on at least one side)

        // NO z-index for image containers! They are ordered by document order.
        // (This allows them NOT to be a stacking context, so their child buttons can
        // be above the comicaljs canvas.)
        // z-index: @baseZIndexForContainers;
        // Solves BL-1033 small picture frames cycling red overflow
        overflow: hidden;
    }

    .bloom-videoContainer {
        box-sizing: border-box;
        width: 100%;
        height: 100%;

        &.bloom-noVideoSelected {
            background: url("video-placeholder.svg") no-repeat center;
            background-size: contain;
        }

        // above canvas so we can click playback controls
        z-index: @bubbleCanvasZIndex + 1;

        video {
            // I don't know exactly why this works, but it makes the video shrink to fit,
            // keep its aspect ratio, and center in whatever direction is not filled.
            height: 100%;
            width: 100%;
            max-height: 100%;
            max-width: 100%;
        }
    }

    .bloom-widgetContainer {
        box-sizing: border-box;
        width: 100%;
        height: 100%;

        &.bloom-noWidgetSelected {
            background: url("widget-placeholder.svg") no-repeat center;
            // enhance: video placeholder looks good using contain. That's better in
            // principle, because it will fit however awkward the container shape;
            // but it looks too big. Possibly we should edit the svg and give the image
            // a border there? But then I think it will be smaller than we want in
            // the page thumbnail list. May need two versions?
            background-size: 50%;
        }

        iframe {
            // The iframe containing the widget should fill the widget container.
            height: 100%;
            width: 100%;
            box-sizing: border-box; // currently redundant, but anything with 100% dimensions should have this
            border: none; // leave everything up to the content.
        }

        // above so buttons show
        z-index: @baseZIndexForContainers;
    }

    .bloom-editable {
        overflow-y: hidden;
    }

    .bloom-translationGroup {
        height: 100%; // review: appearance
        width: 100%; // review: appearance
        box-sizing: border-box; // review: appearance
        //height: ~"calc(100% - 2px)";
        // width: ~"calc(100% - 2px)"; //the -1 lets our border fall jus inside the marginbox border. Undesirable in terms of layout, but visually it looks a lot better in the editor
    }

    .split-pane-component {
        //Enhance: this doesn't buy us much... it would be more helpful if the minimum was
        // the min-height of the child
        min-height: @defaultLineHeight * 1em;
    }

    //&.A5Portrait.bloom-monolingual .bloom-translationGroup {
    //	height: 99%;
    //	width: 99%;
    //}
}

// Making the translation group centered handles multilingual books,
// centering the group of height:auto editable divs we have in that
// case.
// Making the bloom-editable div (vertically) centered handles monolingual books
// (which otherwise would not center because the bloom-editable div
// when monolingual occupies the whole group space.)
// We don't make the bloom-editable div display:flex here because that
// would conflict with the rules that determine which of them are
// visible. The rules that make them something other than display:none
// must use display:flex. I think all of those are in langVisibility.less.

// The role of :not(:has(.overflow)) is to avoid an apparent bug where paragraphs will
// be drawn on top of each other. If we're overflowing anyways, then vertical centering
// has no meaning, so we can side-step that bug. See BL-12750
.bloom-vertical-align-center:not(:has(.overflow)) {
    justify-content: center;

    &:not(.bloom-bilingual):not(.bloom-trilingual) .bloom-editable {
        justify-content: center;
    }
}
// The role of :not(:has(.overflow)) is to avoid an apparent bug where paragraphs will
// be drawn on top of each other. If we're overflowing anyways, then vertical centering
// has no meaning, so we can side-step that bug. See BL-12750
.bloom-vertical-align-bottom:not(:has(.overflow)) {
    justify-content: flex-end;

    &:not(.bloom-bilingual):not(.bloom-trilingual) .bloom-editable {
        justify-content: flex-end;
    }
}

/* ------------------------------------------------------
/*		Visibility System
/*		https://goo.gl/EgnSJo
/* ------------------------------------------------------*/

//Each bloom-translationGroup has 0 or more div.bloom-editables.
//Each .bloom-editable has a lang attribute to tell us what language it is in.
//Each of these is assumed to be unwanted:
.bloom-editable {
    display: none;
    order: 99; //if somehow we don't have an order for this, show it last (default is 0, which would be first)
}

.bloom-translationGroup {
    display: flex;
    flex-direction: column;
    gap: var(--multilingual-editable-vertical-gap);
}

// And now we can control the order using Flexbox "order" attribute:
//sadly, as of Dec 2016, browsers do not implement the full attr() spec, so this rule is rejected
// [data-language-order]{
// 	order:  attr(data-language-order integer);
// }
// Note, we could still use a data-* attribute and do this instead: [data-language-order='1']
// But for now, we're sticking with the older .bloom-content* classes.
.bloom-content1 {
    order: 0;
}

.bloom-content2 {
    order: 1;
}

.bloom-content3 {
    order: 2;
}

// When bloom-showImageDescriptions is set (typically only when the relevant toolbox is showing, currently,
// but we'd like to be able to turn it on in the end result, too), we make the picture shrink to fit
// in the left half and show the translation group in the right half.
// This rule would like to live in basePage-sharedRules, but we need display:flex in Bloom and display:block
// in epubs.
.bloom-showImageDescriptions .bloom-imageContainer .bloom-imageDescription {
    // We really just want to turn off the display:none that usually applies to image descriptions
    // inside image containers, but we have to set something. Fortunately, translation groups
    // are always display:flex (when not hidden) in Bloom itself.
    display: flex;
}

// When bloom-showImageDescriptions is set (typically only when the relevant toolbox is showing, currently,
// but we'd like to be able to turn it on in the end result, too), we make the picture shrink to fit
// in the left half and show the translation group in the right half.
// NB: this rule was in basePage-sharedRules, but epubcheck objects to the "position: absolute;".
// "position: absolute;" is required for the text to display in the proper location.  If we ever want to
// display like this in ePUBs (picture and description side by side), some other approach will be needed.
.bloom-showImageDescriptions .bloom-imageContainer {
    background-size: 50% auto;
    background-position-x: 0;

    .bloom-imageDescription {
        width: 50%;
        // not needed in content pages, but for some reason on cover.
        // Overridden in edit mode to make room for special border on top.
        height: 100%;
        top: 0;

        position: absolute;
        left: 50%;
        box-sizing: border-box;
        border-left: solid lightgray 1px;
        // We also want to turn off the display:none that usually applies to translation groups
        // inside image containers (above), but we want display:flex in Bloom, and display:block
        // in epubs. So that rule is elsewhere.
    }

    // Requiring a direct child helps prevent this from applying to things like the format cog
    > img {
        width: 50%;
    }
}

// if brandings has hyperlinks, we default to not showing ugly blue underlines in print.
// those could be re-enabled for digital products
div[data-book*="branding"] {
    a:link,
    a:visited {
        color: unset;
        text-decoration: unset;
    }
}

// Both canvas used in editing and svg used in permanent doc need to be
// above image and below TOP box and overlayed.
.comical-generated {
    z-index: @bubbleCanvasZIndex;
    position: absolute;
    top: 0;
    left: 0;
}

// This is a fall-back. Our main rules for highlighting the active element
// whose audio is being played now look for ui-audioCurent, and a meta rule tells
// epub readers to use this. However, this seems to be a common default class
// for epubs to use, so in case any of them don't obey the meta rule, I'm keeping
// this so we get SOME audio highlight (especially in fixed epubs, where at
// least Readium doesn't have a default...though Readium does obey the meta rule).
// Bloom does not use this otherwise. (The color is @bloom-yellow.)
.-epub-media-overlay-active {
    background-color: #febf00;
}

// This is for marking the phrase marker bars ("|") inserted into text for the benefit of
// audio in the talking book tool.  Outside of that tool, these bars should be invisible.
// (https://issues.bloomlibrary.org/youtrack/issue/BL-11505)  This includes editing with (or
// without) other tools and publishing as PDF, ePUB, or BloomPub, but not spreadsheet export.
.bloom-audio-split-marker {
    display: none;
}

// Very long words should just allow themselves to be broken at the end of a line if they're
// longer than a line.  See BL-12330.
.bloom-page .bloom-editable.bloom-visibility-code-on {
    word-wrap: break-word;
}

//... to be continued. We sandwich most other sheets between this one and the langVisibility.css, which comes last-ish

// now apply any book features
@import "bookFeatures.less";

@import "langVisibility.less";

.coverBottomBookTopic {
    display: var(--cover-topic-show);
}

.coverBottomLangName {
    display: var(--cover-languageName-show);
}
.cover .creditsRow {
    display: var(--cover-creditsRow-show);
}

.Device16x9Landscape,
.PictureStoryLandscape {
    //TODO: This is only for videos
    // Why is this not used for Device16x9Portrait too?!
    background-color: black;
}

// See comments below about the horizontal version of this rule.
.split-pane.vertical-percent
    .split-pane-component.position-left
    > .split-pane-component-inner {
    // we're dividing this in 2 because we're putting half on the left and half on the right,
    // and we're doing that so that when you snap something to 50%, both sides will be the same size.
    // Related to BL-13073.
    padding-right: calc(var(--page-verticalSplit-width) / 2);
    box-sizing: border-box;
}
.split-pane.vertical-percent
    .split-pane-component.position-right
    > .split-pane-component-inner {
    padding-left: calc(var(--page-verticalSplit-width) / 2);
    box-sizing: border-box;
}

// The standard structure of an origami split is
// .split-pane.horizontal-percent
//     .split-pane-component.position-top style="bottom: x%
//         .split-pane-component-inner
//             whatever (image/text/...
//     .split-pane-component.position-bottom style ="height: (100-x)%
//         .split-pane-component-inner
//             whatever (image/text/...
// We want to insert a gap between them, without complicating the percentages.
// The .split-pane-component-inner is always 100%, so with the right box-sizing
// we can add padding to it and it will still be the right height.
// The tricky thing is that the .split-pane-component-inner may be nested inside
// another level of split, so that it is inside a .split-pane-component.position-bottom
// even though its direct parent is a .split-pane-component.position-top.
// We only want the padding on an immediate child of .split-pane-component.position-bottom.
// Note: an earlier version of this rule put the padding on any div that was a direct child of
// the .split-pane-component-inner. I don't know why. It messed up the border drawing on
// bloom-imageContainer, because the padding between it and a previous text block was
// being put on the image container, and thus inside the border.
.split-pane.horizontal-percent
    .split-pane-component.position-top
    > .split-pane-component-inner {
    padding-bottom: calc(var(--page-horizontalSplit-height) / 2);
    // I think this is redundant with a rule elsewhere, but it's VITAL
    // when we are adding padding to a 100% height element, so I'm repeating
    // it here.
    box-sizing: border-box;
}
.split-pane.horizontal-percent
    .split-pane-component.position-bottom
    > .split-pane-component-inner {
    padding-top: calc(var(--page-horizontalSplit-height) / 2);
    // I think this is redundant with a rule elsewhere, but it's VITAL
    // when we are adding padding to a 100% height element, so I'm repeating
    // it here.
    box-sizing: border-box;
}

// ------------------------------------------------------------------------
// application of margins, and the gutter
// ------------------------------------------------------------------------
.bloom-page {
    padding-top: var(--page-margin-top);

    // at least until/if we put something in the HTML that tells us whether
    // this book wants a page number, we use this --pageNumber-show-multiplicand
    // property, which AppearanceSettings.cs sets to either 0 or 1.
    // By multiplying that times the extra height the current theme says
    // it needs for a page number (which may vary by page layout and such),
    // we then in effect turn that extra on and off.
    --padding-bottom-addition: calc(
        var(--pageNumber-show-multiplicand) * var(--pageNumber-extra-height)
    );
    padding-bottom: calc(
        var(--page-margin-bottom) + var(--padding-bottom-addition)
    );

    &.side-left {
        padding-left: var(--page-margin-left);
        padding-right: calc(var(--page-margin-right) + var(--page-gutter));
        // Some THINKING on gutters
        // 1) If the book is constructed by folding pages into one or more signatures, it's hard to know if a signature is ever so big that a gutter is needed?
        // 2) If an A4 book is printed on A4 paper and bound via staples or spiral, then you would need an inner gutter
        // 3) If a signature did get really big such that you had to cut of the outer edge to make a flat/straight book,
        // then an *outer* gutter would start to make sense, but that would vary from page to page.
    }

    &.side-right {
        padding-left: calc(var(--page-margin-left) + var(--page-gutter));
        padding-right: var(--page-margin-right);
    }
    &.outsideFrontCover,
    &.outsideBackCover {
        padding-top: var(--cover-margin-top);
        padding-bottom: var(--cover-margin-bottom);
    }
}

// the extra specificity here is to win out over the legacy (but still active) cover-color rule in the html itself
// As of 6.1 this is only used for Angola branding
div.bloom-page.coverColor {
    background-color: var(--cover-background-color) !important;
}

// --------------------------------------------------------------------------------------
// pages that are symmetrical left vs. right, so that we only use --page-margin-left
// (or --cover-margin-side).
// --------------------------------------------------------------------------------------
// if the page is set to a Device one
.bloom-page[class*="Device"],
.calendarFold,
// this name "screen-only" is rather out of date now, but what it means is that the page is only shown
// in the Bloom-Editor, used for Translation Instructions
.screen-only,
//  or if we're showing something like A5 but in Bloom Player,
.bloomPlayer-page .bloom-page {
    &.side-left,
    &.side-right {
        // then use balanced margins, no gutter
        padding-left: var(--page-margin-left);
        padding-right: var(--page-margin-left);
    }
}
// Although normally the same, the cover can have a different margin than the
// inside pages. So we need to set the padding for the cover pages separately.
.bloom-page.outsideBackCover,
.bloom-page.outsideFrontCover {
    &.side-left,
    &.side-right {
        padding-left: var(--cover-margin-side);
        padding-right: var(--cover-margin-side);
    }
}

.bloom-page {
    display: block;
    box-sizing: border-box;

    background-color: var(--page-background-color) !important;

    // editMode.less may change this when we're editing
    .split-pane-component-inner > .bloom-translationGroup {
        background-color: var(--marginBox-background-color) !important;
    }
    // We need this at least for comics, which typically have a black background everywhere,
    // but we need to go back to white for xmatter pages, where we want to see the black text.
    // A more specific rule, usually in the .htm file itself, controls the background color of
    // cover pages.
    &.bloom-frontMatter,
    &.bloom-backMatter {
        background-color: white !important;
    }

    // Absolutely positioned elements can show outside the page
    // because margin box is also absolutely positioned.
    // So hide anything overflowing the page. BL-9352.
    // Note that this does not negatively affect full-bleed because the bleed
    // is still considered part of the page.
    // Only hide overflow on non-template pages, since in templates this would hide the page label
    // that we want to be able to edit (BL-9045). (We tried only hiding x overflow, but somehow it STILL
    // hid the pageLabel!)
    &:not(.bloom-templateMode) {
        overflow: hidden;
    }
}

/* About the calc() here: depending on the margin, we may need to adjust the padding of the text to make it so that
you get less padding on the side of the text that is next to edge of the page.

About the "multiplicand" value: We don't want to do the aforementioned adjustment if the page margin is not providing a visual buffer.
The buffer would be absent if the marginBox had a border or the page has a background color that is different from the marginBox color.*/
.mixinLeftTgPadding {
    padding-left: calc(
        var(--topLevel-text-padding-left) -
            (
                var(--page-margin-left) *
                    var(--page-and-marginBox-are-same-color-multiplicand)
            )
    );
}
.mixinRightTgPadding {
    padding-right: calc(
        var(--topLevel-text-padding-right) -
            (
                var(--page-margin-right) *
                    var(--page-and-marginBox-are-same-color-multiplicand)
            )
    );
}
.mixinTopTgPadding {
    padding-top: calc(
        var(--topLevel-text-padding-top) -
            (
                var(--page-margin-top) *
                    var(--page-and-marginBox-are-same-color-multiplicand)
            )
    );
}
.mixinBottomTgPadding {
    --amountOfExtraMarginAddedForPageNumber: calc(
        var(--pageNumber-extra-height) * var(--pageNumber-show-multiplicand)
    );
    --totalBottomMargin: calc(
        var(--page-margin-bottom) + var(--amountOfExtraMarginAddedForPageNumber)
    );
    --amountOfVisualPaddingProvidedByBottomMargin: calc(
        var(--totalBottomMargin) *
            var(--page-and-marginBox-are-same-color-multiplicand)
    );

    padding-bottom: calc(
        var(--topLevel-text-padding-bottom) -
            var(--amountOfVisualPaddingProvidedByBottomMargin)
    );
}

// ----------------------------
// Padding
// We want to improve the padding for the 99% of simple books, but we don't want to break
// the small number of books that use origami to break the page up into little boxes.
// Therefore the rules here only apply to direct descendants of the marginBox.
// See BL-13475 for some discussion on limitations.
// ----------------------------
.marginBox {
    // no split at all
    & > .split-pane-component-inner ,
    // has been split
    & > .split-pane > .split-pane-component > .split-pane-component-inner {
        & > .bloom-translationGroup {
            .mixinLeftTgPadding;
            .mixinRightTgPadding;
            .mixinTopTgPadding;
            .mixinBottomTgPadding;
        }
        // if the textbox has a special background color (only gray is offered for now),
        // then visually the margin doesn't matter. We need the padding.
        & > .bloom-translationGroup.bloom-background-gray {
            padding-top: var(--topLevel-text-padding-top);
            padding-bottom: var(--topLevel-text-padding-bottom);
            padding-right: var(--topLevel-text-padding-right);
            padding-left: var(--topLevel-text-padding-left);
        }
    }
    /* on these "inner" edges, we don't need to consider the page margin */
    &
        > .split-pane.horizontal-percent
        > .split-pane-component.position-bottom
        > .split-pane-component-inner
        > .bloom-translationGroup {
        padding-top: var(--topLevel-text-padding-top);
    }
    &
        > .split-pane.horizontal-percent
        > .split-pane-component.position-top
        > .split-pane-component-inner
        > .bloom-translationGroup {
        padding-bottom: var(--topLevel-text-padding-bottom);
    }
    &
        > .split-pane.vertical-percent
        > .split-pane-component.position-left
        > .split-pane-component-inner
        > .bloom-translationGroup {
        padding-right: var(--topLevel-text-padding-right);
    }
    &
        > .split-pane.vertical-percent
        > .split-pane-component.position-right
        > .split-pane-component-inner
        > .bloom-translationGroup {
        padding-left: var(--topLevel-text-padding-left);
    }
    // And now some special cases where we DO want it on blocks that are more deeply nested.

    // Set padding above a bottom text that is nested two layers deep in origami
    //     Matches include: built-in "picture-in-middle" page & Big Text Diglot
    &
        > .split-pane.horizontal-percent
        > .split-pane-component.position-bottom
        > .split-pane-component-inner
        > .split-pane.horizontal-percent
        > .split-pane-component.position-bottom
        > .split-pane-component-inner
        > .bloom-translationGroup,
    //      Matches include: Start with image on bottom, split the image to have a text below it. (e.g. Angola project's bilingual template)
    //       (note, this varies just slightly from the built-in "picture-in-middle" page above by having one fewer split-pane-component-inner layer)
    &
        > .split-pane.horizontal-percent
        > .split-pane-component.position-bottom
        > .split-pane.horizontal-percent
        > .split-pane-component.position-bottom
        > .split-pane-component-inner
        > .bloom-translationGroup
        //, ENHANCE: could put other patterns in here too that give you the same layout visually
 {
        padding-top: var(--topLevel-text-padding-top);
        .mixinLeftTgPadding;
        .mixinRightTgPadding;
        .mixinBottomTgPadding;
    }

    // Start with image on top, split the image to have text above it. (visually the same as picture-in-middle)
    &
        > .split-pane.horizontal-percent
        > .split-pane-component.position-top
        > .split-pane.horizontal-percent
        > .split-pane-component.position-top
        > .split-pane-component-inner
        > .bloom-translationGroup {
        .mixinTopTgPadding;
        .mixinLeftTgPadding;
        .mixinRightTgPadding;
        padding-bottom: var(--topLevel-text-padding-bottom);
    }

    // This one handles the text box at the bottom left of a Big Video Diglot.
    // Review: it's not obvious what to do about the outer edges here. In the simpler cases,
    // we DO have outer-edge padding when there is no other margin and the top-level split is vertical.
    // But we do NOT have it when the text is above or below a picture.
    &
        > .split-pane.vertical-percent
        > .split-pane-component.position-left
        > .split-pane-component-inner
        > .split-pane.horizontal-percent
        > .split-pane-component.position-bottom
        > .split-pane-component-inner
        > .bloom-translationGroup {
        padding-top: var(--topLevel-text-padding-top);
        padding-right: var(--topLevel-text-padding-right);
        .mixinLeftTgPadding;
        .mixinBottomTgPadding;
    }
    // This one handles the text box at the bottom right of a Big Picture Diglot.
    &
        > .split-pane.vertical-percent
        > .split-pane-component.position-right
        > .split-pane-component-inner
        > .split-pane.horizontal-percent
        > .split-pane-component.position-bottom
        > .split-pane-component-inner
        > .bloom-translationGroup {
        padding-top: var(--topLevel-text-padding-top);
        padding-left: var(--topLevel-text-padding-left);
        .mixinRightTgPadding;
        .mixinBottomTgPadding;
    }
    // This one handles the text box at the top right of a Big Picture Diglot Text Over Video.
    &
        > .split-pane.vertical-percent
        > .split-pane-component.position-right
        > .split-pane-component-inner
        > .split-pane.horizontal-percent
        > .split-pane-component.position-top
        > .split-pane-component-inner
        > .bloom-translationGroup {
        padding-bottom: var(--topLevel-text-padding-bottom);
        padding-left: var(--topLevel-text-padding-left);
        .mixinRightTgPadding;
        .mixinTopTgPadding;
    }
}

.bloom-page {
    /* All of these default to the general one, then can be overridden as needed */
    --cover-margin-top: var(--page-margin);
    --cover-margin-bottom: var(--page-margin);
    --cover-margin-side: var(--page-margin);
    --page-margin-top: var(--page-margin);
    --page-margin-bottom: var(--page-margin);
    --page-margin-left: var(--page-margin);
    --page-margin-right: var(--page-margin);

    --topLevel-text-padding-top: var(--topLevel-text-padding);
    --topLevel-text-padding-bottom: var(--topLevel-text-padding);
    --topLevel-text-padding-right: var(--topLevel-text-padding);
    --topLevel-text-padding-left: var(--topLevel-text-padding);
}
