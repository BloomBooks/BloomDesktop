@import "common-mixins.less";
@bleed: 3mm; // Duplicated in editMode.less to remove circular dependency between BloomBrowserUI and content
@RA5Portrait-Width: @A5Portrait-Width + @bleed + @bleed;
@RA5Portrait-Height: @A5Portrait-Height + @bleed + @bleed;
@RA5-Scale: unit(@RA5Portrait-Width / @A5Portrait-Width);
@A5Portrait-HeightFB: @A5Portrait-Height * @RA5-Scale;
@A5Portrait-Height-Excess: @A5Portrait-HeightFB - @RA5Portrait-Height;

@RA4Portrait-Width: @A4Portrait-Width + @bleed + @bleed;
@RA4Portrait-Height: @A4Portrait-Height + @bleed + @bleed;
@RA4-Scale: unit(@RA4Portrait-Width / @A4Portrait-Width);
@A4Portrait-HeightFB: @A4Portrait-Height * @RA4-Scale;
@A4Portrait-Height-Excess: @A4Portrait-HeightFB - @RA4Portrait-Height;

@RA3Portrait-Width: @A3Portrait-Width + @bleed + @bleed;
@RA3Portrait-Height: @A3Portrait-Height + @bleed + @bleed;
@RA3-Scale: unit(@RA3Portrait-Width / @A3Portrait-Width);
@A3Portrait-HeightFB: @A3Portrait-Height * @RA3-Scale;
@A3Portrait-Height-Excess: @A3Portrait-HeightFB - @RA3Portrait-Height;

@RUSComicPortrait-Width: @USComicPortrait-Width + @bleed + @bleed;
@RUSComicPortrait-Height: @USComicPortrait-Height + @bleed + @bleed;
@RUSComic-Scale: unit(@RUSComicPortrait-Width / @USComicPortrait-Width);
@USComicPortrait-HeightFB: @USComicPortrait-Height * @RUSComic-Scale;
@USComicPortrait-Height-Excess: @USComicPortrait-HeightFB -
    @RUSComicPortrait-Height;

@RSize6x9Portrait-Width: @Size6x9Portrait-Width + @bleed + @bleed;
@RSize6x9Portrait-Height: @Size6x9Portrait-Height + @bleed + @bleed;
@RSize6x9-Scale: unit(@RSize6x9Portrait-Width / @Size6x9Portrait-Width);
@Size6x9Portrait-HeightFB: @Size6x9Portrait-Height * @RSize6x9-Scale;
@Size6x9Portrait-Height-Excess: @Size6x9Portrait-HeightFB -
    @RSize6x9Portrait-Height;

.bloom-fullBleed {
    //background-color: green;
    .bloom-page {
        transform-origin: top left;
        transition: 0.5s ease-in-out;

        &.A5Portrait {
            // NB: transform order is rightmost first
            transform: translate(0, -@A5Portrait-Height-Excess / 2)
                scale(@RA5-Scale);
        }

        &.A5Landscape {
            // NB: transform order is rightmost first
            transform: translate(-@A5Portrait-Height-Excess / 2, 0)
                scale(@RA5-Scale);
        }

        &.A4Portrait {
            // NB: transform order is rightmost first
            transform: translate(0, -@A4Portrait-Height-Excess / 2)
                scale(@RA4-Scale);
        }

        &.A4Landscape {
            // NB: transform order is rightmost first
            transform: translate(-@A4Portrait-Height-Excess / 2, 0)
                scale(@RA4-Scale);
        }

        &.A3Portrait {
            // NB: transform order is rightmost first
            transform: translate(0, -@A3Portrait-Height-Excess / 2)
                scale(@RA3-Scale);
        }

        &.A3Landscape {
            // NB: transform order is rightmost first
            transform: translate(-@A3Portrait-Height-Excess / 2, 0)
                scale(@RA3-Scale);
        }

        &.USComicPortrait {
            // NB: transform order is rightmost first
            transform: translate(0, -@USComicPortrait-Height-Excess / 2)
                scale(@RUSComic-Scale);
        }

        &.Size6x9Portrait {
            // NB: transform order is rightmost first
            transform: translate(0, -@Size6x9Portrait-Height-Excess / 2)
                scale(@RSize6x9-Scale);
        }

        &.Size6x9Landscape {
            // NB: transform order is rightmost first
            transform: translate(-@Size6x9Portrait-Height-Excess / 2, 0)
                scale(@RSize6x9-Scale);
        }
    }
}

// overridden when publishingWithoutFullBleed
.bloom-mediaBox {
    // For full-bleed publishing, breaking the page after .bloom-mediaBox is an easy
    // way to avoid page creep by merely deleting even pages that are essentially
    // blank (1-2 pixels from the previous page).  Quantizing the page sizes to 1/96
    // inch works to avoid page creep for standard printing using WebView2 to produce
    // PDF files, but the translate operations used in full-bleed printing make it
    // (practically?) impossible to adjust page sizes as exactly.
    page-break-after: always;
    overflow: hidden; // when the page is scaled, stuff in the longer dimension will actually exceed the bleed area. We want to clip that.

    &.A5Portrait {
        width: @RA5Portrait-Width;
        height: @RA5Portrait-Height;
    }

    &.A5Landscape {
        width: @RA5Portrait-Height;
        height: @RA5Portrait-Width;
    }

    &.A4Portrait {
        width: @RA4Portrait-Width;
        height: @RA4Portrait-Height;
    }

    &.A4Landscape {
        width: @RA4Portrait-Height;
        height: @RA4Portrait-Width;
    }

    &.A3Portrait {
        width: @RA3Portrait-Width;
        height: @RA3Portrait-Height;
    }

    &.A3Landscape {
        width: @RA3Portrait-Height;
        height: @RA3Portrait-Width;
    }

    // review: we don't actually need full-bleed on devices... how does that play out?
    &.Device16x9Portrait {
        width: @Device16x9Portrait-Width;
        height: @Device16x9Portrait-Height;
    }

    &.Device16x9Landscape {
        width: @Device16x9Portrait-Height;
        height: @Device16x9Portrait-Width;
    }

    &.USComicPortrait {
        width: @RUSComicPortrait-Width;
        height: @RUSComicPortrait-Height;
    }

    &.Size6x9Portrait {
        width: @RSize6x9Portrait-Width;
        height: @RSize6x9Portrait-Height;
    }

    &.Size6x9Landscape {
        width: @RSize6x9Portrait-Height;
        height: @RSize6x9Portrait-Width;
    }

    // Todo: this needs rules for every page size we support in full bleed (try to use a macro)
}

// In full bleed mode, this will be @bleed larger than the desired page size. The "media" here is the phsyical paper that
// a printshow would have to work with. E.g. RA4, RA5.
// If bloom-fullBleed mode is off, this div, in the DOM, doesn't exist.
// See editMode.less for more things that we do with this (it allows us to draw the bleed and safety areas).
body.publishingWithoutFullBleed {
    .bloom-mediaBox {
        overflow: hidden; // when the page is scaled and not printing bleed, stuff in the both dimensions

        // will actually exceed the bleed area. We want to clip that.
        &.A5Portrait {
            width: @A5Portrait-Width;
            height: @A5Portrait-Height;
        }

        &.A5Landscape {
            width: @A5Portrait-Height;
            height: @A5Portrait-Width;
        }

        &.USComicPortrait {
            width: @USComicPortrait-Width;
            height: @USComicPortrait-Height;
        }

        &.Size6x9Portrait {
            width: @Size6x9Portrait-Width;
            height: @Size6x9Portrait-Height;
        }

        &.Size6x9Landscape {
            width: @Size6x9Portrait-Height;
            height: @Size6x9Portrait-Width;
        }

        // Todo: this needs rules for every page size we support in full bleed (try to use a macro)
    }
}

// Notes on WebView2 and page sizes: PrintToPdfAsync uses measurements in inches, and apparently quantizes
// page sizes to a 1/96 inch grid.  (Traditional screen DPI, anyone?)  The quantization process usually
// takes the floor for the page size calculation for fitting to 1/96 inches, but occastionally uses the ceiling
// instead.  I haven't figured out any rhyme or reason for why it uses the ceiling the few times it does.
// This is not the first time this kind of problem has been encountered with PDF printing via Chrome:
// see https://github.com/puppeteer/puppeteer/issues/2278.
.pdfPublishMode {
    .bloom-page {
        &.A3Portrait {
            min-width: (floor((@A3Portrait-Width / 25.4) * 96) / 96) * 25.4;
            max-width: (floor((@A3Portrait-Width / 25.4) * 96) / 96) * 25.4;
            min-height: (floor((@A3Portrait-Height / 25.4) * 96) / 96) * 25.4;
            max-height: (floor((@A3Portrait-Height / 25.4) * 96) / 96) * 25.4;
        }

        &.A3Landscape {
            min-width: (floor((@A3Landscape-Width / 25.4) * 96) / 96) * 25.4;
            max-width: (floor((@A3Landscape-Width / 25.4) * 96) / 96) * 25.4;
            min-height: (floor((@A3Landscape-Height / 25.4) * 96) / 96) * 25.4;
            max-height: (floor((@A3Landscape-Height / 25.4) * 96) / 96) * 25.4;
        }

        &.A4Portrait {
            min-width: (floor((@A4Portrait-Width / 25.4) * 96) / 96) * 25.4;
            max-width: (floor((@A4Portrait-Width / 25.4) * 96) / 96) * 25.4;
            min-height: (floor((@A4Portrait-Height / 25.4) * 96) / 96) * 25.4;
            max-height: (floor((@A4Portrait-Height / 25.4) * 96) / 96) * 25.4;
        }

        &.A4Landscape {
            min-width: (ceil((@A4Landscape-Width / 25.4) * 96) / 96) * 25.4;
            max-width: (ceil((@A4Landscape-Width / 25.4) * 96) / 96) * 25.4;
            min-height: (floor((@A4Landscape-Height / 25.4) * 96) / 96) * 25.4;
            max-height: (floor((@A4Landscape-Height / 25.4) * 96) / 96) * 25.4;
        }

        &.A5Portrait {
            min-width: (floor((@A5Portrait-Width / 25.4) * 96) / 96) * 25.4;
            max-width: (floor((@A5Portrait-Width / 25.4) * 96) / 96) * 25.4;
            min-height: (floor((@A5Portrait-Height / 25.4) * 96) / 96) * 25.4;
            max-height: (floor((@A5Portrait-Height / 25.4) * 96) / 96) * 25.4;
        }

        &.A5Landscape {
            min-width: (floor((@A5Landscape-Width / 25.4) * 96) / 96) * 25.4;
            max-width: (floor((@A5Landscape-Width / 25.4) * 96) / 96) * 25.4;
            min-height: (floor((@A5Landscape-Height / 25.4) * 96) / 96) * 25.4;
            max-height: (floor((@A5Landscape-Height / 25.4) * 96) / 96) * 25.4;
        }

        &.A6Portrait {
            min-width: (ceil((@A6Portrait-Width / 25.4) * 96) / 96) * 25.4;
            max-width: (ceil((@A6Portrait-Width / 25.4) * 96) / 96) * 25.4;
            min-height: (floor((@A6Portrait-Height / 25.4) * 96) / 96) * 25.4;
            max-height: (floor((@A6Portrait-Height / 25.4) * 96) / 96) * 25.4;
        }

        &.A6Landscape {
            min-width: (floor((@A6Landscape-Width / 25.4) * 96) / 96) * 25.4;
            max-width: (floor((@A6Landscape-Width / 25.4) * 96) / 96) * 25.4;
            min-height: (ceil((@A6Landscape-Height / 25.4) * 96) / 96) * 25.4;
            max-height: (ceil((@A6Landscape-Height / 25.4) * 96) / 96) * 25.4;
        }

        &.B5Portrait {
            min-width: (floor((@B5Portrait-Width / 25.4) * 96) / 96) * 25.4;
            max-width: (floor((@B5Portrait-Width / 25.4) * 96) / 96) * 25.4;
            min-height: (floor((@B5Portrait-Height / 25.4) * 96) / 96) * 25.4;
            max-height: (floor((@B5Portrait-Height / 25.4) * 96) / 96) * 25.4;
        }

        &.Cm13Landscape {
            min-width: (floor((@Cm13Square-Side / 25.4) * 96) / 96) * 25.4;
            max-width: (floor((@Cm13Square-Side / 25.4) * 96) / 96) * 25.4;
            min-height: (ceil((@Cm13Square-Side / 25.4) * 96) / 96) * 25.4;
            max-height: (ceil((@Cm13Square-Side / 25.4) * 96) / 96) * 25.4;
        }
    }
}

// See device.less for all css involving the following layouts:
// Device16x9Portrait, Device16x9Landscape and PictureStoryLandscape
.bloom-page {
    &.A5Portrait {
        min-width: @A5Portrait-Width;
        max-width: @A5Portrait-Width;
        min-height: @A5Portrait-Height;
        max-height: @A5Portrait-Height;
    }

    &.A5Landscape {
        min-width: @A5Landscape-Width;
        max-width: @A5Landscape-Width;
        min-height: @A5Landscape-Height;
        max-height: @A5Landscape-Height;
    }

    &.B5Portrait {
        min-width: @B5Portrait-Width;
        max-width: @B5Portrait-Width;
        min-height: @B5Portrait-Height;
        max-height: @B5Portrait-Height;
    }

    &.A4Landscape {
        min-width: @A4Landscape-Width;
        max-width: @A4Landscape-Width;
        min-height: @A4Landscape-Height;
        max-height: @A4Landscape-Height;
    }

    &.A4Portrait {
        min-width: @A4Portrait-Width;
        max-width: @A4Portrait-Width;
        min-height: @A4Portrait-Height;
        max-height: @A4Portrait-Height;
    }

    &.A3Landscape {
        min-width: @A3Landscape-Width;
        max-width: @A3Landscape-Width;
        min-height: @A3Landscape-Height;
        max-height: @A3Landscape-Height;
    }

    &.A3Portrait {
        min-width: @A3Portrait-Width;
        max-width: @A3Portrait-Width;
        min-height: @A3Portrait-Height;
        max-height: @A3Portrait-Height;
    }

    &.A6Portrait {
        min-width: @A6Portrait-Width;
        max-width: @A6Portrait-Width;
        min-height: @A6Portrait-Height;
        max-height: @A6Portrait-Height;
    }

    &.A6Landscape {
        min-width: @A6Landscape-Width;
        max-width: @A6Landscape-Width;
        min-height: @A6Landscape-Height;
        max-height: @A6Landscape-Height;
    }

    &.QuarterLetterPortrait {
        min-width: @QuarterLetterPortrait-Width;
        max-width: @QuarterLetterPortrait-Width;
        min-height: @QuarterLetterPortrait-Height;
        max-height: @QuarterLetterPortrait-Height;
    }

    &.QuarterLetterLandscape {
        min-width: @QuarterLetterLandscape-Width;
        max-width: @QuarterLetterLandscape-Width;
        min-height: @QuarterLetterLandscape-Height;
        max-height: @QuarterLetterLandscape-Height;
    }

    &.HalfLetterPortrait {
        min-width: @HalfLetterPortrait-Width;
        max-width: @HalfLetterPortrait-Width;
        min-height: @HalfLetterPortrait-Height;
        max-height: @HalfLetterPortrait-Height;
    }

    &.HalfLetterLandscape {
        min-width: @HalfLetterLandscape-Width;
        max-width: @HalfLetterLandscape-Width;
        min-height: @HalfLetterLandscape-Height;
        max-height: @HalfLetterLandscape-Height;
    }

    &.LetterPortrait {
        min-width: @LetterPortrait-Width;
        max-width: @LetterPortrait-Width;
        min-height: @LetterPortrait-Height;
        max-height: @LetterPortrait-Height;
    }

    &.LetterLandscape {
        min-width: @LetterLandscape-Width;
        max-width: @LetterLandscape-Width;
        min-height: @LetterLandscape-Height;
        max-height: @LetterLandscape-Height;
    }

    &.HalfLegalPortrait {
        min-width: @HalfLegalPortrait-Width;
        max-width: @HalfLegalPortrait-Width;
        min-height: @HalfLegalPortrait-Height;
        max-height: @HalfLegalPortrait-Height;
    }

    &.HalfLegalLandscape {
        min-width: @HalfLegalLandscape-Width;
        max-width: @HalfLegalLandscape-Width;
        min-height: @HalfLegalLandscape-Height;
        max-height: @HalfLegalLandscape-Height;
    }

    &.LegalPortrait {
        min-width: @LegalPortrait-Width;
        max-width: @LegalPortrait-Width;
        min-height: @LegalPortrait-Height;
        max-height: @LegalPortrait-Height;
    }

    &.LegalLandscape {
        min-width: @LegalLandscape-Width;
        max-width: @LegalLandscape-Width;
        min-height: @LegalLandscape-Height;
        max-height: @LegalLandscape-Height;
    }

    &.Cm13Landscape {
        min-width: @Cm13Square-Side;
        max-width: @Cm13Square-Side;
        min-height: @Cm13Square-Side;
        max-height: @Cm13Square-Side;
    }

    &.USComicPortrait {
        min-width: @USComicPortrait-Width;
        max-width: @USComicPortrait-Width;
        min-height: @USComicPortrait-Height;
        max-height: @USComicPortrait-Height;
    }

    &.Size6x9Portrait {
        min-width: @Size6x9Portrait-Width;
        max-width: @Size6x9Portrait-Width;
        min-height: @Size6x9Portrait-Height;
        max-height: @Size6x9Portrait-Height;
    }

    &.Size6x9Landscape {
        min-width: @Size6x9Landscape-Width;
        max-width: @Size6x9Landscape-Width;
        min-height: @Size6x9Landscape-Height;
        max-height: @Size6x9Landscape-Height;
    }
}
