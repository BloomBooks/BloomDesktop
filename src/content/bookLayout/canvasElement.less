@import (reference) "../../BloomBrowserUI/bloomUI.less";
@MinTextBoxWidth: 30px;
@MinTextBoxHeight: 30px;
@DefaultTextBoxWidth: 140px;
@DefaultTextBoxHeight: @MinTextBoxHeight;
@DragHandleBackgroundColor: transparent;

.bloom-canvas.ui-ctrlDown .bloom-canvas-element .ui-resizable-handle {
    display: none !important;
}

// This SHOULD be redundant; I've removed all rules setting a z-index for image containers.
// I'm leaving it here in hopes that if someone tries to reinstate such a thing, it will be
// prevented by this, and they will find this rule and comment.
// We MUST NOT have a z-index on image canvas elements, otherwise the canvas element image container becomes
// a stacking context, and then its child buttons cannot be 'above' the comicaljs canvas,
// and then those buttons can't be clicked! Instead, we make sure canvas element images come after
// the main img and so are on top of it for that reason.
.bloom-canvas .bloom-imageContainer {
    z-index: auto !important;
}

.bloom-canvas {
    &.grabbable:not(.ui-jquery-resizing-in-progress) {
        &,
        .bloom-canvas-element
            .bloom-translationGroup
            .bloom-editable.cke_editable {
            cursor: grab;
        }
    }

    &.grabbing:not(.ui-jquery-resizing-in-progress) {
        &,
        .bloom-canvas-element
            .bloom-translationGroup
            .bloom-editable.cke_editable {
            cursor: grabbing;
        }
    }

    .bloom-canvas-element:not(.ui-resizable-resizing) {
        .bloom-dragHandle {
            cursor: grab;

            &.grabbing {
                cursor: grabbing;
            }
        }
    }

    &.ne-resizable {
        &,
        .bloom-canvas-element
            .bloom-translationGroup
            .bloom-editable.cke_editable {
            cursor: ne-resize;
        }
    }

    &.nw-resizable {
        &,
        .bloom-canvas-element
            .bloom-translationGroup
            .bloom-editable.cke_editable {
            cursor: nw-resize;
        }
    }

    &.sw-resizable {
        &,
        .bloom-canvas-element
            .bloom-translationGroup
            .bloom-editable.cke_editable {
            cursor: sw-resize;
        }
    }

    &.se-resizable {
        &,
        .bloom-canvas-element
            .bloom-translationGroup
            .bloom-editable.cke_editable {
            cursor: se-resize;
        }
    }

    .bloom-canvas-element {
        position: absolute;
        width: @DefaultTextBoxWidth;
        min-width: @MinTextBoxWidth;
        min-height: @MinTextBoxHeight;
        border-radius: 3px;
        border: none !important; // needed to override ui-draggable blue border

        // Keeping this in case it is needed outside edit mode...likely since if it was for edit mode,
        // it should be in editMode.less. But unlikely because why do we want focus styling except when editing?
        // If we reinstate it we need to suppress it in editMode, where it conflicts with the new control-container,
        // resulting in a double border on the left and right (BL-13833).
        // Overrides the inherited values from editMode.less, which are a slightly different shade of blue.
        // This rule now works for regular just text bubbles and picture or video over picture.
        // div:focus,
        // video:focus {
        //     // Use outline instead of border to avoid changing the size of the box
        //     // when the "border" is added for focus.
        //     outline: 1px solid @bloom-blue;
        //     border: none;
        //     box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1), 0 0 8px @bloom-blue;
        // }

        .bloom-translationGroup {
            background: transparent; // don't want to worry about what background the image has
            border: none;
            z-index: @canvasElementZIndex;
            .bloom-editable {
                min-width: @MinTextBoxWidth - 3;
                min-height: @MinTextBoxHeight - 3 !important;
                text-align: center;

                // canvas elements usually do automatic vertical sizing, so hiding overflow is rarely helpful.
                // and if line-height is small, may need overflow visible to show descenders.
                overflow: visible;
            }

            // Language tip CSS
            .bloom-editable[contentEditable="true"][data-languageTipContent]:not([data-languageTipContent=""]) {
                &:after {
                    // In editMode.less, it sets the "content" property for all text boxes (which normally always have the language tip visible).
                    // But here in text over picture, we want to default to not having the language tip visible.
                    display: none; // Prevents padding-top from being rendered (content: "" still renders it)
                }

                &:focus:after {
                    display: block;
                    left: unset;
                    text-align: right;
                    // NB: right is set by a rule at the end of this file
                    bottom: 3px;
                    color: @bloom-purple;
                    background-color: white;
                    font-size: small;
                    cursor: auto;
                    &:hover {
                        background-color: white;
                    }
                }
            }
        }
    }
    [data-target-of] {
        // We generally want things in the target to look like the things in the corresponding
        // canvas element. But some of the above like z-index is UI things that may not apply.
        // We also don't want to mess with the border of the target.
        // So I'm just replicating what I think is needed here.
        .bloom-translationGroup {
            .bloom-editable {
                text-align: center;
                overflow: visible;
            }
        }
    }
}

// Code to handle borders
.bloom-canvas {
    // Over picture elements with speech bubbles
    //
    // a canvas element that contains a data-bubble attribute and does NOT contain the substring
    // "`style`:`none`" in the value of the data-bubble attribute
    .bloom-canvas-element[data-bubble]:not([data-bubble*="`style`:`none`"]) {
        .bloom-translationGroup {
            .bloom-editable {
                // Use outline instead of border to avoid changing the size of the box
                // when the "border" is added for focus.
                outline: none;
                border: none;
                box-shadow: none;
                // this suppresses the white rectangle we show to give "none" text boxes
                // some visibility when hoverered.
                // Don't know a reason this needs to be in basepage.less, I think only bloom-editing
                // adds a :before that needs suppressing, but the other outline-removal rule was
                // here and I wanted to keep them together. So I'm putting this here too.
                &:before {
                    content: none !important; // the rule that makes this border is pretty specific
                }
            }
        }
    }

    // I'm leaving this here because I don't understand what it was for, and if it was important for
    // something, maybe we will find this when debugging that. But if we want it at all, it is out
    // of place in basePage.less, which is supposed to be about things that don't involve editing,
    // whereas this is about focused boxes.
    // In any case, putting an outline or box shadow on a text box when it has focus is now undesirable
    // in edit mode, because we now have the new control-container that wraps the text box and indicates
    // it has focus, and that box is made a little wider than the text to accommodate the size controls.
    // So anything sort of border/outline/shadow that matches the box itself results in a double border
    // on the left and right (BL-13833).
    // The inverse of the above... text boxes which do not have bubbles
    //
    // The case where it doesn't contain a data-bubble attribute at all
    // .bloom-canvas-element:not([data-bubble]),
    // // The case where it does contain a data-bubble attribute, but the style is none.
    // .bloom-canvas-element[data-bubble*="`style`:`none`"] {
    //     .bloom-translationGroup {
    //         .bloom-editable {
    //             &:focus {
    //                 // Use outline instead of border to avoid changing the size of the box
    //                 // when the "border" is added for focus.
    //                 // Overrides the inherited values from editMode.less, which are a slightly different shade of blue.
    //                 outline: 1px solid @bloom-blue;
    //                 border: none;
    //                 box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1),
    //                     0 0 8px @bloom-blue;
    //             }
    //         }
    //     }
    // }
}

// Set vertical alignment to center
// Working prototype using flexboxes.
.bloom-canvas {
    // We exclude "Just Text" bubbles with no background color because
    // 1) Visually there's not a lot of profit to it
    // 2) So for existing books there won't be a subtle movement in the text position
    // We want to do this to almost all bloom-canvas-element elements. The ones we don't want to do it
    // to have data-bubble="...`style`:`none`...`backgroundColors`:[`transparent`]
    // or else data-bubble="...`style`:`none`..." and don't specify a background color at all.
    // So, the first rule says we do it to anything without style:none
    // The second says we do it to anything that specifies a backgroundColor
    // and does NOT specify 'transparent' as the value of that background color.
    // (Of course, there could be other ways of specifying transparent. But AFIK Bloom has never used them.)
    // (Thus, if it has backgroundColors and isn't explicitly transparent the centering applies.)
    // 3) But if the text overflows the box, we don't want to center it, because that would make the top
    // and bottom of the text to disappear. So we exclude any box that has text overflow marked.  (Scrolling
    // doesn't work when the contents are forcibly centered.)  See BL-13606 (and BL-12750).
    .bloom-canvas-element[data-bubble]:not([data-bubble*="`style`:`none`"]):not(:has(.overflow)),
    .bloom-canvas-element[data-bubble*="backgroundColors"]:not([data-bubble*="`backgroundColors`:[`transparent`]"]):not(:has(.overflow)) {
        // Center the translationGroup within the textOverPic box,
        // instead of having the 2 px difference all at the bottom.
        display: flex;
        align-items: center;

        // Note: Needs a bit of specificity to beat display: block rule in langVisibility.css
        // However, also need to make sure you don't accidentall change display: none to display: flex
        .bloom-editable.bloom-visibility-code-on {
            display: flex;

            // We use direction=row, wrap, and item's basis=100% in order to layout the paragraphs (flex-item)
            // one paragraph after another vertically.
            // The benefit of Row instead of Column is that OverflowChecker already resizes these items well.
            // With Column, I found that in the align-bottom case, OverflowChecker doesn't get the required height right
            // and consequently the boxes won't be grown big enough.
            flex-direction: row;
            flex-wrap: wrap;

            // Vertical alignment
            align-items: center;
            // the default for align-content is stretch, but that overrides our Paragraph Spacing setting and can create big gaps between the flex-items (paragraphs).
            align-content: center;

            // This is set 100% elsewhere, but that doesn't work for bubbles with padding.  (BL-13604)
            width: auto;

            // Paragraphs are the expected flex-items
            p {
                // Set to 100% so that two paragraphs can't share a line in the flex layout
                flex-basis: 100%;
                flex-grow: 0;
            }
        }

        // bloom-vertical-align should be on the translation group
        .bloom-vertical-align-top .bloom-editable {
            align-items: flex-start;
            align-content: flex-start;
        }

        .bloom-vertical-align-center .bloom-editable {
            align-items: center;
            align-content: center;
        }

        .bloom-vertical-align-bottom .bloom-editable {
            align-items: flex-end;
            align-content: flex-end;
        }
    }
}

// We have some special rules that give image containers margin in various places
// (e.g., traditional xmatter cover). But we don't want it inherited by canvas element
// image containers, because we expect them to exactly match the canvas elements.
// (Not sure if this is true any more...the rules mentioned above are probably all
// for bloom-canvas elements, now distinct from bloom-imageContainer.
.bloom-canvas .bloom-canvas-element .bloom-imageContainer {
    margin: 0;
}

// This is usually covered by a rule in basePage that makes bloom canvases
// fill their origami split (.customPage) but an IC in an canvas element in a motion book
// animation is not inside the page. At this point canvas element ICs should always fill
// the canvas element (this is how we clip cropped images).
// Also important for image containers on the cover, which are not in an origami split.
.bloom-canvas-element .bloom-imageContainer {
    box-sizing: border-box;
    height: 100%;
    width: 100%;
}
