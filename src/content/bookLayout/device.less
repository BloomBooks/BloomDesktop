@import "common-mixins.less";

// Contains css specifically targetting Device16x9Portrait, Device16x9Landscape and PictureStoryLandscape layouts

// Mixin for setting .marginBox margins for Device layouts.
.SetMarginBoxDevice(@PageWidth, @PageHeight) {
    height: @PageHeight - (@DeviceMargin*2);
    .SetWidth(@PageWidth);
    img {
        max-width: @PageWidth - (@DeviceMargin*2);
    }
    top: @DeviceMargin;
    left: @DeviceMargin !important;
}

// Mixin to leave space for page number at the bottom of the marginBox
.LeaveMarginForPageNumber(@PageHeight) {
    height: @PageHeight - @DeviceBottomMargin;
}

.SetWidth(@PageWidth) {
    width: @PageWidth - (@DeviceMargin*2);
}

// See the comments in basePage.less about WebView2 PDF publishing and page sizes.
// If we had a time machine, I would change the height and width to 8in and 4.5in
// instead of 1.77777778mm and 100mm, but that's too radical a change to risk at
// this point.  (My phone measures 117mm x 66mm, so the current measurements are a
// better approximation of actual device sizes anyway although still too large.)
.pdfPublishMode {
    .bloom-page {
        &.Device16x9Portrait {
            min-width: (floor((@Device16x9Portrait-Width / 25.4) * 96) / 96) *
                25.4;
            max-width: (floor((@Device16x9Portrait-Width / 25.4) * 96) / 96) *
                25.4;
            min-height: (floor((@Device16x9Portrait-Height / 25.4) * 96) / 96) *
                25.4;
            max-height: (floor((@Device16x9Portrait-Height / 25.4) * 96) / 96) *
                25.4;
        }
        &.Device16x9Landscape {
            min-width: (floor((@Device16x9Landscape-Width / 25.4) * 96) / 96) *
                25.4;
            max-width: (floor((@Device16x9Landscape-Width / 25.4) * 96) / 96) *
                25.4;
            min-height: (floor((@Device16x9Landscape-Height / 25.4) * 96) / 96) *
                25.4;
            max-height: (floor((@Device16x9Landscape-Height / 25.4) * 96) / 96) *
                25.4;
        }
    }
}

.bloom-page {
    &.Device16x9Portrait {
        min-width: @Device16x9Portrait-Width;
        max-width: @Device16x9Portrait-Width;
        min-height: @Device16x9Portrait-Height;
        max-height: @Device16x9Portrait-Height;
    }
    &.Device16x9Landscape {
        min-width: @Device16x9Landscape-Width;
        max-width: @Device16x9Landscape-Width;
        min-height: @Device16x9Landscape-Height;
        max-height: @Device16x9Landscape-Height;
    }
    &.PictureStoryLandscape {
        min-width: @PictureStoryLandscape-Width;
        max-width: @PictureStoryLandscape-Width;
        min-height: @PictureStoryLandscape-Height;
        max-height: @PictureStoryLandscape-Height;
    }
}

.Device16x9Landscape,
.PictureStoryLandscape {
    //TODO: This is only for videos
    // Why is this not used for Device16x9Portrait too?!
    background-color: black;
}

.Device16x9Landscape,
.Device16x9Portrait,
.PictureStoryLandscape {
    .marginBox {
        .split-pane.horizontal-percent > .split-pane-component.position-top {
            margin-bottom: 0;
        }

        .bloom-imageContainer {
            //the basePage.css has a "- 3px" that leaves the bottom of the screen unused
            height: calc(100%) !important;
        }
    }
    &.numberedPage {
        &::after {
            bottom: 5px;
        }
        &.side-left::after {
            left: calc(
                ~"100% / 2 - " (@DeviceMargin)
            ); // center page number on Device layouts
        }
        &.side-right::after {
            right: calc(
                ~"100% / 2 - " (@DeviceMargin)
            ); // center page number on Device layouts
        }
    }
}

.marginBox {
    .Device16x9Portrait & {
        .SetMarginBoxDevice(
            @Device16x9Portrait-Width,
            @Device16x9Portrait-Height
        );
    }
    .numberedPage.Device16x9Portrait & {
        .LeaveMarginForPageNumber(@Device16x9Portrait-Height);
    }

    .Device16x9Landscape & {
        .SetMarginBoxDevice(
            @Device16x9Landscape-Width,
            @Device16x9Landscape-Height
        );
    }
    .numberedPage.Device16x9Landscape & {
        .LeaveMarginForPageNumber(@Device16x9Landscape-Height);
    }

    // Unfortunate that we have to basically duplicate this from .SetMarginBoxDevice,
    // but without this the width in basePage.less wins. This way, we win because we are more specific.
    .screen-only.Device16x9Portrait & {
        .SetWidth(@Device16x9Portrait-Width);
    }
    .screen-only.Device16x9Landscape & {
        .SetWidth(@Device16x9Landscape-Width);
    }

    .PictureStoryLandscape & {
        .SetMarginBoxDevice(
            @PictureStoryLandscape-Width,
            @PictureStoryLandscape-Height
        );

        // make the top half take up the whole screen
        .position-top {
            bottom: 0 !important;
        }
        .position-bottom {
            display: none;
        }
    }
    .numberedPage.PictureStoryLandscape & {
        .LeaveMarginForPageNumber(@PictureStoryLandscape-Height);
    }
}
