// Styles that are shared by both the regular book css and the more minimalist epub css.

@preferredBackgroundGray: hsl(0, 0%, 86%);

body {
    line-height: 1.5;
    font-family: Andika, "Andika New Basic", "Andika Basic", "Gentium Basic",
        "Gentium Book Basic", "Doulos SIL", Sans-Serif;
}

// As of 5.5, Bloom can have style-based rules in the HTML file giving properties
// for highlighting active audio, and these use the ui-audioCurrent class that
// Bloom applies in the talking-book tool. Accordingly, we tell the agent to
// apply that class. However, the user may NOT have configured a custom highlighting.
// In case they do not, this provides the default highlighting. In this location,
// it works for edit mode, bloomPubs, both kinds of ePUBs, and very likely anywhere
// else we'd want ui-audioCurrent to produce a highlight.
// Setting the foreground color is usually redundant, but digital comic book covers
// use white text, and it's now possible for the user to choose a text color, so
// we want to ensure a contrast with the background color (unless the user overrides,
// in which case, adequate contrast is up to them).
// (Color is @bloom-yellow.)
// (When editing the text, this background causes problems (due to a Chromium bug)
// if the elements have their default position: relative. This is overidden in
// audioRecording.less.)
span.ui-audioCurrent,
div.ui-audioCurrent p,
.ui-audioCurrent .ui-enableHighlight {
    background-color: #febf00;
    color: black;
}

textarea,
.bloom-editable {
    // visible .bloom-editables are made display:flex rather than display:none
    // to allow for possible vertical alignment options. Once using display:flex,
    // the direction must be column, or paragraphs arrange in a row.
    // (We generally try not to use display:flex in epubs, because some readers don't handle it.
    // But it can easily sneak into custom xmatter and similar things, and then without this rule
    // we get an unexpected row behavior in readers that DO handle it.)
    flex-direction: column;
}

// Centers the img in the container making it as large as possible while preserving aspect ratio
// (for any obsolete xmatter pages which use a background image)
.bloom-backgroundImage {
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
}

// Centers the img in the container making it as large as possible while preserving aspect ratio
// (for all current pages, which currently have a child img element)
.bloom-imageContainer img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    &.bloom-imageObjectFit-cover {
        object-fit: cover; // if we don't have the proportions exactly right, object-fit:"contain" will make black borders
    }
}
.bloom-imageContainer.bloom-imageObjectFit-cover {
    background-size: cover;
}
.bloom-textOverPicture .bloom-imageContainer img {
    object-fit: unset;
    height: unset;
    // width will initially be 100%, but typically overridden by object style
}

// Now that we have overlay elements, we don't want to show the placeholder flower underneath them.
.bloom-imageContainer.hasOverlay > img[src="placeHolder.png"] {
    display: none;
}

// overridden if it is also nested in bloom-showImageDescriptions, but this can't be shared,
// because we can't use display:flex in epubs.
.bloom-imageContainer .bloom-imageDescription {
    display: none;
}

//This is needed to support captioned, inline images, as in  SIL LEAD's Uganda P4 Pupils Books.
//In these cases, the captions went from 1 to many lines, and
//the container needs to grow to hold the caption (else the text doesn't flow around the caption). But as it
//grows, we don't want the image to also keep moving downwards so that it is centered within the container.
// images also are going to look best left aligned.
.bloom-alignImageTopLeft img {
    object-position: 0 0;
}

.bloom-borderstyle-black,
.bloom-borderstyle-black-round,
.bloom-borderstyle-gray,
.bloom-borderstyle-gray-round {
    //It's not 100% clear people won't sometimes wish this was a fixed distance,
    //rather than proportional. After reading many non-concusive things on the topic,
    //I'm going with proportional for now.
    //padding: 1em;
    // And then in June 2018, we got a complaint, not about being proportional, but about being too large. So I (jh)
    // fiddled with Microsoft Publisher, and found that their "automatic" setting doesn't change based on font size.
    // I didn't see it change based on... anything. It was alway 0.04". So I exported to html and see that they use
    // 5.38pt in css. pt vs. px is a no-win situation; pt better for print, but px better for screen. The way things
    // are going, I expect we may have more electronic publishing than paper soon. So I'm sticking with px here.
    // And found that 7px gives same results as 5.38pt on my normal monitor.
    padding: 7px;

    .bloom-editable {
        //the normal grey edit-time-only border looks weird inset from a visible border
        //the highlighted border will still show when you're in the box
        border: none;
    }
}

.bloom-borderstyle-black {
    border: 1px solid black;
    border-radius: 0px;
    box-sizing: border-box;
}
.bloom-borderstyle-black-round {
    border: 1px solid black;
    border-radius: 10px;
    box-sizing: border-box;
}
.bloom-borderstyle-gray {
    border: 1px solid gray;
    border-radius: 0px;
    box-sizing: border-box;
}
.bloom-borderstyle-gray-round {
    border: 1px solid gray;
    border-radius: 10px;
    box-sizing: border-box;
}
.bloom-top-border-off {
    border-top: none;
}
.bloom-right-border-off {
    border-right: none;
}
.bloom-bottom-border-off {
    border-bottom: none;
}
.bloom-left-border-off {
    border-left: none;
}

.bloom-background-none {
    background-color: transparent;
}
// repeated classes to increase our specificity artificially
.bloom-translationGroup.bloom-background-gray.bloom-background-gray.bloom-background-gray {
    background-color: @preferredBackgroundGray !important;
}

// The user can get this in by pressing shift-enter. See bloomField.ts
// BL-9960 Moving this rule here from basePage.less, so that it will work for ePubs too.
span.bloom-linebreak {
    display: block;
    text-indent: 0;
}

// Text wrapping algorithms.
.bloom-page .bloom-editable.bloom-visibility-code-on {
    // Very long words should just allow themselves to be broken at the end of a line if they're
    // longer than a line.  See BL-12330.
    overflow-wrap: break-word;
    text-wrap: pretty;
    &.Title-On-Cover-style,
    &.Cover-Default-style,
    &.Title-On-Title-Page-style {
        text-wrap: balance;
    }
    &.Bubble-style {
        // Ensure that the text wrapping in overlays is generally stable.  See BL-13135.
        // We would use the "stable" keyword, but that isn't implemented in most browsers.
        text-wrap: wrap;
        box-sizing: content-box; // keep the same space for the text when selected
    }
}

// Rules that are shared by both the regular book front matter and the more minimalist epub front matter.
// These rules were moved from bloom-xmatter-sharedRules.less to basePage-sharedRules.less in Bloom 6.0.
.frontCover {
    .bloom-translationGroup.bookTitle {
        .bloom-editable {
            //NB: THe order here is important. bloom-content1 should be last so that if a box is
            // *both* bloom-contentNational1 and bloom-content1 (as is the default case for source collections),
            // we want the bloom-content1 rule to win.
            font-weight: bold;
            // 1.4em is the minimum to show ทไปทั่วพื้ without clipping.
            // Until Bloom 4.4, that was the default, but it was ugly
            // for everyone else. 1.0 looks great for a simple latin
            // alphabet without descenders, and 1.1 is safe with descenders. See BL-6402
            line-height: 1.1;
            min-height: auto; // elsewhere there is a min-height, that may or may not be a good idea, but for sure we don't want it here.
            // These apply when not in legacy mode.  See basePage-legacy-5-6.less and baseEPUB.less for the legacy mode rules.
            &.bloom-contentFirst {
                //main title
                font-size: var(--DefaultCoverTitle1FontSize, 25pt);
                margin-bottom: var(--MarginBetweenXMatterMinorItems, 5px);
            }
            &.bloom-contentSecond {
                font-size: var(--DefaultCoverTitle2FontSize, 12pt);
                margin-bottom: var(--MarginBetweenXMatterMinorItems, 5px);
            }
            &.bloom-contentThird {
                font-size: var(--DefaultCoverTitle3FontSize, 10pt);
            }
        }
    }
}

.Title-On-Cover-style {
    text-align: center;
}
.credits {
    .licenseAndCopyrightBlock {
        .copyright {
            margin-bottom: var(--MarginBetweenXMatterBlocks, 2em);
        }
        .licenseBlock {
            margin-bottom: var(--MarginBetweenXMatterBlocks, 2em);
        }
        img {
            // creative commons license image

            //note, if this is 93 or less, then FF29 (used to at least bloom 3.3) cuts off the right edge.
            //It was fine if you zoomed in, fine in a more modern FF, fine in PDF, etc.
            //I have tried changing a dozen different properties, including the image-rendering, and the
            // only thing that helped was to make it a bit larger
            width: 94px;
        }
    }
}
