@import (reference) "../../../../BloomBrowserUI/bloomUI.less";
@import (reference) "../../../bookLayout/common-mixins.less";
@vertical-space: 10px;

.bloom-page.simple-comprehension-quiz {
    // These are usually defined under :root. But in bloom-player, any rules
    // using things above the "actual-page-preview" element where we attach the
    // 'scoped' style rules don't work. The rule will emerge as something like
    // [_scoped_2] :root; but root is not inside the [_scoped_2] element so
    // the rule does not match. So just put them at the highest level that
    // covers comprehension quizzes.
    --pure-material-primary-rgb: 214, 86, 73;
    --pure-material-onprimary-rgb: 255, 255, 255;
    --pure-material-onsurface-rgb: 0, 0, 0;

    .bloom-translationGroup {
        margin-bottom: @vertical-space;
        flex-grow: 1;
    }
    .QuizHeader-style {
        font-size: 20pt;
        text-align: center;
        color: white;
        background-color: @bloom-red;
        // Hide a problem where if there are multiple lines, the browser thinks there is overflow.
        // https://issues.bloomlibrary.org/youtrack/issue/BL-9021
        // We can make the scroll bar go away in at least 3 ways:
        // overflow-y: visible !important;
        // padding-bottom: 2px;
        // line-height: 1.6em;

        padding-bottom: 2px; // I like this one because it's so minimal
    }
    .checkbox-and-textbox-choice {
        display: flex; // horizontal;
        // starts a new stacking context, so the z-index:-1 shadows behind the check boxes
        // are not hidden by the non-transparent bloom-page.
        z-index: 0;

        input {
            // This input is sized to fill the space of the circle we draw around the
            // check box. Also makes a bigger target on devices.
            // It is hidden by opacity:0 but can still be clicked.
            z-index: 11; // in front of the :before, :after etc, so it can really get clicked
            // We want to be able to click on it anywhere in the 40px square that holds the
            // active circle around the check box. So make the actual input that big, and adjust its
            // position so it occupies the space that the higlight circle does.
            display: block;
            left: -10px;
            top: -8px;
            display: block;
            margin: 0;
            margin-right: -10px; // to avoid 10px apparent extra margin from left:-10px.
            border-radius: 50%;
            width: 40px;
            min-width: 40px; // don't let large answer text squeeze this in the flex display.  (BL-10581)
            height: 40px;
            opacity: 0; // We can click on this but can't see it...gets rid of default appearance.
        }

        .placeToPutVariableCircle {
            z-index: -1; // Behind the checkbox and check mark
            // Same size and position as the input (checkbox).
            // Properties make it a circle.
            // When no overrides are applied, it is 60% red, but entirely hidden by scale:0
            // Various combinations of hover, focus, active, and checked
            // cause it to appear, sometimes with transition.
            position: absolute;
            left: -10px;
            top: -8px;
            display: block;
            margin: 0;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            background-color: rgba(var(--pure-material-onsurface-rgb), 0.6);
            box-shadow: none;
            outline: none;
            opacity: 1;
            transform: scale(
                0
            ); // a starting point for a transition that animates as it is clicked
        }

        // We make the box of the check box as a before element on the div.
        // (NOT on the placeToPutVariableCircle, though it's tempting to put
        // all the magic on the extra element, because its before: and after:
        // get hidden when it does.)
        & > input + div:before {
            content: "";
            display: block;
            position: absolute;
            box-sizing: border-box;
            left: -30px;
            top: 3px;
            border: solid 2px;
            border-color: rgba(var(--pure-material-onsurface-rgb), 0.6);
            border-radius: 2px;
            width: 18px;
            height: 18px;
        }

        /* Checkmark is done as a rotated half-bordered box that is the :before of the div */
        & > input + div::after {
            content: "";
            display: block;
            position: absolute;
            top: 3px;
            left: -30px;
            width: 10px;
            height: 5px;
            border: solid 2px transparent;
            border-right: none;
            border-top: none;
            transform: translate(3px, 4px) rotate(-45deg);
        }

        // When the check box is checked, the starting point for coloring the circle
        // is the red. This changes the effect of all the opacities that might be
        // used in hover, focus, active.
        & > input:checked ~ .placeToPutVariableCircle {
            background-color: rgb(var(--pure-material-primary-rgb));
        }

        // When checked, the box (and its border) take on this color.
        & > input:checked + div::before {
            border-color: rgb(var(--pure-material-primary-rgb));
            background-color: rgb(var(--pure-material-primary-rgb));
        }

        // When checked, the check mark goes from transparent to the appropriate color
        // for stuff like text on the primary color
        > input:checked + div::after {
            border-color: rgb(var(--pure-material-onprimary-rgb));
        }

        // This makes the circle faintly visible when hovered over.
        // However, it would interfere with the growing-circle effect
        // when the button is then clicked.
        // &:hover > input ~ .placeToPutVariableCircle {
        //     opacity: 0.04;
        // }

        // These rules can be used to make the circle indicate a focused control.
        // Current material design guidelines don't do this in general,
        // though at least one site has an animated pulsing circle iff the user
        // tabbed to the check box. Not sure if this state can be detected using
        // simple css.
        // input:focus ~ .placeToPutVariableCircle {
        //     opacity: 0.12;
        // }

        // &:hover input:focus ~ .placeToPutVariableCircle {
        //     opacity: 0.16;
        // }

        // As we click on the input, the variable circle goes from full brightness
        // to a fainter outline, and grows to its full size, a circle around the box.
        // This is done with the short transition indicated here.
        // When we release the mouse, we go back to the non-active transition time (0),
        // and scale (0), so the circle disappears at once.
        // Note: in Gecko45, for some reason, we very briefly get a square version of
        // the placeToPutVariableCircle when turning off. Can't find any reason for it,
        // and it doesn't happen in current FF, so inclined to live with it until Gecko60.
        input:active ~ .placeToPutVariableCircle {
            opacity: 0.5;
            transform: scale(1);
            transition: opacity 0.3s, transform 0.2s; //opacity 0.3s, transform 0.2s;
        }
    }
}

// overrides a rule in EditMode.less to push the language label over and make room for cog on right.
.bloom-editable.QuizHeader-style[contentEditable="true"][data-languageTipContent]:not([data-languageTipContent=""]):after,
.bloom-editable.QuizAnswer-style[contentEditable="true"][data-languageTipContent]:not([data-languageTipContent=""]):after,
.bloom-editable.QuizQuestion-style[contentEditable="true"][data-languageTipContent]:not([data-languageTipContent=""]):after {
    margin-right: 24px;
}
// Also hide the label except in the focused item (but only in editMode, where we have this label and other rules about it.
// In PDF, we don't want an :after at all...will mess up page layout. (BL-10019).
.editMode
    .bloom-editable.QuizAnswer-style:not(.cke_focus)[contentEditable="true"][data-languageTipContent]:not([data-languageTipContent=""]):after,
.editMode
    .bloom-editable.QuizQuestion-style:not(.cke_focus)[contentEditable="true"][data-languageTipContent]:not([data-languageTipContent=""]):after {
    content: "";
}

// In edit mode, the check boxes are checked if marked correct.
body.editMode
    .bloom-page.simple-comprehension-quiz
    .checkbox-and-textbox-choice {
    &.empty {
        opacity: 0.5; // dim empty ones.
        // It happens that we do want a checkbox-and-textbox-choice to display:flex,
        // but the key point of this very specific rule is to beat the one
        // below which makes it display:none in read mode.
        display: flex;
    }
}

.bloom-page.simple-comprehension-quiz {
    .checkbox-and-textbox-choice {
        &.empty {
            // Javascript adds this class if the answer contains nothing visible.
            // This rule is overridden by a more specific one in edit mode.
            display: none;
        }
        &.wasSelectedAtOnePoint:not(.correct-answer) {
            // In read mode, if they are selected but not correct, the whole answer dims
            opacity: 0.5;
        }
    }
}

// As of now, with bloom-player version 1.0.14, the style rule that defines the width of this button is in the Swiper stylesheet.
@pageTurningButtonWidth: 25px;

// Make room for the page-turning buttons that show when reading in non-touch devices
.simple-comprehension-quiz {
    .QuizQuestion-style,
    .checkbox-and-textbox-choice {
        // We could use a combined "margin" version, but we don't want to modify any vertical settings.
        margin-left: @pageTurningButtonWidth !important;
        margin-right: @pageTurningButtonWidth !important;
        width: auto;
    }
}
