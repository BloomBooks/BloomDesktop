// scope everything so we don't accidentally mess with other pages
[data-activity="simple-dom-choice"].bloom-interactive-page {
    .marginBox {
        display: flex;
        flex-direction: column;

        // Currently our layout is not smart enough to cope with the
        // situation where the book has L2 and/or L3 also showing. A possible enhancement would be to
        // make the layout so dynamic that it could handle multiple languages.
        .bloom-content2,
        .bloom-content3 {
            display: none;
        }

        // When an image is the prompt, it looks bad if a closely-cropped image is right up against the colored background of the page.
        // When an image is the answer, there is a white border but it still looks better with some padding. These don't necessarily
        // need to be the same padding, but at the moment they are.
        .bloom-imageContainer img {
            padding: 5px;
            box-sizing: border-box;
        }

        .Prompt-style {
            // not that .Prompt-style is also a user-modifiable style in the .htm file
            margin-bottom: 10px;
        }

        .player-button {
            display: block;
            border: none;
            margin-bottom: 11px;
            margin-right: 7px; // need room to show any button shadows

            .bloom-translationGroup {
                &.childOverflowingThis {
                    border-bottom: unset !important; // ENHANCE: instead, we shouldn't set this flag. We need a way to tell the JS that sets it not to.
                }

                .bloom-editable {
                    border: none; // don't show the grey box
                    min-height: unset;
                    // this allows the text-align:center, defined elsewhere, to actually work
                    // this number, 95px, was chosen to use the space available in 16x9 portrait, with these text samples: སྔགས་ཀྱི་ཀློག་བས་ཤེས་རབ་མི
                    // But, fixing this interferes with the user's ability to set line-height in the format dialog.
                    // line-height: 95px !important;
                    &.bloom-visibility-code-on {
                        min-height: 1.5em;
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        p {
                            // Table is an unusual choice here, but the only options here which keep the
                            // text centered vertically on the button no matter the line-spacing are:
                            // table, inline-table, and contents. Contents apparently has detrimental effects
                            // on accessibility.
                            display: table;
                        }
                    }
                }
            }
        }
    }

    // -----------------------
    // Layouts for Image with Word Buttons
    .imageThenChoices {
        display: flex;
        flex-grow: 1;
        // NB: without this overflow:hidden, the .choices div grows larger than necessary whe either we give it a margin-block-start:auto or tell
        // imageThenChoices to justify-content:space-between.
        overflow: hidden;

        .choices {
            // stack the buttons over each other
            display: flex;
            flex-direction: column;
            height: 100%;
            justify-content: space-evenly;
            align-items: center;
        }
    }

    // image on left, with a column of buttons on the right side
    &[class*="Landscape"] {
        .imageThenChoices {
            flex-direction: row;
            align-items: center; // nb: messes up the img size unless the image container has a explicit height

            div.bloom-imageContainer {
                margin-right: 10px;
                width: 50%;
                height: 80%; // undesirable but see note above about align-items:center on the parent, imageAndChoices
            }

            .choices {
                height: 258px; // the actual value is a hack. The importance is vertical centering the stack
                width: 50%;
            }

            .player-button {
                width: 90%;
                // Don't be tempted to put styles here to change the appearance of buttons
                // in landscape mode if those styles should be controlled by the Format
                // dialog; they will override it and confuse users (BL-11606)
            }
        }
    }

    // image on top, with a column of buttons below it
    &[class*="Portrait"] {
        .imageThenChoices {
            flex-direction: column;

            div.bloom-imageContainer {
                height: 40% !important;
                margin-bottom: 10px;
            }
            .choices .player-button {
                width: 85%;
            }
        }
    }

    // image on top, with a row of buttons below it
    &.Cm13Landscape {
        .imageThenChoices {
            flex-direction: column;

            div.bloom-imageContainer {
                height: 70% !important;
                margin-bottom: 10px;
            }

            .choices {
                flex-direction: row;
                justify-content: space-between;
                width: 100%;

                .player-button {
                    padding: 6px;
                }
            }
        }
    }

    // -----------------------
    // Layouts for Word with Image Buttons

    .wordThenChoices {
        display: flex;
        flex-grow: 1;

        // word on top; images underneath (arrangement of images depends on orientation)
        flex-direction: column;

        // NB: without this overflow:hidden, the .choices div grows larger than necessary whe either we give it a margin-block-start:auto or tell
        // imageThenChoices to justify-content:space-between.
        overflow: hidden;

        .bloom-translationGroup {
            min-width: 40%;
            flex-grow: 1;
            .bloom-editable {
                min-height: unset;
                &.bloom-visibility-code-on {
                    min-height: 1.5em;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    p {
                        // Table is an unusual choice here, but the only options here which keep the
                        // text centered vertically on the button no matter the line-spacing are:
                        // table, inline-table, and contents. Contents apparently has detrimental effects
                        // on accessibility.
                        display: table;
                    }
                }
            }
        }

        .choices {
            display: flex;
            overflow: hidden; // TODO Boost up?

            .player-button {
                margin: 1rem;
                .bloom-imageContainer {
                    // NB: a transparent background is fine in edit, where there is an <img>, but in bloomPUB (for some reason?) the image is places as a background-image
                    // on the bloom-imageContainer, and so a transparent background actually makes it disappear.
                    // background: transparent;
                    height: 100%;
                    margin-left: auto;
                    margin-right: auto;
                }

                // This padding on the button is required to keep the image from covering the corners of the button and to leave
                // room to see the color (e.g. green for right answer) if the image has no transparency.
                padding: 6px;
            }
        }
    }

    &[class*="Landscape"] {
        .marginBox .wordThenChoices {
            align-items: center; // nb: messes up the img size unless the image container has a explicit height

            .choices {
                height: 100%;
                width: 100%;
                justify-content: space-between;
                flex-direction: row;

                .player-button {
                    flex-grow: 1;
                    height: 80%;
                }
            }
        }
    }

    &[class*="Portrait"] {
        .marginBox .wordThenChoices {
            .word-to-match {
                margin-bottom: 10px;
            }

            .choices {
                flex-grow: 6; // somehow this makes a lot more difference in the bloom-player view
                flex-direction: column;
                align-items: center;
                margin-top: -1rem;

                .player-button {
                    height: 25%;
                    width: 50%;
                }
            }
        }
    }

    // image on top, with a row of buttons below it
    &.Cm13Landscape {
        .marginBox .wordThenChoices {
            flex-direction: column;

            .word-to-match {
                margin-bottom: 30px;
            }

            .choices {
                flex-direction: row;
                justify-content: space-between;
                min-width: 100%;

                .player-button {
                    height: 30%;
                    width: 30%;
                }
            }
        }
    }

    // ----------------------------------------------------------------------------------------------
    // For the rest of this stylesheet, we separate out all colors and such that could be overridden to get a different look

    // page

    & {
        background-color: #539eff; // legacy-only, beaten by appearance system setting to var with !important
        --page-background-color: #539eff; // appearance system
    }
    // page number
    &.numberedPage::after {
        color: white;
        --pageNumber-background-color: var(
            --page-background-color
        ); // appearance system
    }

    .player-button {
        //box-shadow: 0px 4px 0px rgba(0, 0, 0, 0.32);
        box-shadow: 0 5px 10px rgba(0, 0, 0, 0.19),
            0 6px 6px rgba(0, 0, 0, 0.09);
        border-radius: 10px;
        background-color: white;

        &.chosen-correct {
            color: white;
            background-color: #ffb453;
        }

        &.chosen-wrong {
            color: white;
            background-color: #848484;
        }

        // when the button is depressed
        &:active {
            //text-shadow: -1px -1px 0px #777, -1px -1px 0px #777;
            //box-shadow: inset 1px 1px 4px #222;
            box-shadow: none;
            transform: translateY(1px);
        }
    }

    .imageThenChoices {
        .bloom-imageContainer {
            background-color: transparent;
            border-radius: 8px;
        }
    }

    .wordThenChoices {
        .TextToMatch-style {
            color: white;
        }

        .bloom-imageContainer {
            background-color: white;
        }
    }
}
