@import (reference) "../../../../BloomBrowserUI/bloomUI.less";
@tan: #e9d9bd;
@paleTan: #f9e9cc;

// This is the beginning of Drag Activity Theme.
// The class activityBlueOnTan is applied to the activity page.
// Eventually, a different class would be applied when a different theme is chosen.
// The same nested classes should have different colors for each theme.
.activityBlueOnTan {
    --page-color: #e9d9bd;
    --target-color: #f9e9cc;
    --draggable-background-color: #2980bb;
    --draggable-color: white;
    --fixed-color: #fc8602;
    --slider-button-color: #2980bb;
    --slider-keyword-color: #902a90;
    --text-background: #75d0ee;
    &[data-activity="drag-word-chooser-slider"] {
        [data-txt-img] {
            border: 8px solid var(--slider-keyword-color) !important;
            border-radius: 18px;
            background-color: var(--text-background);
        }
    }
    &.bloom-page {
        // need this for specificity
        background-color: var(--page-color);
    }
    //Slider: .bloom-activity-slider {
    //     //background-color: yellow; // Todo
    //     background-image: linear-gradient(white, yellow);
    //     .bloom-activity-slider-item {
    //         border: 6px solid var(--slider-button-color);
    //         background-color: var(--text-background);
    //     }
    // }
    .bloom-textOverPicture.draggable-text {
        background-color: var(--draggable-background-color);
        color: var(--draggable-color);
    }
    .drag-item-correct,
    .drag-item-wrong {
        .bloom-translationGroup {
            background-color: transparent;
            color: var(--fixed-color);
        }
    }
    .drag-item-order-word,
    .drag-item-order-sentence p {
        background-color: var(--draggable-background-color);
        color: var(--draggable-color);
        border-radius: 10px;
        padding: 0px 11px;
        margin-right: 5px;
    }

    [data-target-of] {
        border: dashed 2px var(--draggable-background-color);
        // If we ever want targets to have a background color (except when hidden), here's the place.
        //background-color: var(--target-color);

        &:focus {
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1),
                0 0 8px var(--draggable-background-color);
        }
    }

    .bloom-change-page-button {
        background-color: var(--draggable-background-color);
        color: var(--draggable-color);
        border-radius: 10px;
        padding: 3px 2px 2px 10px;
        box-sizing: border-box;
        // This puts it in front of other things so it can actually be clicked.
        z-index: @textOverPictureZIndex;
        // In bloom-player, cursor seems to be auto, which here gives us a text editing cursor.
        // Not sure why that doesn't happen in play mode in Bloom desktop.
        // But anyway, we don't want it.
        cursor: default;
    }

    // We could add another common class to these three elements, but other themes
    // might want to style them differently.
    .check-button,
    .try-again-button,
    .show-correct-button {
        cursor: pointer;
        //font-size: 14px;
        font-weight: bold;
        //margin: 0 5px 5px 0;
        //padding: 5px 10px;
        text-decoration: none;
        //text-transform: uppercase;
        //transition: background-color 0.2s ease-in-out;
        // enough for a typical line of text and the decoration we're adding to make it look like a button;
        // tries to prevent initially coming up as overflowing, though may not succeed for other fonts.
        // Is there a better way?
        min-height: 36px;

        // This makes it look more like John's mockup, but it creates a stacking context,
        // and that interferes with setting the z-index on the handles and format button
        // to put them in front of the canvas even though they are outside the TOP box.
        //transform: skew(-5deg);

        // This should work, but it gets clipped at the bottom because the height
        // of the TOP box is set explicly in its style.
        // Instead I use the :after kludge below
        // border: 1px solid #0e2a8d !important;
        // border-radius: 4px;

        .bloom-translationGroup {
            background-color: var(--draggable-background-color);
            color: var(--draggable-color);
            height: 100%;
            width: 100%;
            border-radius: 4px;
            border-top: 5px solid #50d9eb;
            border-bottom: 4px solid #0e2a8d;
            text-shadow: 1px 0px black, 0px 2px black, -1px 0px black,
                0px -1px black;

            &:after {
                content: "";
                position: absolute;
                top: -5px;
                left: 0;
                // No idea why the -1px is needed here.
                width: calc(100% - 1px);
                // The +8px and the -4px above put this outside the TG's own border.
                height: calc(100% + 8px);
                border: 1px solid #0e2a8d;
                border-radius: 4px;
            }

            p:after {
                // This defeats something somewhere that otherwise adds a paragraph mark when clicked
                content: "";
            }
            // &:hover {
            //     background-color: #e6e6e6;
            // }
            // &:active {
            //     background-color: #ccc;
            // }
        }
    }
    .game-button {
        background-color: var(--draggable-background-color);
    }

    .activeButton {
        &:hover {
            border-color: @bloom-blue;
            &:active {
                border-color: black;
            }
        }
    }
}
