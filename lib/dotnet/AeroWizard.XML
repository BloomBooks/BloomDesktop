<?xml version="1.0"?>
<doc>
	<assembly>
		<name>AeroWizard</name>
	</assembly>
	<members>
		<member name="T:AeroWizard.ThemedLabel">
			<summary>
			A Label containing some text that will be drawn with glowing border on top of the Glass Sheet effect.
			</summary>
		</member>
		<member name="M:AeroWizard.ThemedLabel.#ctor">
			<summary>
			Initializes a new instance of the <see cref="T:AeroWizard.ThemedLabel"/> class.
			</summary>
		</member>
		<member name="M:AeroWizard.ThemedLabel.GetPreferredSize(System.Drawing.Size)">
			<summary>
			</summary>
			<param name="proposedSize">The custom-sized area for a control.</param>
			<returns>
			An ordered pair of type <see cref="T:System.Drawing.Size"/> representing the width and height of a rectangle.
			</returns>
		</member>
		<member name="M:AeroWizard.ThemedLabel.OnPaint(System.Windows.Forms.PaintEventArgs)">
			<summary>
			</summary>
			<param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
		</member>
		<member name="M:AeroWizard.ThemedLabel.WndProc(System.Windows.Forms.Message@)">
			<summary>
			</summary>
			<param name="m">The Windows <see cref="T:System.Windows.Forms.Message"/> to process.</param>
		</member>
		<member name="P:AeroWizard.ThemedLabel.BackColor">
			<summary>
			Gets or sets the background color for the control.
			</summary>
			<value></value>
			<returns>
			A <see cref="T:System.Drawing.Color"/> that represents the background color of the control. The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultBackColor"/> property.
			</returns>
			<PermissionSet>
				<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
			</PermissionSet>
		</member>
		<member name="P:AeroWizard.ThemedLabel.Image">
			<summary>
			Gets or sets the image that is displayed on a <see cref="T:System.Windows.Forms.Label"/>.
			</summary>
			<value></value>
			<returns>
			An <see cref="T:System.Drawing.Image"/> displayed on the <see cref="T:System.Windows.Forms.Label"/>. The default is null.
			</returns>
			<PermissionSet>
				<IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
				<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
				<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
				<IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
			</PermissionSet>
		</member>
		<member name="T:AeroWizard.GlassExtenderProvider">
			<summary>
			GlassExtenderProvider extends a <see cref="T:System.Windows.Forms.Form"/> and provides glass margins.
			</summary>
		</member>
		<member name="M:AeroWizard.GlassExtenderProvider.#ctor">
			<summary>
			Initializes a new instance of the <see cref="T:AeroWizard.GlassExtenderProvider"/> class.
			</summary>
		</member>
		<member name="M:AeroWizard.GlassExtenderProvider.GetGlassEnabled(System.Windows.Forms.Form)">
			<summary>
			Gets whether glass should be extended into the client space.
			</summary>
			<param name="form">The <see cref="T:System.Windows.Forms.Form"/> to be extended.</param>
			<returns><c>true</c> if the glass is enabled; otherwise <c>false</c>.</returns>
		</member>
		<member name="M:AeroWizard.GlassExtenderProvider.GetGlassMarginMovesForm(System.Windows.Forms.Form)">
			<summary>
			Gets a value indicating whether clicking and dragging within the top margin will move the form.
			</summary>
			<param name="form">The <see cref="T:System.Windows.Forms.Form"/> to be extended.</param>
			<returns><c>true</c> if clicking and dragging on the top margin moves the form; otherwise, <c>false</c>.</returns>
		</member>
		<member name="M:AeroWizard.GlassExtenderProvider.GetGlassMargins(System.Windows.Forms.Form)">
			<summary>
			Gets the glass margins.
			</summary>
			<param name="form">The <see cref="T:System.Windows.Forms.Form"/> to be extended.</param>
			<returns>The margins where the glass will be extended.</returns>
		</member>
		<member name="M:AeroWizard.GlassExtenderProvider.System#ComponentModel#IExtenderProvider#CanExtend(System.Object)">
			<summary>
			Specifies whether this object can provide its extender properties to the specified object.
			</summary>
			<param name="form">The <see cref="T:System.Object"/> to receive the extender properties.</param>
			<returns>
			true if this object can provide extender properties to the specified object; otherwise, false.
			</returns>
		</member>
		<member name="M:AeroWizard.GlassExtenderProvider.SetGlassEnabled(System.Windows.Forms.Form,System.Boolean)">
			<summary>
			Set whether the glass should be extended into the client space.
			</summary>
			<param name="form">The <see cref="T:System.Windows.Forms.Form"/> to be extended.</param>
			<param name="value">The enabled value.</param>
		</member>
		<member name="M:AeroWizard.GlassExtenderProvider.SetGlassMarginMovesForm(System.Windows.Forms.Form,System.Boolean)">
			<summary>
			Sets a value indicating whether clicking and dragging within the margin will move the form.
			</summary>
			<param name="form">The <see cref="T:System.Windows.Forms.Form"/> to be extended.</param>
			<param name="value"><c>true</c> if clicking and dragging within the margin moves the form; otherwise, <c>false</c>.</param>
		</member>
		<member name="M:AeroWizard.GlassExtenderProvider.SetGlassMargins(System.Windows.Forms.Form,System.Windows.Forms.Padding)">
			<summary>
			Sets the glass margins.
			</summary>
			<param name="form">The <see cref="T:System.Windows.Forms.Form"/> to be extended.</param>
			<param name="value">The margins where the glass will be extended.</param>
		</member>
		<member name="M:AeroWizard.GlassExtenderProvider.Dispose(System.Boolean)">
			<summary>
			Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Component"/> and optionally releases the managed resources.
			</summary>
			<param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
		</member>
		<member name="T:AeroWizard.GlassExtenderProvider.GlassFormProperties">
			<summary>
			Properties for each form that is extended.
			</summary>
		</member>
		<member name="T:AeroWizard.ThemeImageButton">
			<summary>
			ImageButton
			</summary>
		</member>
		<member name="T:AeroWizard.ImageButton">
			<summary>
			A button that displays an image and no text.
			</summary>
		</member>
		<member name="M:AeroWizard.ImageButton.#ctor">
			<summary>
			Initializes a new instance of the <see cref="T:AeroWizard.ImageButton"/> class.
			</summary>
		</member>
		<member name="M:AeroWizard.ImageButton.GetPreferredSize(System.Drawing.Size)">
			<summary>
			Retrieves the size of a rectangular area into which a control can be fitted.
			</summary>
			<param name="proposedSize">The custom-sized area for a control.</param>
			<returns>
			An ordered pair of type <see cref="T:System.Drawing.Size"/> representing the width and height of a rectangle.
			</returns>
		</member>
		<member name="M:AeroWizard.ImageButton.PerformClicked">
			<summary>
			For button user use to simulate a click operate.
			</summary>
		</member>
		<member name="M:AeroWizard.ImageButton.OnEnabledChanged(System.EventArgs)">
			<summary>
			Process Enabled property changed
			</summary>
			<param name="e"></param>
		</member>
		<member name="M:AeroWizard.ImageButton.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
			<summary>
			Raises the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event.
			</summary>
			<param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
		</member>
		<member name="M:AeroWizard.ImageButton.OnMouseEnter(System.EventArgs)">
			<summary>
			Raises the <see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)"/> event.
			</summary>
			<param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
		</member>
		<member name="M:AeroWizard.ImageButton.OnMouseLeave(System.EventArgs)">
			<summary>
			Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave"/> event.
			</summary>
			<param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
		</member>
		<member name="M:AeroWizard.ImageButton.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
			<summary>
			Raises the <see cref="E:System.Windows.Forms.Control.MouseUp"/> event.
			</summary>
			<param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
		</member>
		<member name="M:AeroWizard.ImageButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
			<summary>
			Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event.
			</summary>
			<param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
		</member>
		<member name="M:AeroWizard.ImageButton.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
			<summary>
			Paints the background of the control.
			</summary>
			<param name="pevent">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains information about the control to paint.</param>
		</member>
		<member name="M:AeroWizard.ImageButton.PaintButton(System.Drawing.Graphics,System.Drawing.Rectangle)">
			<summary>
			Primary function for painting the button. This method should be overridden instead of OnPaint.
			</summary>
			<param name="graphics">The graphics.</param>
			<param name="bounds">The bounds.</param>
		</member>
		<member name="P:AeroWizard.ImageButton.Text">
			<summary>
			Gets or sets the text associated with this control.
			</summary>
			<returns>
			The text associated with this control.
			</returns>
		</member>
		<member name="P:AeroWizard.ImageButton.ToolTipText">
			<summary>
			Gets or sets the tool tip text.
			</summary>
			<value>The tool tip text.</value>
		</member>
		<member name="P:AeroWizard.ImageButton.ButtonState">
			<summary>
			Gets or sets the state of the button.
			</summary>
			<value>The state of the button.</value>
		</member>
		<member name="P:AeroWizard.ImageButton.DefaultSize">
			<summary>
			</summary>
			<value></value>
			<returns>
			The default <see cref="T:System.Drawing.Size"/> of the control.
			</returns>
		</member>
		<member name="M:AeroWizard.ThemeImageButton.#ctor">
			<summary>
			ImageButton
			</summary>
		</member>
		<member name="M:AeroWizard.ThemeImageButton.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
			<summary>
			Paints the background of the control.
			</summary>
			<param name="pevent">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains information about the control to paint.</param>
		</member>
		<member name="P:AeroWizard.ThemeImageButton.CompatibleImageStrip">
			<summary>
			Gets or sets the compatible image strip used when visual style rendering is not available.
			</summary>
			<value>The compatible image strip.</value>
		</member>
		<member name="T:AeroWizard.WizardControl">
			<summary>
			Control providing an "Aero Wizard" style interface.
			</summary>
		</member>
		<member name="F:AeroWizard.WizardControl.components">
			<summary>
			Required designer variable.
			</summary>
		</member>
		<member name="M:AeroWizard.WizardControl.Dispose(System.Boolean)">
			<summary>
			Clean up any resources being used.
			</summary>
			<param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		</member>
		<member name="M:AeroWizard.WizardControl.InitializeComponent">
			<summary>
			Required method for Designer support - do not modify
			the contents of this method with the code editor.
			</summary>
		</member>
		<member name="M:AeroWizard.WizardControl.#ctor">
			<summary>
			Initializes a new instance of the <see cref="T:AeroWizard.WizardControl"/> class.
			</summary>
		</member>
		<member name="M:AeroWizard.WizardControl.BeginInit">
			<summary>
			Signals the object that initialization is starting.
			</summary>
		</member>
		<member name="M:AeroWizard.WizardControl.EndInit">
			<summary>
			Signals the object that initialization is complete.
			</summary>
		</member>
		<member name="M:AeroWizard.WizardControl.NextPage">
			<summary>
			Advances to the next page in the sequence.
			</summary>
		</member>
		<member name="M:AeroWizard.WizardControl.NextPage(AeroWizard.WizardPage)">
			<summary>
			Advances to the specified page.
			</summary>
			<param name="nextPage">The wizard page to go to next.</param>
		</member>
		<member name="M:AeroWizard.WizardControl.PreviousPage">
			<summary>
			Returns to the previous page.
			</summary>
		</member>
		<member name="M:AeroWizard.WizardControl.RestartPages">
			<summary>
			Restarts the wizard pages from the first page.
			</summary>
		</member>
		<member name="M:AeroWizard.WizardControl.GetContentAreaRectangle(System.Boolean)">
			<summary>
			Gets the content area rectangle.
			</summary>
			<param name="parentRelative">if set to <c>true</c> rectangle is relative to parent.</param>
			<returns>Coordinates of content area.</returns>
		</member>
		<member name="M:AeroWizard.WizardControl.OnCancelled">
			<summary>
			Raises the <see cref="E:AeroWizard.WizardControl.Cancelled"/> event.
			</summary>
			<remarks>The <see cref="M:AeroWizard.WizardControl.OnCancelled"/> method is obsolete in version 1.2; use the <see cref="M:AeroWizard.WizardControl.OnCancelling"/> method instead.</remarks>
		</member>
		<member name="M:AeroWizard.WizardControl.OnCancelling">
			<summary>
			Raises the <see cref="E:AeroWizard.WizardControl.Cancelling"/> event.
			</summary>
		</member>
		<member name="M:AeroWizard.WizardControl.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
			<summary>
			Raises the <see cref="E:System.Windows.Forms.Control.ControlAdded"/> event.
			</summary>
			<param name="e">A <see cref="T:System.Windows.Forms.ControlEventArgs"/> that contains the event data.</param>
		</member>
		<member name="M:AeroWizard.WizardControl.OnFinished">
			<summary>
			Raises the <see cref="E:AeroWizard.WizardControl.Finished"/> event.
			</summary>
		</member>
		<member name="M:AeroWizard.WizardControl.OnGotFocus(System.EventArgs)">
			<summary>
			Raises the <see cref="E:System.Windows.Forms.Control.GotFocus"/> event.
			</summary>
			<param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
		</member>
		<member name="M:AeroWizard.WizardControl.OnHandleCreated(System.EventArgs)">
			<summary>
			Raises the <see cref="E:System.Windows.Forms.Control.HandleCreated"/> event.
			</summary>
			<param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
		</member>
		<member name="M:AeroWizard.WizardControl.OnHandleDestroyed(System.EventArgs)">
			<summary>
			Raises the <see cref="E:System.Windows.Forms.Control.HandleDestroyed"/> event.
			</summary>
			<param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
		</member>
		<member name="M:AeroWizard.WizardControl.OnParentChanged(System.EventArgs)">
			<summary>
			Raises the <see cref="E:System.Windows.Forms.Control.ParentChanged"/> event.
			</summary>
			<param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
		</member>
		<member name="M:AeroWizard.WizardControl.OnSelectedPageChanged">
			<summary>
			Raises the <see cref="E:AeroWizard.WizardControl.SelectedPageChanged"/> event.
			</summary>
		</member>
		<member name="M:AeroWizard.WizardControl.UpdateButtons">
			<summary>
			Updates the buttons according to current sequence and history.
			</summary>
		</member>
		<member name="E:AeroWizard.WizardControl.Cancelled">
			<summary>
			Occurs when the Cancel button has been clicked and the form is closing.
			</summary>
			<remarks>The <see cref="E:AeroWizard.WizardControl.Cancelled"/> event is obsolete in version 1.2; use the <see cref="E:AeroWizard.WizardControl.Cancelling"/> event instead.</remarks>
		</member>
		<member name="E:AeroWizard.WizardControl.Cancelling">
			<summary>
			Occurs when the user clicks the Cancel button and allows for programmatic cancellation.
			</summary>
		</member>
		<member name="E:AeroWizard.WizardControl.Finished">
			<summary>
			Occurs when the user clicks the Next/Finish button and the page is set to <see cref="P:AeroWizard.WizardPage.IsFinishPage"/> or this is the last page in the <see cref="P:AeroWizard.WizardControl.Pages"/> collection.
			</summary>
		</member>
		<member name="E:AeroWizard.WizardControl.SelectedPageChanged">
			<summary>
			Occurs when the <see cref="P:AeroWizard.WizardControl.SelectedPage"/> property has changed.
			</summary>
		</member>
		<member name="P:AeroWizard.WizardControl.BackButtonState">
			<summary>
			Gets or sets the state of the back button.
			</summary>
			<value>The state of the back button.</value>
		</member>
		<member name="P:AeroWizard.WizardControl.BackButtonToolTipText">
			<summary>
			Gets or sets the back button tool tip text.
			</summary>
			<value>The back button tool tip text.</value>
		</member>
		<member name="P:AeroWizard.WizardControl.CancelButtonState">
			<summary>
			Gets the state of the cancel button.
			</summary>
			<value>The state of the cancel button.</value>
		</member>
		<member name="P:AeroWizard.WizardControl.CancelButtonText">
			<summary>
			Gets or sets the cancel button text.
			</summary>
			<value>The cancel button text.</value>
		</member>
		<member name="P:AeroWizard.WizardControl.FinishButtonText">
			<summary>
			Gets or sets the finish button text.
			</summary>
			<value>The finish button text.</value>
		</member>
		<member name="P:AeroWizard.WizardControl.HeaderText">
			<summary>
			Gets or sets the page header text.
			</summary>
			<value>The page header text.</value>
		</member>
		<member name="P:AeroWizard.WizardControl.NextButtonShieldEnabled">
			<summary>
			Gets or sets the shield icon on the next button.
			</summary>
			<value><c>true</c> if Next button should display a shield; otherwise, <c>false</c>.</value>
			<exception cref="T:System.PlatformNotSupportedException">Setting a UAF shield on a button only works on Vista and later versions of Windows.</exception>
		</member>
		<member name="P:AeroWizard.WizardControl.NextButtonState">
			<summary>
			Gets the state of the next button.
			</summary>
			<value>The state of the next button.</value>
		</member>
		<member name="P:AeroWizard.WizardControl.NextButtonText">
			<summary>
			Gets or sets the next button text.
			</summary>
			<value>The next button text.</value>
		</member>
		<member name="P:AeroWizard.WizardControl.Pages">
			<summary>
			Gets the collection of wizard pages in this wizard control.
			</summary>
			<value>The <see cref="T:AeroWizard.WizardControl.WizardPageCollection"/> that contains the <see cref="T:AeroWizard.WizardPage"/> objects in this <see cref="T:AeroWizard.WizardControl"/>.</value>
		</member>
		<member name="P:AeroWizard.WizardControl.SelectedPage">
			<summary>
			Gets the currently selected wizard page.
			</summary>
			<value>The selected wizard page. <c>null</c> if no page is active.</value>
		</member>
		<member name="P:AeroWizard.WizardControl.SuppressParentFormIconSync">
			<summary>
			Gets or sets a value indicating whether to suppress changing the parent form's icon to match the wizard's <see cref="P:AeroWizard.WizardControl.TitleIcon"/>.
			</summary>
			<value><c>true</c> to not change the parent form's icon to match this wizard's icon; otherwise, <c>false</c>.</value>
		</member>
		<member name="P:AeroWizard.WizardControl.SuppressParentFormCaptionSync">
			<summary>
			Gets or sets a value indicating whether to spupress changing the parent form's caption to match the wizard's <see cref="P:AeroWizard.WizardControl.Title"/>.
			</summary>
			<value><c>true</c> to not change the parent form's caption (Text) to match this wizard's title; otherwise, <c>false</c>.</value>
		</member>
		<member name="P:AeroWizard.WizardControl.Title">
			<summary>
			Gets or sets the title for the wizard.
			</summary>
			<value>The title text.</value>
		</member>
		<member name="P:AeroWizard.WizardControl.TitleIcon">
			<summary>
			Gets or sets the optionally displayed icon next to the wizard title.
			</summary>
			<value>The title icon.</value>
		</member>
		<member name="P:AeroWizard.WizardControl.SelectedPageIndex">
			<summary>
			Gets the index of the currently selected page.
			</summary>
			<value>The index of the selected page.</value>
		</member>
		<member name="T:AeroWizard.WizardControl.WizardPageCollection">
			<summary>
			A collection of <see cref="T:AeroWizard.WizardPage"/> controls.
			</summary>
		</member>
		<member name="T:System.Collections.Generic.EventedList`1">
			<summary>
			A generic list that provides event for changes to the list.
			</summary>
			<typeparam name="T">Type for the list.</typeparam>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.#cctor">
			<summary>
			Initializes the <see cref="T:System.Collections.Generic.EventedList`1"/> class.
			</summary>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.#ctor">
			<summary>
			Initializes a new instance of the <see cref="T:System.Collections.Generic.EventedList`1"/> class.
			</summary>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
			<summary>
			Initializes a new instance of the <see cref="T:System.Collections.Generic.EventedList`1"/> class.
			</summary>
			<param name="collection">The collection.</param>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.#ctor(System.Int32)">
			<summary>
			Initializes a new instance of the <see cref="T:System.Collections.Generic.EventedList`1"/> class.
			</summary>
			<param name="capacity">The capacity.</param>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.Add(`0)">
			<summary>
			Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
			</summary>
			<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
			<summary>
			Adds the range.
			</summary>
			<param name="collection">The collection.</param>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.AsReadOnly">
			<summary>
			Ases the read only.
			</summary>
			<returns></returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.BinarySearch(`0)">
			<summary>
			Binaries the search.
			</summary>
			<param name="item">The item.</param>
			<returns></returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
			<summary>
			Binaries the search.
			</summary>
			<param name="item">The item.</param>
			<param name="comparer">The comparer.</param>
			<returns></returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
			<summary>
			Binaries the search.
			</summary>
			<param name="index">The index.</param>
			<param name="count">The count.</param>
			<param name="item">The item.</param>
			<param name="comparer">The comparer.</param>
			<returns></returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.Clear">
			<summary>
			Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
			</summary>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.Contains(`0)">
			<summary>
			Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
			</summary>
			<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
			<returns>
			true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
			</returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.ConvertAll``1(System.Converter{`0,``0})">
			<summary>
			Converts all.
			</summary>
			<typeparam name="TOutput">The type of the output.</typeparam>
			<param name="converter">The converter.</param>
			<returns></returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.CopyTo(`0[])">
			<summary>
			Copies to.
			</summary>
			<param name="array">The array.</param>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.CopyTo(`0[],System.Int32)">
			<summary>
			Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
			</summary>
			<param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
			<param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
			<exception cref="T:System.ArgumentNullException">
				<paramref name="array"/> is null.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">
				<paramref name="arrayIndex"/> is less than 0.</exception>
			<exception cref="T:System.ArgumentException">
				<paramref name="array"/> is multidimensional.-or-<paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <c>T</c> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
			<summary>
			Copies to.
			</summary>
			<param name="index">The index.</param>
			<param name="array">The array.</param>
			<param name="arrayIndex">Index of the array.</param>
			<param name="count">The count.</param>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.Exists(System.Predicate{`0})">
			<summary>
			Existses the specified match.
			</summary>
			<param name="match">The match.</param>
			<returns></returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.Find(System.Predicate{`0})">
			<summary>
			Finds the specified match.
			</summary>
			<param name="match">The match.</param>
			<returns></returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.FindAll(System.Predicate{`0})">
			<summary>
			Finds all.
			</summary>
			<param name="match">The match.</param>
			<returns></returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.FindIndex(System.Predicate{`0})">
			<summary>
			Finds the index.
			</summary>
			<param name="match">The match.</param>
			<returns></returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.FindIndex(System.Int32,System.Predicate{`0})">
			<summary>
			Finds the index.
			</summary>
			<param name="startIndex">The start index.</param>
			<param name="match">The match.</param>
			<returns></returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
			<summary>
			Finds the index.
			</summary>
			<param name="startIndex">The start index.</param>
			<param name="count">The count.</param>
			<param name="match">The match.</param>
			<returns></returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.FindLast(System.Predicate{`0})">
			<summary>
			Finds the last.
			</summary>
			<param name="match">The match.</param>
			<returns></returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.FindLastIndex(System.Predicate{`0})">
			<summary>
			Finds the last index.
			</summary>
			<param name="match">The match.</param>
			<returns></returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
			<summary>
			Finds the last index.
			</summary>
			<param name="startIndex">The start index.</param>
			<param name="match">The match.</param>
			<returns></returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
			<summary>
			Finds the last index.
			</summary>
			<param name="startIndex">The start index.</param>
			<param name="count">The count.</param>
			<param name="match">The match.</param>
			<returns></returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.ForEach(System.Action{`0})">
			<summary>
			Fors the each.
			</summary>
			<param name="action">The action.</param>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.GetEnumerator">
			<summary>
			Gets the enumerator.
			</summary>
			<returns></returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.GetRange(System.Int32,System.Int32)">
			<summary>
			Gets the range of items and returns then in another list.
			</summary>
			<param name="index">The starting index.</param>
			<param name="count">The count of items to place in the list.</param>
			<returns>An <see cref="T:System.Collections.Generic.EventedList`1"/> with the requested items.</returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
			<summary>
			Copies to.
			</summary>
			<param name="array">The array.</param>
			<param name="arrayIndex">Index of the array.</param>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.System#Collections#IEnumerable#GetEnumerator">
			<summary>
			Returns an enumerator that iterates through a collection.
			</summary>
			<returns>
			An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
			</returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
			<summary>
			Returns an enumerator that iterates through the collection.
			</summary>
			<returns>
			A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
			</returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.System#Collections#IList#Add(System.Object)">
			<summary>
			Adds the specified item.
			</summary>
			<param name="item">The item.</param>
			<returns></returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.System#Collections#IList#Contains(System.Object)">
			<summary>
			Determines whether [contains] [the specified item].
			</summary>
			<param name="item">The item.</param>
			<returns>
				<c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
			</returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.System#Collections#IList#IndexOf(System.Object)">
			<summary>
			Indexes the of.
			</summary>
			<param name="item">The item.</param>
			<returns></returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
			<summary>
			Inserts the specified index.
			</summary>
			<param name="index">The index.</param>
			<param name="item">The item.</param>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.System#Collections#IList#Remove(System.Object)">
			<summary>
			Removes the specified item.
			</summary>
			<param name="item">The item.</param>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.IndexOf(`0)">
			<summary>
			Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
			</summary>
			<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
			<returns>
			The index of <paramref name="item"/> if found in the list; otherwise, -1.
			</returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.IndexOf(`0,System.Int32)">
			<summary>
			Indexes the of.
			</summary>
			<param name="item">The item.</param>
			<param name="index">The index.</param>
			<returns></returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.IndexOf(`0,System.Int32,System.Int32)">
			<summary>
			Indexes the of.
			</summary>
			<param name="item">The item.</param>
			<param name="index">The index.</param>
			<param name="count">The count.</param>
			<returns></returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.Insert(System.Int32,`0)">
			<summary>
			Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
			</summary>
			<param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
			<param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">
				<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
			<summary>
			Inserts the range.
			</summary>
			<param name="index">The index.</param>
			<param name="collection">The collection.</param>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.LastIndexOf(`0)">
			<summary>
			Lasts the index of.
			</summary>
			<param name="item">The item.</param>
			<returns></returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.LastIndexOf(`0,System.Int32)">
			<summary>
			Lasts the index of.
			</summary>
			<param name="item">The item.</param>
			<param name="index">The index.</param>
			<returns></returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.LastIndexOf(`0,System.Int32,System.Int32)">
			<summary>
			Lasts the index of.
			</summary>
			<param name="item">The item.</param>
			<param name="index">The index.</param>
			<param name="count">The count.</param>
			<returns></returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.Remove(`0)">
			<summary>
			Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
			</summary>
			<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
			<returns>
			true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
			</returns>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.RemoveAll(System.Predicate{`0})">
			<summary>
			Removes all.
			</summary>
			<param name="match">The match.</param>
			<returns></returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.RemoveAt(System.Int32)">
			<summary>
			Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
			</summary>
			<param name="index">The zero-based index of the item to remove.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">
				<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.RemoveRange(System.Int32,System.Int32)">
			<summary>
			Removes the range.
			</summary>
			<param name="index">The index.</param>
			<param name="count">The count.</param>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.Reverse">
			<summary>
			Reverses this instance.
			</summary>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.Reverse(System.Int32,System.Int32)">
			<summary>
			Reverses the specified index.
			</summary>
			<param name="index">The index.</param>
			<param name="count">The count.</param>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.Sort">
			<summary>
			Sorts this instance.
			</summary>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.Sort(System.Collections.Generic.IComparer{`0})">
			<summary>
			Sorts the specified comparer.
			</summary>
			<param name="comparer">The comparer.</param>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
			<summary>
			Sorts the specified index.
			</summary>
			<param name="index">The index.</param>
			<param name="count">The count.</param>
			<param name="comparer">The comparer.</param>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.ToArray">
			<summary>
			Toes the array.
			</summary>
			<returns></returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.TrimExcess">
			<summary>
			Trims the excess.
			</summary>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.TrueForAll(System.Predicate{`0})">
			<summary>
			Trues for all.
			</summary>
			<param name="match">The match.</param>
			<returns></returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.OnItemAdded(System.Int32,`0)">
			<summary>
			Called when [insert].
			</summary>
			<param name="index">The index.</param>
			<param name="value">The value.</param>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.OnItemChanged(System.Int32,`0,`0)">
			<summary>
			Called when [set].
			</summary>
			<param name="index">The index.</param>
			<param name="oldValue">The old value.</param>
			<param name="newValue">The new value.</param>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.OnItemDeleted(System.Int32,`0)">
			<summary>
			Called when [remove].
			</summary>
			<param name="index">The index.</param>
			<param name="value">The value.</param>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.OnReset">
			<summary>
			Called when [clear].
			</summary>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.IsCompatibleObject(System.Object)">
			<summary>
			Determines whether [is compatible object] [the specified value].
			</summary>
			<param name="value">The value.</param>
			<returns>
				<c>true</c> if [is compatible object] [the specified value]; otherwise, <c>false</c>.
			</returns>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.VerifyValueType(System.Object)">
			<summary>
			Verifies the type of the value.
			</summary>
			<param name="value">The value.</param>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.EnsureCapacity(System.Int32)">
			<summary>
			Ensures the capacity.
			</summary>
			<param name="min">The min.</param>
		</member>
		<member name="E:System.Collections.Generic.EventedList`1.ItemAdded">
			<summary>
			Occurs when an item has been added.
			</summary>
		</member>
		<member name="E:System.Collections.Generic.EventedList`1.ItemChanged">
			<summary>
			Occurs when an item has changed.
			</summary>
		</member>
		<member name="E:System.Collections.Generic.EventedList`1.ItemDeleted">
			<summary>
			Occurs when an item has been deleted.
			</summary>
		</member>
		<member name="E:System.Collections.Generic.EventedList`1.Reset">
			<summary>
			Occurs when the list has been reset.
			</summary>
		</member>
		<member name="P:System.Collections.Generic.EventedList`1.Capacity">
			<summary>
			Gets or sets the capacity.
			</summary>
			<value>The capacity.</value>
		</member>
		<member name="P:System.Collections.Generic.EventedList`1.Count">
			<summary>
			Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
			</summary>
			<value>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</value>
		</member>
		<member name="P:System.Collections.Generic.EventedList`1.System#Collections#ICollection#IsSynchronized">
			<summary>
			Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
			</summary>
			<value></value>
			<returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.</returns>
		</member>
		<member name="P:System.Collections.Generic.EventedList`1.System#Collections#ICollection#SyncRoot">
			<summary>
			Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
			</summary>
			<value></value>
			<returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.</returns>
		</member>
		<member name="P:System.Collections.Generic.EventedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
			<summary>
			Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
			</summary>
			<value></value>
			<returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.</returns>
		</member>
		<member name="P:System.Collections.Generic.EventedList`1.System#Collections#IList#IsFixedSize">
			<summary>
			Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
			</summary>
			<value></value>
			<returns>true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.</returns>
		</member>
		<member name="P:System.Collections.Generic.EventedList`1.System#Collections#IList#IsReadOnly">
			<summary>
			Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
			</summary>
			<value></value>
			<returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.</returns>
		</member>
		<member name="P:System.Collections.Generic.EventedList`1.System#Collections#IList#Item(System.Int32)">
			<summary>
			Gets or sets the <see cref="T:System.Object"/> at the specified index.
			</summary>
			<value></value>
		</member>
		<member name="P:System.Collections.Generic.EventedList`1.Item(System.Int32)">
			<summary>
			Gets or sets the element at the specified index.
			</summary>
			<param name="index">The zero-based index of the element to get or set.</param>
			<value>The element at the specified index.</value>
		</member>
		<member name="T:System.Collections.Generic.EventedList`1.Enumerator">
			<summary>
			Enumerates over the <see cref="T:System.Collections.Generic.EventedList`1"/>.
			</summary>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.Enumerator.#ctor(System.Collections.Generic.EventedList{`0})">
			<summary>
			Initializes a new instance of the <see cref="T:System.Collections.Generic.EventedList`1.Enumerator"/> struct.
			</summary>
			<param name="list">The list.</param>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.Enumerator.Dispose">
			<summary>
			Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
			</summary>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.Enumerator.System#Collections#IEnumerator#Reset">
			<summary>
			Sets the enumerator to its initial position, which is before the first element in the collection.
			</summary>
			<exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.Enumerator.MoveNext">
			<summary>
			Advances the enumerator to the next element of the collection.
			</summary>
			<returns>
			true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
			</returns>
			<exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
		</member>
		<member name="P:System.Collections.Generic.EventedList`1.Enumerator.Current">
			<summary>
			Gets the current.
			</summary>
			<value>The current.</value>
		</member>
		<member name="P:System.Collections.Generic.EventedList`1.Enumerator.System#Collections#IEnumerator#Current">
			<summary>
			Gets the current.
			</summary>
			<value>The current.</value>
		</member>
		<member name="T:System.Collections.Generic.EventedList`1.ListChangedEventArgs`1">
			<summary>
			An <see cref="T:System.EventArgs"/> structure passed to events generated by an <see cref="T:System.Collections.Generic.EventedList`1"/>.
			</summary>
			<typeparam name="T"></typeparam>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.ListChangedEventArgs`1.#ctor(System.ComponentModel.ListChangedType)">
			<summary>
			Initializes a new instance of the <see cref="T:System.Collections.Generic.EventedList`1.ListChangedEventArgs`1"/> class.
			</summary>
			<param name="type">The type of change.</param>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.ListChangedEventArgs`1.#ctor(System.ComponentModel.ListChangedType,`1,System.Int32)">
			<summary>
			Initializes a new instance of the <see cref="T:System.Collections.Generic.EventedList`1.ListChangedEventArgs`1"/> class.
			</summary>
			<param name="type">The type of change.</param>
			<param name="item">The item that has changed.</param>
			<param name="itemIndex">Index of the changed item.</param>
		</member>
		<member name="M:System.Collections.Generic.EventedList`1.ListChangedEventArgs`1.#ctor(System.ComponentModel.ListChangedType,`1,System.Int32,`1)">
			<summary>
			Initializes a new instance of the <see cref="T:System.Collections.Generic.EventedList`1.ListChangedEventArgs`1"/> class.
			</summary>
			<param name="type">The type of change.</param>
			<param name="item">The item that has changed.</param>
			<param name="itemIndex">Index of the changed item.</param>
			<param name="oldItem">The old item when an item has changed.</param>
		</member>
		<member name="P:System.Collections.Generic.EventedList`1.ListChangedEventArgs`1.Item">
			<summary>
			Gets the item that has changed.
			</summary>
			<value>The item.</value>
		</member>
		<member name="P:System.Collections.Generic.EventedList`1.ListChangedEventArgs`1.ItemIndex">
			<summary>
			Gets the index of the item.
			</summary>
			<value>The index of the item.</value>
		</member>
		<member name="P:System.Collections.Generic.EventedList`1.ListChangedEventArgs`1.ListChangedType">
			<summary>
			Gets the type of change for the list.
			</summary>
			<value>The type of change for the list.</value>
		</member>
		<member name="P:System.Collections.Generic.EventedList`1.ListChangedEventArgs`1.OldItem">
			<summary>
			Gets the item's previous value.
			</summary>
			<value>The old item.</value>
		</member>
		<member name="M:AeroWizard.WizardControl.WizardPageCollection.#ctor(AeroWizard.WizardControl)">
			<summary>
			Initializes a new instance of the <see cref="T:AeroWizard.WizardControl.WizardPageCollection"/> class.
			</summary>
			<param name="owner">The <see cref="T:AeroWizard.WizardControl"/> that this collection belongs to.</param>
		</member>
		<member name="P:AeroWizard.WizardControl.WizardPageCollection.Owner">
			<summary>
			Gets the <see cref="T:AeroWizard.WizardControl"/> to which this collection belongs.
			</summary>
			<value>The <see cref="T:AeroWizard.WizardControl"/>.</value>
		</member>
		<member name="T:AeroWizard.VisualStyleElementEx">
			<summary>
			Identifies a control or user interface (UI) element that is drawn with visual styles.
			</summary>
		</member>
		<member name="T:AeroWizard.VisualStyleElementEx.Navigation">
			<summary>
			Contains classes that provide <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> objects for navigation-related controls. This class cannot be inherited.
			</summary>
		</member>
		<member name="T:AeroWizard.VisualStyleElementEx.Navigation.BackButton">
			<summary>
			Provides <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> objects for the different states of the Back Button control. This class cannot be inherited.
			</summary>
		</member>
		<member name="P:AeroWizard.VisualStyleElementEx.Navigation.BackButton.Normal">
			<summary>Gets a visual style element that represents a back button in the normal state.</summary>
			<value>A <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> that represents a back button in the normal state.</value>
		</member>
		<member name="P:AeroWizard.VisualStyleElementEx.Navigation.BackButton.Hot">
			<summary>Gets a visual style element that represents a back button in the hot state.</summary>
			<value>A <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> that represents a back button in the hot state.</value>
		</member>
		<member name="P:AeroWizard.VisualStyleElementEx.Navigation.BackButton.Pressed">
			<summary>Gets a visual style element that represents a back button in the pressed state.</summary>
			<value>A <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> that represents a back button in the pressed state.</value>
		</member>
		<member name="P:AeroWizard.VisualStyleElementEx.Navigation.BackButton.Diabled">
			<summary>Gets a visual style element that represents a back button in the disabled state.</summary>
			<value>A <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> that represents a back button in the disabled state.</value>
		</member>
		<member name="T:AeroWizard.VisualStyleElementEx.Navigation.ForwardButton">
			<summary>
			Provides <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> objects for the different states of the Forward Button control. This class cannot be inherited.
			</summary>
		</member>
		<member name="P:AeroWizard.VisualStyleElementEx.Navigation.ForwardButton.Normal">
			<summary>Gets a visual style element that represents a forward button in the normal state.</summary>
			<value>A <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> that represents a forward button in the normal state.</value>
		</member>
		<member name="P:AeroWizard.VisualStyleElementEx.Navigation.ForwardButton.Hot">
			<summary>Gets a visual style element that represents a forward button in the hot state.</summary>
			<value>A <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> that represents a forward button in the hot state.</value>
		</member>
		<member name="P:AeroWizard.VisualStyleElementEx.Navigation.ForwardButton.Pressed">
			<summary>Gets a visual style element that represents a forward button in the pressed state.</summary>
			<value>A <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> that represents a forward button in the pressed state.</value>
		</member>
		<member name="P:AeroWizard.VisualStyleElementEx.Navigation.ForwardButton.Diabled">
			<summary>Gets a visual style element that represents a forward button in the disabled state.</summary>
			<value>A <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> that represents a forward button in the disabled state.</value>
		</member>
		<member name="T:AeroWizard.VisualStyleElementEx.Navigation.MenuButton">
			<summary>
			Provides <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> objects for the different states of the Menu Button control. This class cannot be inherited.
			</summary>
		</member>
		<member name="P:AeroWizard.VisualStyleElementEx.Navigation.MenuButton.Normal">
			<summary>Gets a visual style element that represents a menu button in the normal state.</summary>
			<value>A <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> that represents a menu button in the normal state.</value>
		</member>
		<member name="P:AeroWizard.VisualStyleElementEx.Navigation.MenuButton.Hot">
			<summary>Gets a visual style element that represents a menu button in the hot state.</summary>
			<value>A <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> that represents a menu button in the hot state.</value>
		</member>
		<member name="P:AeroWizard.VisualStyleElementEx.Navigation.MenuButton.Pressed">
			<summary>Gets a visual style element that represents a menu button in the pressed state.</summary>
			<value>A <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> that represents a menu button in the pressed state.</value>
		</member>
		<member name="P:AeroWizard.VisualStyleElementEx.Navigation.MenuButton.Diabled">
			<summary>Gets a visual style element that represents a menu button in the disabled state.</summary>
			<value>A <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> that represents a menu button in the disabled state.</value>
		</member>
		<member name="T:AeroWizard.VisualStyleElementEx.AeroWizard">
			<summary>
			Contains classes that provide <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> objects for AeroWizard-related controls. This class cannot be inherited.
			</summary>
		</member>
		<member name="T:AeroWizard.VisualStyleElementEx.AeroWizard.Button">
			<summary>
			Provides a <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> for the button of a wizard. This class cannot be inherited.
			</summary>
		</member>
		<member name="P:AeroWizard.VisualStyleElementEx.AeroWizard.Button.Normal">
			<summary>Gets a visual style element that represents a button in a wizard.</summary>
			<value>A <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> that represents a button in a wizard.</value>
		</member>
		<member name="T:AeroWizard.VisualStyleElementEx.AeroWizard.CommandArea">
			<summary>
			Provides a <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> for the command area of a wizard. This class cannot be inherited.
			</summary>
		</member>
		<member name="P:AeroWizard.VisualStyleElementEx.AeroWizard.CommandArea.Normal">
			<summary>Gets a visual style element that represents the command area of a wizard.</summary>
			<value>A <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> that represents the command area of a wizard.</value>
		</member>
		<member name="T:AeroWizard.VisualStyleElementEx.AeroWizard.ContentArea">
			<summary>
			Provides a <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> for the content area of a wizard. This class cannot be inherited.
			</summary>
		</member>
		<member name="P:AeroWizard.VisualStyleElementEx.AeroWizard.ContentArea.Normal">
			<summary>Gets a visual style element that represents the content area of a wizard.</summary>
			<value>A <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> that represents the content area of a wizard.</value>
		</member>
		<member name="P:AeroWizard.VisualStyleElementEx.AeroWizard.ContentArea.NoMargin">
			<summary>Gets a visual style element that represents the content area of a wizard without a margin.</summary>
			<value>A <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> that represents the content area of a wizard without a margin.</value>
		</member>
		<member name="T:AeroWizard.VisualStyleElementEx.AeroWizard.HeaderArea">
			<summary>
			Provides a <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> for the header area of a wizard. This class cannot be inherited.
			</summary>
		</member>
		<member name="P:AeroWizard.VisualStyleElementEx.AeroWizard.HeaderArea.Normal">
			<summary>Gets a visual style element that represents the header area of a wizard.</summary>
			<value>A <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> that represents the header area of a wizard.</value>
		</member>
		<member name="P:AeroWizard.VisualStyleElementEx.AeroWizard.HeaderArea.NoMargin">
			<summary>Gets a visual style element that represents the header area of a wizard without a margin.</summary>
			<value>A <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> that represents the header area of a wizard without a margin.</value>
		</member>
		<member name="T:AeroWizard.VisualStyleElementEx.AeroWizard.TitleBar">
			<summary>
			Provides a <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> for each state of the titlebar of a wizard. This class cannot be inherited.
			</summary>
		</member>
		<member name="P:AeroWizard.VisualStyleElementEx.AeroWizard.TitleBar.Active">
			<summary>Gets a visual style element that represents the titlebar of an active wizard.</summary>
			<value>A <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> that represents the titlebar of an active wizard.</value>
		</member>
		<member name="P:AeroWizard.VisualStyleElementEx.AeroWizard.TitleBar.Inactive">
			<summary>Gets a visual style element that represents the titlebar of an inactive wizard.</summary>
			<value>A <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> that represents the titlebar of an inactive wizard.</value>
		</member>
		<member name="T:AeroWizard.Properties.Resources">
			<summary>
			  A strongly-typed resource class, for looking up localized strings, etc.
			</summary>
		</member>
		<member name="P:AeroWizard.Properties.Resources.ResourceManager">
			<summary>
			  Returns the cached ResourceManager instance used by this class.
			</summary>
		</member>
		<member name="P:AeroWizard.Properties.Resources.Culture">
			<summary>
			  Overrides the current thread's CurrentUICulture property for all
			  resource lookups using this strongly typed resource class.
			</summary>
		</member>
		<member name="P:AeroWizard.Properties.Resources.BackBtnStrip">
			<summary>
			  Looks up a localized resource of type System.Drawing.Bitmap.
			</summary>
		</member>
		<member name="P:AeroWizard.Properties.Resources.WizardBackButtonToolTip">
			<summary>
			  Looks up a localized string similar to Returns to a previous page.
			</summary>
		</member>
		<member name="P:AeroWizard.Properties.Resources.WizardCancelText">
			<summary>
			  Looks up a localized string similar to Cancel.
			</summary>
		</member>
		<member name="P:AeroWizard.Properties.Resources.WizardControlIcon">
			<summary>
			  Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
			</summary>
		</member>
		<member name="P:AeroWizard.Properties.Resources.WizardFinishText">
			<summary>
			  Looks up a localized string similar to &amp;Finish.
			</summary>
		</member>
		<member name="P:AeroWizard.Properties.Resources.WizardHeader">
			<summary>
			  Looks up a localized string similar to Page Title.
			</summary>
		</member>
		<member name="P:AeroWizard.Properties.Resources.WizardHelpText">
			<summary>
			  Looks up a localized string similar to &amp;Help.
			</summary>
		</member>
		<member name="P:AeroWizard.Properties.Resources.WizardNextText">
			<summary>
			  Looks up a localized string similar to &amp;Next.
			</summary>
		</member>
		<member name="P:AeroWizard.Properties.Resources.WizardNoPagesNotice">
			<summary>
			  Looks up a localized string similar to No wizard pages have been added..
			</summary>
		</member>
		<member name="P:AeroWizard.Properties.Resources.WizardTitle">
			<summary>
			  Looks up a localized string similar to Wizard Title.
			</summary>
		</member>
		<member name="M:System.Windows.Forms.VisualStyles.VisualStyleRendererExtender.SetWindowThemeAttribute(System.Windows.Forms.IWin32Window,System.Windows.Forms.VisualStyles.VisualStyleRendererExtender.WindowThemeNonClientAttributes,System.Boolean)">
			<summary>
			Sets attributes to control how visual styles are applied to a specified window.
			</summary>
			<param name="window">The window.</param>
			<param name="attr">The attributes to apply or disable.</param>
			<param name="enable">if set to <c>true</c> enable the attribute, otherwise disable it.</param>
		</member>
		<member name="F:System.Windows.Forms.VisualStyles.VisualStyleRendererExtender.WindowThemeNonClientAttributes.NoDrawCaption">
			<summary>Do Not Draw The Caption (Text)</summary>
		</member>
		<member name="F:System.Windows.Forms.VisualStyles.VisualStyleRendererExtender.WindowThemeNonClientAttributes.NoDrawIcon">
			<summary>Do Not Draw the Icon</summary>
		</member>
		<member name="F:System.Windows.Forms.VisualStyles.VisualStyleRendererExtender.WindowThemeNonClientAttributes.NoSysMenu">
			<summary>Do Not Show the System Menu</summary>
		</member>
		<member name="F:System.Windows.Forms.VisualStyles.VisualStyleRendererExtender.WindowThemeNonClientAttributes.NoMirrorHelp">
			<summary>Do Not Mirror the Question mark Symbol</summary>
		</member>
		<member name="T:System.Windows.Forms.VisualStyles.VisualStyleRendererExtender.WTA_OPTIONS">
			<summary>
			The Options of What Attributes to Add/Remove
			</summary>
		</member>
		<member name="T:AeroWizard.WizardPage">
			<summary>
			Represents a single page in a <see cref="T:AeroWizard.WizardControl"/>.
			</summary>
		</member>
		<member name="F:AeroWizard.WizardPage.components">
			<summary>
			Required designer variable.
			</summary>
		</member>
		<member name="M:AeroWizard.WizardPage.Dispose(System.Boolean)">
			<summary>
			Clean up any resources being used.
			</summary>
			<param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		</member>
		<member name="M:AeroWizard.WizardPage.InitializeComponent">
			<summary>
			Required method for Designer support - do not modify
			the contents of this method with the code editor.
			</summary>
		</member>
		<member name="M:AeroWizard.WizardPage.#ctor">
			<summary>
			Initializes a new instance of the <see cref="T:AeroWizard.WizardPage"/> class.
			</summary>
		</member>
		<member name="M:AeroWizard.WizardPage.ToString">
			<summary>
			Returns a <see cref="T:System.String"/> that represents this wizard page.
			</summary>
			<returns>
			A <see cref="T:System.String"/> that represents this wizard page.
			</returns>
		</member>
		<member name="M:AeroWizard.WizardPage.OnCommit">
			<summary>
			Raises the <see cref="E:AeroWizard.WizardPage.Commit"/> event.
			</summary>
			<returns></returns>
		</member>
		<member name="M:AeroWizard.WizardPage.OnGotFocus(System.EventArgs)">
			<summary>
			Raises the <see cref="E:System.Windows.Forms.Control.GotFocus"/> event.
			</summary>
			<param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
		</member>
		<member name="M:AeroWizard.WizardPage.OnInitialize(AeroWizard.WizardPage)">
			<summary>
			Raises the <see cref="E:AeroWizard.WizardPage.Initialize"/> event.
			</summary>
			<param name="prevPage">The page that was previously selected.</param>
		</member>
		<member name="M:AeroWizard.WizardPage.OnRollback">
			<summary>
			Raises the <see cref="E:AeroWizard.WizardPage.Rollback"/> event.
			</summary>
			<returns></returns>
		</member>
		<member name="M:AeroWizard.WizardPage.OnTextChanged(System.EventArgs)">
			<summary>
			Raises the <see cref="E:System.Windows.Forms.Control.TextChanged"/> event.
			</summary>
			<param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
		</member>
		<member name="E:AeroWizard.WizardPage.Commit">
			<summary>
			Occurs when the user has clicked the Next/Finish button but before the page is changed.
			</summary>
		</member>
		<member name="E:AeroWizard.WizardPage.Initialize">
			<summary>
			Occurs when this page is entered.
			</summary>
		</member>
		<member name="E:AeroWizard.WizardPage.Rollback">
			<summary>
			Occurs when the user has clicked the Back button but before the page is changed.
			</summary>
		</member>
		<member name="P:AeroWizard.WizardPage.AllowBack">
			<summary>
			Gets or sets a value indicating whether to enable the Back button.
			</summary>
			<value><c>true</c> if Back button is enabled; otherwise, <c>false</c>.</value>
		</member>
		<member name="P:AeroWizard.WizardPage.AllowCancel">
			<summary>
			Gets or sets a value indicating whether to enable the Cancel button.
			</summary>
			<value><c>true</c> if Cancel button is enabled; otherwise, <c>false</c>.</value>
		</member>
		<member name="P:AeroWizard.WizardPage.AllowNext">
			<summary>
			Gets or sets a value indicating whether to enable the Next/Finish button.
			</summary>
			<value><c>true</c> if Next/Finish button is enabled; otherwise, <c>false</c>.</value>
		</member>
		<member name="P:AeroWizard.WizardPage.IsFinishPage">
			<summary>
			Gets or sets a value indicating whether this page is the last page in the sequence and should display the Finish text instead of the Next text on the Next/Finish button.
			</summary>
			<value><c>true</c> if this page is a finish page; otherwise, <c>false</c>.</value>
		</member>
		<member name="P:AeroWizard.WizardPage.NextPage">
			<summary>
			Gets or sets the next page that should be used when the user clicks the Next button or when the <see cref="M:AeroWizard.WizardControl.NextPage"/> method is called. This is used to override the default behavior of going to the next page in the sequence defined within the <see cref="P:AeroWizard.WizardControl.Pages"/> collection.
			</summary>
			<value>The wizard page to go to.</value>
		</member>
		<member name="P:AeroWizard.WizardPage.Owner">
			<summary>
			Gets the <see cref="T:AeroWizard.WizardControl"/> for this page.
			</summary>
			<value>The <see cref="T:AeroWizard.WizardControl"/> for this page.</value>
		</member>
		<member name="P:AeroWizard.WizardPage.ShowCancel">
			<summary>
			Gets or sets a value indicating whether to show the Cancel button. If both <see cref="P:AeroWizard.WizardPage.ShowCancel"/> and <see cref="P:AeroWizard.WizardPage.ShowNext"/> are <c>false</c>, then the bottom command area will not be shown.
			</summary>
			<value><c>true</c> if Cancel button should be shown; otherwise, <c>false</c>.</value>
		</member>
		<member name="P:AeroWizard.WizardPage.ShowNext">
			<summary>
			Gets or sets a value indicating whether to show the Next/Finish button. If both <see cref="P:AeroWizard.WizardPage.ShowCancel"/> and <see cref="P:AeroWizard.WizardPage.ShowNext"/> are <c>false</c>, then the bottom command area will not be shown.
			</summary>
			<value><c>true</c> if Next/Finish button should be shown; otherwise, <c>false</c>.</value>
		</member>
		<member name="P:AeroWizard.WizardPage.Size">
			<summary>
			Gets or sets the height and width of the control.
			</summary>
			<value></value>
			<returns>
			The <see cref="T:System.Drawing.Size"/> that represents the height and width of the control in pixels.
			</returns>
		</member>
		<member name="P:AeroWizard.WizardPage.Suppress">
			<summary>
			Gets or sets a value indicating whether this <see cref="T:AeroWizard.WizardPage"/> is suppressed and not shown in the normal flow.
			</summary>
			<value>
			  <c>true</c> if suppressed; otherwise, <c>false</c>.
			</value>
		</member>
		<member name="T:AeroWizard.WizardCommandButtonState">
			<summary>
			Button state for buttons controlling the wizard.
			</summary>
		</member>
		<member name="F:AeroWizard.WizardCommandButtonState.Enabled">
			<summary>Button is enabled and can be clicked.</summary>
		</member>
		<member name="F:AeroWizard.WizardCommandButtonState.Disabled">
			<summary>Button is disabled and cannot be clicked.</summary>
		</member>
		<member name="F:AeroWizard.WizardCommandButtonState.Hidden">
			<summary>Button is hidden from the user.</summary>
		</member>
		<member name="T:AeroWizard.WizardPageConfirmEventArgs">
			<summary>
			Arguments supplied to the <see cref="T:AeroWizard.WizardPage"/> events.
			</summary>
		</member>
		<member name="P:AeroWizard.WizardPageConfirmEventArgs.Cancel">
			<summary>
			Gets or sets a value indicating whether this action is to be cancelled or allowed.
			</summary>
			<value><c>true</c> if cancel; otherwise, <c>false</c> to allow. Default is <c>false</c>.</value>
		</member>
		<member name="P:AeroWizard.WizardPageConfirmEventArgs.Page">
			<summary>
			Gets the <see cref="T:AeroWizard.WizardPage"/> that has raised the event.
			</summary>
			<value>The wizard page.</value>
		</member>
		<member name="T:AeroWizard.WizardPageInitEventArgs">
			<summary>
			Arguments supplied to the <see cref="E:AeroWizard.WizardPage.Initialize"/> event.
			</summary>
		</member>
		<member name="P:AeroWizard.WizardPageInitEventArgs.PreviousPage">
			<summary>
			Gets the <see cref="T:AeroWizard.WizardPage"/> that was previously selected when the event was raised.
			</summary>
			<value>The previous wizard page.</value>
		</member>
		<member name="T:Microsoft.Win32.DesktopWindowManager.Margins">
			<summary>Margins structure for theme related functions.</summary>
		</member>
		<member name="T:Microsoft.Win32.DesktopWindowManager.DesktopWindowManager">
			<summary>Main DWM class, provides glass sheet effect and blur behind.</summary>
		</member>
		<member name="M:Microsoft.Win32.DesktopWindowManager.DesktopWindowManager.EnableBlurBehind(System.Windows.Forms.IWin32Window,System.Boolean)">
			<summary>
			Enable the Aero "Blur Behind" effect on the whole client area. Background must be black.
			</summary>
			<param name="window">The window.</param>
			<param name="enabled"><c>true</c> to enable blur behind for this window, <c>false</c> to disable it.</param>
		</member>
		<member name="M:Microsoft.Win32.DesktopWindowManager.DesktopWindowManager.EnableBlurBehind(System.Windows.Forms.IWin32Window,System.Drawing.Graphics,System.Drawing.Region,System.Boolean,System.Boolean)">
			<summary>
			Enable the Aero "Blur Behind" effect on a specific region of a drawing area. Background must be black.
			</summary>
			<param name="window">The window.</param>
			<param name="graphics">The graphics area on which the region resides.</param>
			<param name="region">The region within the client area to apply the blur behind.</param>
			<param name="enabled"><c>true</c> to enable blur behind for this region, <c>false</c> to disable it.</param>
			<param name="transitionOnMaximized"><c>true</c> if the window's colorization should transition to match the maximized windows; otherwise, <c>false</c>.</param>
		</member>
		<member name="M:Microsoft.Win32.DesktopWindowManager.DesktopWindowManager.EnableComposition(System.Boolean)">
			<summary>
			Enables or disables Desktop Window Manager (DWM) composition.
			</summary>
			<param name="value"><c>true</c> to enable DWM composition; <c>false</c> to disable composition.</param>
		</member>
		<member name="M:Microsoft.Win32.DesktopWindowManager.DesktopWindowManager.ExcludeChildFromGlass(System.Windows.Forms.Control,System.Windows.Forms.Control)">
			<summary>
			Excludes the specified child control from the glass effect.
			</summary>
			<param name="parent">The parent control.</param>
			<param name="control">The control to exclude.</param>
			<exception cref="T:System.ArgumentNullException">Occurs if control is null.</exception>
			<exception cref="T:System.ArgumentException">Occurs if control is not a child control.</exception>
		</member>
		<member name="M:Microsoft.Win32.DesktopWindowManager.DesktopWindowManager.ExtendFrameIntoClientArea(System.Windows.Forms.IWin32Window,System.Windows.Forms.Padding)">
			<summary>
			Extends the window frame beyond the client area.
			</summary>
			<param name="window">The window.</param>
			<param name="padding">The padding to use as the area into which the frame is extended.</param>
		</member>
		<member name="M:Microsoft.Win32.DesktopWindowManager.DesktopWindowManager.IsCompositionEnabled">
			<summary>
			Indicates whether Desktop Window Manager (DWM) composition is enabled.
			</summary>
			<returns><c>true</c> if is composition enabled; otherwise, <c>false</c>.</returns>
		</member>
		<member name="E:Microsoft.Win32.DesktopWindowManager.DesktopWindowManager.ColorizationColorChanged">
			<summary>
			Occurs when the colorization color has changed.
			</summary>
		</member>
		<member name="E:Microsoft.Win32.DesktopWindowManager.DesktopWindowManager.CompositionChanged">
			<summary>
			Occurs when the desktop window composition has been enabled or disabled.
			</summary>
		</member>
		<member name="E:Microsoft.Win32.DesktopWindowManager.DesktopWindowManager.NonClientRenderingChanged">
			<summary>
			Occurs when the non-client area rendering policy has changed.
			</summary>
		</member>
	</members>
</doc>
